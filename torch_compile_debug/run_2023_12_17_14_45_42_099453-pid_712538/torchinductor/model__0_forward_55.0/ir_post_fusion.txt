buf0: SchedulerNode(ComputedBuffer)
buf0.writes = [MemoryDep('buf0', 147*c0 + c1 + 3*c2, {c0: 64, c1: 3, c2: 49})]
buf0.unmet_dependencies = []
buf0.met_dependencies = [MemoryDep('primals_1', c0, {c0: 9408})]
buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf18'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf0.group.device = cpu
buf0.group.iteration = ((64, 3, 49), ())
buf0.sizes = ([64, 3, 49], [])
class buf0_loop_body:
    var_ranges = {z0: 64, z1: 3, z2: 49}
    index0 = 147*z0 + 49*z1 + z2
    index1 = 147*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = [MemoryDep('buf1', 576*c0 + c1 + 64*c2, {c0: 64, c1: 64, c2: 9})]
buf1.unmet_dependencies = []
buf1.met_dependencies = [MemoryDep('primals_7', c0, {c0: 36864})]
buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf36'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf1.group.device = cpu
buf1.group.iteration = ((64, 64, 9), ())
buf1.sizes = ([64, 64, 9], [])
class buf1_loop_body:
    var_ranges = {z0: 64, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_7', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = [MemoryDep('buf2', 576*c0 + c1 + 64*c2, {c0: 64, c1: 64, c2: 9})]
buf2.unmet_dependencies = []
buf2.met_dependencies = [MemoryDep('primals_19', c0, {c0: 36864})]
buf2.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf68'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf2.group.device = cpu
buf2.group.iteration = ((64, 64, 9), ())
buf2.sizes = ([64, 64, 9], [])
class buf2_loop_body:
    var_ranges = {z0: 64, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_19', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf2', get_index_1, load, None)
        return store


buf3: SchedulerNode(ComputedBuffer)
buf3.writes = [MemoryDep('buf3', 576*c0 + c1 + 64*c2, {c0: 64, c1: 64, c2: 9})]
buf3.unmet_dependencies = []
buf3.met_dependencies = [MemoryDep('primals_28', c0, {c0: 36864})]
buf3.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf92'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf3.group.device = cpu
buf3.group.iteration = ((64, 64, 9), ())
buf3.sizes = ([64, 64, 9], [])
class buf3_loop_body:
    var_ranges = {z0: 64, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_28', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf3', get_index_1, load, None)
        return store


buf4: SchedulerNode(ComputedBuffer)
buf4.writes = [MemoryDep('buf4', 1152*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 9})]
buf4.unmet_dependencies = []
buf4.met_dependencies = [MemoryDep('primals_37', c0, {c0: 147456})]
buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf116'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf4.group.device = cpu
buf4.group.iteration = ((128, 128, 9), ())
buf4.sizes = ([128, 128, 9], [])
class buf4_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_37', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf4', get_index_1, load, None)
        return store


buf5: SchedulerNode(ComputedBuffer)
buf5.writes = [MemoryDep('buf5', 1152*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 9})]
buf5.unmet_dependencies = []
buf5.met_dependencies = [MemoryDep('primals_49', c0, {c0: 147456})]
buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf148'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf5.group.device = cpu
buf5.group.iteration = ((128, 128, 9), ())
buf5.sizes = ([128, 128, 9], [])
class buf5_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_49', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf5', get_index_1, load, None)
        return store


buf6: SchedulerNode(ComputedBuffer)
buf6.writes = [MemoryDep('buf6', 1152*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 9})]
buf6.unmet_dependencies = []
buf6.met_dependencies = [MemoryDep('primals_58', c0, {c0: 147456})]
buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf172'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf6.group.device = cpu
buf6.group.iteration = ((128, 128, 9), ())
buf6.sizes = ([128, 128, 9], [])
class buf6_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_58', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf6', get_index_1, load, None)
        return store


buf7: SchedulerNode(ComputedBuffer)
buf7.writes = [MemoryDep('buf7', 1152*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 9})]
buf7.unmet_dependencies = []
buf7.met_dependencies = [MemoryDep('primals_67', c0, {c0: 147456})]
buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf196'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf7.group.device = cpu
buf7.group.iteration = ((128, 128, 9), ())
buf7.sizes = ([128, 128, 9], [])
class buf7_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_67', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf7', get_index_1, load, None)
        return store


buf8: SchedulerNode(ComputedBuffer)
buf8.writes = [MemoryDep('buf8', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9})]
buf8.unmet_dependencies = []
buf8.met_dependencies = [MemoryDep('primals_76', c0, {c0: 589824})]
buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf220'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf8.group.device = cpu
buf8.group.iteration = ((256, 256, 9), ())
buf8.sizes = ([256, 256, 9], [])
class buf8_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_76', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf8', get_index_1, load, None)
        return store


buf9: SchedulerNode(ComputedBuffer)
buf9.writes = [MemoryDep('buf9', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9})]
buf9.unmet_dependencies = []
buf9.met_dependencies = [MemoryDep('primals_88', c0, {c0: 589824})]
buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf252'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf9.group.device = cpu
buf9.group.iteration = ((256, 256, 9), ())
buf9.sizes = ([256, 256, 9], [])
class buf9_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_88', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf9', get_index_1, load, None)
        return store


buf10: SchedulerNode(ComputedBuffer)
buf10.writes = [MemoryDep('buf10', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9})]
buf10.unmet_dependencies = []
buf10.met_dependencies = [MemoryDep('primals_97', c0, {c0: 589824})]
buf10.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf276'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf10.group.device = cpu
buf10.group.iteration = ((256, 256, 9), ())
buf10.sizes = ([256, 256, 9], [])
class buf10_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_97', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf10', get_index_1, load, None)
        return store


buf11: SchedulerNode(ComputedBuffer)
buf11.writes = [MemoryDep('buf11', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9})]
buf11.unmet_dependencies = []
buf11.met_dependencies = [MemoryDep('primals_106', c0, {c0: 589824})]
buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf300'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf11.group.device = cpu
buf11.group.iteration = ((256, 256, 9), ())
buf11.sizes = ([256, 256, 9], [])
class buf11_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_106', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf11', get_index_1, load, None)
        return store


buf12: SchedulerNode(ComputedBuffer)
buf12.writes = [MemoryDep('buf12', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9})]
buf12.unmet_dependencies = []
buf12.met_dependencies = [MemoryDep('primals_115', c0, {c0: 589824})]
buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf324'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf12.group.device = cpu
buf12.group.iteration = ((256, 256, 9), ())
buf12.sizes = ([256, 256, 9], [])
class buf12_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_115', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf12', get_index_1, load, None)
        return store


buf13: SchedulerNode(ComputedBuffer)
buf13.writes = [MemoryDep('buf13', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9})]
buf13.unmet_dependencies = []
buf13.met_dependencies = [MemoryDep('primals_124', c0, {c0: 589824})]
buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf348'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf13.group.device = cpu
buf13.group.iteration = ((256, 256, 9), ())
buf13.sizes = ([256, 256, 9], [])
class buf13_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_124', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf13', get_index_1, load, None)
        return store


buf14: SchedulerNode(ComputedBuffer)
buf14.writes = [MemoryDep('buf14', 4608*c0 + c1 + 512*c2, {c0: 512, c1: 512, c2: 9})]
buf14.unmet_dependencies = []
buf14.met_dependencies = [MemoryDep('primals_133', c0, {c0: 2359296})]
buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf372'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf14.group.device = cpu
buf14.group.iteration = ((512, 512, 9), ())
buf14.sizes = ([512, 512, 9], [])
class buf14_loop_body:
    var_ranges = {z0: 512, z1: 512, z2: 9}
    index0 = 4608*z0 + 9*z1 + z2
    index1 = 4608*z0 + z1 + 512*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_133', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf14', get_index_1, load, None)
        return store


buf15: SchedulerNode(ComputedBuffer)
buf15.writes = [MemoryDep('buf15', 4608*c0 + c1 + 512*c2, {c0: 512, c1: 512, c2: 9})]
buf15.unmet_dependencies = []
buf15.met_dependencies = [MemoryDep('primals_145', c0, {c0: 2359296})]
buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf396'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf15.group.device = cpu
buf15.group.iteration = ((512, 512, 9), ())
buf15.sizes = ([512, 512, 9], [])
class buf15_loop_body:
    var_ranges = {z0: 512, z1: 512, z2: 9}
    index0 = 4608*z0 + 9*z1 + z2
    index1 = 4608*z0 + z1 + 512*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_145', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf15', get_index_1, load, None)
        return store


buf16: SchedulerNode(ComputedBuffer)
buf16.writes = [MemoryDep('buf16', 4608*c0 + c1 + 512*c2, {c0: 512, c1: 512, c2: 9})]
buf16.unmet_dependencies = []
buf16.met_dependencies = [MemoryDep('primals_154', c0, {c0: 2359296})]
buf16.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf414'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf16.group.device = cpu
buf16.group.iteration = ((512, 512, 9), ())
buf16.sizes = ([512, 512, 9], [])
class buf16_loop_body:
    var_ranges = {z0: 512, z1: 512, z2: 9}
    index0 = 4608*z0 + 9*z1 + z2
    index1 = 4608*z0 + z1 + 512*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_154', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf16', get_index_1, load, None)
        return store


buf17: SchedulerNode(ComputedBuffer)
buf17.writes = [MemoryDep('buf17', c0 + 3*c1, {c0: 3, c1: 4096})]
buf17.unmet_dependencies = []
buf17.met_dependencies = [MemoryDep('primals_321', c0, {c0: 12288})]
buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf18'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf17.group.device = cpu
buf17.group.iteration = ((3, 4096), ())
buf17.sizes = ([3, 4096], [])
class buf17_loop_body:
    var_ranges = {z0: 3, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z0 + 3*z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_321', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf17', get_index_1, load, None)
        return store


buf18: ExternKernelSchedulerNode(ExternKernelAlloc)
buf18.writes = [StarDep(name='buf18')]
buf18.unmet_dependencies = [StarDep(name='buf0'), StarDep(name='buf17')]
buf18.met_dependencies = []
buf18.users = [NodeUser(node=SchedulerNode(name='buf19'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf20'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf21'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf25'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf18.node.kernel = extern_kernels.convolution


buf19_buf20: FusedSchedulerNode(NoneType)
buf19_buf20.writes = [MemoryDep('buf19', c0, {c0: 64}), MemoryDep('buf20', c0, {c0: 64})]
buf19_buf20.unmet_dependencies = [MemoryDep('buf18', c0 + 64*c1, {c0: 64, c1: 1024})]
buf19_buf20.met_dependencies = []
buf19_buf20.users = None
    buf19_buf20.snodes[0] =
    buf19: SchedulerNode(ComputedBuffer)
    buf19.writes = [MemoryDep('buf19', c0, {c0: 64})]
    buf19.unmet_dependencies = [MemoryDep('buf18', c0 + 64*c1, {c0: 64, c1: 1024})]
    buf19.met_dependencies = []
    buf19.users = [NodeUser(node=SchedulerNode(name='buf23'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf25'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf19.group.device = cpu
    buf19.group.iteration = ((64,), (1024,))
    buf19.sizes = ([64], [1024])
    class buf19_loop_body:
        var_ranges = {z0: 64, z1: 1024}
        index0 = z0 + 64*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf18', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf19', get_index_1, getitem)
            return store_reduction
    buf19_buf20.snodes[1] =
    buf20: SchedulerNode(ComputedBuffer)
    buf20.writes = [MemoryDep('buf20', c0, {c0: 64})]
    buf20.unmet_dependencies = [MemoryDep('buf18', c0 + 64*c1, {c0: 64, c1: 1024})]
    buf20.met_dependencies = []
    buf20.users = [NodeUser(node=SchedulerNode(name='buf22'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf24'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf25'), can_inplace=False, is_weak=False)]
    buf20.group.device = cpu
    buf20.group.iteration = ((64,), (1024,))
    buf20.sizes = ([64], [1024])
    class buf20_loop_body:
        var_ranges = {z0: 64, z1: 1024}
        index0 = z0 + 64*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf18', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf20', get_index_1, getitem_1)
            return store_reduction


buf22_buf24: FusedSchedulerNode(NoneType)
buf22_buf24.writes = [MemoryDep('buf22', c0, {c0: 64}), MemoryDep('buf24', c0, {c0: 64})]
buf22_buf24.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 64})]
buf22_buf24.met_dependencies = [MemoryDep('primals_163', c0, {c0: 64})]
buf22_buf24.users = None
    buf22_buf24.snodes[0] =
    buf22: SchedulerNode(ComputedBuffer)
    buf22.writes = [MemoryDep('buf22', c0, {c0: 64})]
    buf22.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 64})]
    buf22.met_dependencies = []
    buf22.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf22.group.device = cpu
    buf22.group.iteration = ((64,), ())
    buf22.sizes = ([64], [])
    class buf22_loop_body:
        var_ranges = {z0: 64}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf20', get_index)
            constant = ops.constant(1024.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf22', get_index_1, rsqrt, None)
            return store
    buf22_buf24.snodes[1] =
    buf24: SchedulerNode(ComputedBuffer)
    buf24.writes = [MemoryDep('buf24', c0, {c0: 64})]
    buf24.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 64})]
    buf24.met_dependencies = [MemoryDep('primals_163', c0, {c0: 64})]
    buf24.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf24.group.device = cpu
    buf24.group.iteration = ((64,), ())
    buf24.sizes = ([64], [])
    class buf24_loop_body:
        var_ranges = {z0: 64}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf20', get_index)
            constant = ops.constant(1024.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0009775171065494, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_163', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf24', get_index_2, add, None)
            return store


buf23: SchedulerNode(ComputedBuffer)
buf23.writes = [MemoryDep('buf23', c0, {c0: 64})]
buf23.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 64})]
buf23.met_dependencies = [MemoryDep('primals_162', c0, {c0: 64})]
buf23.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf23.group.device = cpu
buf23.group.iteration = ((64,), ())
buf23.sizes = ([64], [])
class buf23_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_162', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf23', get_index_2, add, None)
        return store


buf25: SchedulerNode(ComputedBuffer)
buf25.writes = [MemoryDep('buf25', c0, {c0: 65536})]
buf25.unmet_dependencies = 
    [   MemoryDep('buf18', c0, {c0: 65536}),
        MemoryDep('buf19', c1, {c0: 1024, c1: 64}),
        MemoryDep('buf20', c1, {c0: 1024, c1: 64})]
buf25.met_dependencies = 
    [   MemoryDep('primals_2', c1, {c0: 1024, c1: 64}),
        MemoryDep('primals_3', c1, {c0: 1024, c1: 64})]
buf25.users = [NodeUser(node=SchedulerNode(name='buf26'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf27'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf25.group.device = cpu
buf25.group.iteration = ((1024, 64), ())
buf25.sizes = ([1024, 64], [])
class buf25_loop_body:
    var_ranges = {z0: 1024, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf19', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf20', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_2', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_3', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf25', get_index_5, relu, None)
        return store


buf26_buf27: FusedSchedulerNode(NoneType)
buf26_buf27.writes = [MemoryDep('buf26', c0, {c0: 16384}), MemoryDep('buf27', c0, {c0: 16384})]
buf26_buf27.unmet_dependencies = 
    [   MemoryDep('buf25', 4096*c0 + 128*c1 + c2 + 1984, {c0: 16, c1: 16, c2: 64}),
        MemoryDep('buf25', 4096*c0 + 128*c1 + c2 + 2048, {c0: 16, c1: 16, c2: 64}),
        MemoryDep('buf25', 4096*c0 + 128*c1 + c2 + 2112, {c0: 16, c1: 16, c2: 64}),
        MemoryDep('buf25', 4096*c0 + 128*c1 + c2 + 64, {c0: 16, c1: 16, c2: 64}),
        MemoryDep('buf25', 4096*c0 + 128*c1 + c2 - 1984, {c0: 16, c1: 16, c2: 64}),
        MemoryDep('buf25', 4096*c0 + 128*c1 + c2 - 2048, {c0: 16, c1: 16, c2: 64}),
        MemoryDep('buf25', 4096*c0 + 128*c1 + c2 - 2112, {c0: 16, c1: 16, c2: 64}),
        MemoryDep('buf25', 4096*c0 + 128*c1 + c2 - 64, {c0: 16, c1: 16, c2: 64}),
        MemoryDep('buf25', 4096*c0 + 128*c1 + c2, {c0: 16, c1: 16, c2: 64})]
buf26_buf27.met_dependencies = []
buf26_buf27.users = None
    buf26_buf27.snodes[0] =
    buf26: SchedulerNode(ComputedBuffer)
    buf26.writes = [MemoryDep('buf26', c0, {c0: 16384})]
    buf26.unmet_dependencies = 
        [   MemoryDep('buf25', 4096*c0 + 128*c1 + c2 + 1984, {c0: 16, c1: 16, c2: 64}),
            MemoryDep('buf25', 4096*c0 + 128*c1 + c2 + 2048, {c0: 16, c1: 16, c2: 64}),
            MemoryDep('buf25', 4096*c0 + 128*c1 + c2 + 2112, {c0: 16, c1: 16, c2: 64}),
            MemoryDep('buf25', 4096*c0 + 128*c1 + c2 + 64, {c0: 16, c1: 16, c2: 64}),
            MemoryDep('buf25', 4096*c0 + 128*c1 + c2 - 1984, {c0: 16, c1: 16, c2: 64}),
            MemoryDep('buf25', 4096*c0 + 128*c1 + c2 - 2048, {c0: 16, c1: 16, c2: 64}),
            MemoryDep('buf25', 4096*c0 + 128*c1 + c2 - 2112, {c0: 16, c1: 16, c2: 64}),
            MemoryDep('buf25', 4096*c0 + 128*c1 + c2 - 64, {c0: 16, c1: 16, c2: 64}),
            MemoryDep('buf25', 4096*c0 + 128*c1 + c2, {c0: 16, c1: 16, c2: 64})]
    buf26.met_dependencies = []
    buf26.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf28'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf51'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf26.group.device = cpu
    buf26.group.iteration = ((16, 16, 64), ())
    buf26.sizes = ([16, 16, 64], [])
    class buf26_loop_body:
        var_ranges = {z0: 16, z1: 16, z2: 64}
        index0 = 2*z0 - 1
        index1 = 2*z1 - 1
        index2 = 4096*z0 + 128*z1 + z2 - 2112
        index3 = 2*z1
        index4 = 4096*z0 + 128*z1 + z2 - 2048
        index5 = 2*z1 + 1
        index6 = 4096*z0 + 128*z1 + z2 - 1984
        index7 = 2*z0
        index8 = 4096*z0 + 128*z1 + z2 - 64
        index9 = 4096*z0 + 128*z1 + z2
        index10 = 4096*z0 + 128*z1 + z2 + 64
        index11 = 2*z0 + 1
        index12 = 4096*z0 + 128*z1 + z2 + 1984
        index13 = 4096*z0 + 128*z1 + z2 + 2048
        index14 = 4096*z0 + 128*z1 + z2 + 2112
        index15 = 1024*z0 + 64*z1 + z2
        def body(self, ops):
            get_index = self.get_index('index0')
            index_expr = ops.index_expr(get_index, torch.int64)
            constant = ops.constant(0, torch.int64)
            ge = ops.ge(index_expr, constant)
            get_index_1 = self.get_index('index0')
            index_expr_1 = ops.index_expr(get_index_1, torch.int64)
            constant_1 = ops.constant(32, torch.int64)
            lt = ops.lt(index_expr_1, constant_1)
            and_ = ops.and_(ge, lt)
            get_index_2 = self.get_index('index1')
            index_expr_2 = ops.index_expr(get_index_2, torch.int64)
            constant_2 = ops.constant(0, torch.int64)
            ge_1 = ops.ge(index_expr_2, constant_2)
            get_index_3 = self.get_index('index1')
            index_expr_3 = ops.index_expr(get_index_3, torch.int64)
            constant_3 = ops.constant(32, torch.int64)
            lt_1 = ops.lt(index_expr_3, constant_3)
            and__1 = ops.and_(ge_1, lt_1)
            and__2 = ops.and_(and_, and__1)
            masked_subblock1 = self.masked_subblock1(and__2, -inf)
            get_index_4 = self.get_index('index0')
            index_expr_4 = ops.index_expr(get_index_4, torch.int64)
            constant_4 = ops.constant(0, torch.int64)
            ge_2 = ops.ge(index_expr_4, constant_4)
            get_index_5 = self.get_index('index0')
            index_expr_5 = ops.index_expr(get_index_5, torch.int64)
            constant_5 = ops.constant(32, torch.int64)
            lt_2 = ops.lt(index_expr_5, constant_5)
            and__3 = ops.and_(ge_2, lt_2)
            get_index_6 = self.get_index('index3')
            index_expr_6 = ops.index_expr(get_index_6, torch.int64)
            constant_6 = ops.constant(0, torch.int64)
            ge_3 = ops.ge(index_expr_6, constant_6)
            get_index_7 = self.get_index('index3')
            index_expr_7 = ops.index_expr(get_index_7, torch.int64)
            constant_7 = ops.constant(32, torch.int64)
            lt_3 = ops.lt(index_expr_7, constant_7)
            and__4 = ops.and_(ge_3, lt_3)
            and__5 = ops.and_(and__3, and__4)
            masked_subblock2 = self.masked_subblock2(and__5, -inf)
            maximum = ops.maximum(masked_subblock2, masked_subblock1)
            get_index_8 = self.get_index('index0')
            index_expr_8 = ops.index_expr(get_index_8, torch.int64)
            constant_8 = ops.constant(0, torch.int64)
            ge_4 = ops.ge(index_expr_8, constant_8)
            get_index_9 = self.get_index('index0')
            index_expr_9 = ops.index_expr(get_index_9, torch.int64)
            constant_9 = ops.constant(32, torch.int64)
            lt_4 = ops.lt(index_expr_9, constant_9)
            and__6 = ops.and_(ge_4, lt_4)
            get_index_10 = self.get_index('index5')
            index_expr_10 = ops.index_expr(get_index_10, torch.int64)
            constant_10 = ops.constant(0, torch.int64)
            ge_5 = ops.ge(index_expr_10, constant_10)
            get_index_11 = self.get_index('index5')
            index_expr_11 = ops.index_expr(get_index_11, torch.int64)
            constant_11 = ops.constant(32, torch.int64)
            lt_5 = ops.lt(index_expr_11, constant_11)
            and__7 = ops.and_(ge_5, lt_5)
            and__8 = ops.and_(and__6, and__7)
            masked_subblock3 = self.masked_subblock3(and__8, -inf)
            maximum_1 = ops.maximum(masked_subblock3, maximum)
            get_index_12 = self.get_index('index7')
            index_expr_12 = ops.index_expr(get_index_12, torch.int64)
            constant_12 = ops.constant(0, torch.int64)
            ge_6 = ops.ge(index_expr_12, constant_12)
            get_index_13 = self.get_index('index7')
            index_expr_13 = ops.index_expr(get_index_13, torch.int64)
            constant_13 = ops.constant(32, torch.int64)
            lt_6 = ops.lt(index_expr_13, constant_13)
            and__9 = ops.and_(ge_6, lt_6)
            get_index_14 = self.get_index('index1')
            index_expr_14 = ops.index_expr(get_index_14, torch.int64)
            constant_14 = ops.constant(0, torch.int64)
            ge_7 = ops.ge(index_expr_14, constant_14)
            get_index_15 = self.get_index('index1')
            index_expr_15 = ops.index_expr(get_index_15, torch.int64)
            constant_15 = ops.constant(32, torch.int64)
            lt_7 = ops.lt(index_expr_15, constant_15)
            and__10 = ops.and_(ge_7, lt_7)
            and__11 = ops.and_(and__9, and__10)
            masked_subblock4 = self.masked_subblock4(and__11, -inf)
            maximum_2 = ops.maximum(masked_subblock4, maximum_1)
            get_index_16 = self.get_index('index7')
            index_expr_16 = ops.index_expr(get_index_16, torch.int64)
            constant_16 = ops.constant(0, torch.int64)
            ge_8 = ops.ge(index_expr_16, constant_16)
            get_index_17 = self.get_index('index7')
            index_expr_17 = ops.index_expr(get_index_17, torch.int64)
            constant_17 = ops.constant(32, torch.int64)
            lt_8 = ops.lt(index_expr_17, constant_17)
            and__12 = ops.and_(ge_8, lt_8)
            get_index_18 = self.get_index('index3')
            index_expr_18 = ops.index_expr(get_index_18, torch.int64)
            constant_18 = ops.constant(0, torch.int64)
            ge_9 = ops.ge(index_expr_18, constant_18)
            get_index_19 = self.get_index('index3')
            index_expr_19 = ops.index_expr(get_index_19, torch.int64)
            constant_19 = ops.constant(32, torch.int64)
            lt_9 = ops.lt(index_expr_19, constant_19)
            and__13 = ops.and_(ge_9, lt_9)
            and__14 = ops.and_(and__12, and__13)
            masked_subblock5 = self.masked_subblock5(and__14, -inf)
            maximum_3 = ops.maximum(masked_subblock5, maximum_2)
            get_index_20 = self.get_index('index7')
            index_expr_20 = ops.index_expr(get_index_20, torch.int64)
            constant_20 = ops.constant(0, torch.int64)
            ge_10 = ops.ge(index_expr_20, constant_20)
            get_index_21 = self.get_index('index7')
            index_expr_21 = ops.index_expr(get_index_21, torch.int64)
            constant_21 = ops.constant(32, torch.int64)
            lt_10 = ops.lt(index_expr_21, constant_21)
            and__15 = ops.and_(ge_10, lt_10)
            get_index_22 = self.get_index('index5')
            index_expr_22 = ops.index_expr(get_index_22, torch.int64)
            constant_22 = ops.constant(0, torch.int64)
            ge_11 = ops.ge(index_expr_22, constant_22)
            get_index_23 = self.get_index('index5')
            index_expr_23 = ops.index_expr(get_index_23, torch.int64)
            constant_23 = ops.constant(32, torch.int64)
            lt_11 = ops.lt(index_expr_23, constant_23)
            and__16 = ops.and_(ge_11, lt_11)
            and__17 = ops.and_(and__15, and__16)
            masked_subblock6 = self.masked_subblock6(and__17, -inf)
            maximum_4 = ops.maximum(masked_subblock6, maximum_3)
            get_index_24 = self.get_index('index11')
            index_expr_24 = ops.index_expr(get_index_24, torch.int64)
            constant_24 = ops.constant(0, torch.int64)
            ge_12 = ops.ge(index_expr_24, constant_24)
            get_index_25 = self.get_index('index11')
            index_expr_25 = ops.index_expr(get_index_25, torch.int64)
            constant_25 = ops.constant(32, torch.int64)
            lt_12 = ops.lt(index_expr_25, constant_25)
            and__18 = ops.and_(ge_12, lt_12)
            get_index_26 = self.get_index('index1')
            index_expr_26 = ops.index_expr(get_index_26, torch.int64)
            constant_26 = ops.constant(0, torch.int64)
            ge_13 = ops.ge(index_expr_26, constant_26)
            get_index_27 = self.get_index('index1')
            index_expr_27 = ops.index_expr(get_index_27, torch.int64)
            constant_27 = ops.constant(32, torch.int64)
            lt_13 = ops.lt(index_expr_27, constant_27)
            and__19 = ops.and_(ge_13, lt_13)
            and__20 = ops.and_(and__18, and__19)
            masked_subblock7 = self.masked_subblock7(and__20, -inf)
            maximum_5 = ops.maximum(masked_subblock7, maximum_4)
            get_index_28 = self.get_index('index11')
            index_expr_28 = ops.index_expr(get_index_28, torch.int64)
            constant_28 = ops.constant(0, torch.int64)
            ge_14 = ops.ge(index_expr_28, constant_28)
            get_index_29 = self.get_index('index11')
            index_expr_29 = ops.index_expr(get_index_29, torch.int64)
            constant_29 = ops.constant(32, torch.int64)
            lt_14 = ops.lt(index_expr_29, constant_29)
            and__21 = ops.and_(ge_14, lt_14)
            get_index_30 = self.get_index('index3')
            index_expr_30 = ops.index_expr(get_index_30, torch.int64)
            constant_30 = ops.constant(0, torch.int64)
            ge_15 = ops.ge(index_expr_30, constant_30)
            get_index_31 = self.get_index('index3')
            index_expr_31 = ops.index_expr(get_index_31, torch.int64)
            constant_31 = ops.constant(32, torch.int64)
            lt_15 = ops.lt(index_expr_31, constant_31)
            and__22 = ops.and_(ge_15, lt_15)
            and__23 = ops.and_(and__21, and__22)
            masked_subblock8 = self.masked_subblock8(and__23, -inf)
            maximum_6 = ops.maximum(masked_subblock8, maximum_5)
            get_index_32 = self.get_index('index11')
            index_expr_32 = ops.index_expr(get_index_32, torch.int64)
            constant_32 = ops.constant(0, torch.int64)
            ge_16 = ops.ge(index_expr_32, constant_32)
            get_index_33 = self.get_index('index11')
            index_expr_33 = ops.index_expr(get_index_33, torch.int64)
            constant_33 = ops.constant(32, torch.int64)
            lt_16 = ops.lt(index_expr_33, constant_33)
            and__24 = ops.and_(ge_16, lt_16)
            get_index_34 = self.get_index('index5')
            index_expr_34 = ops.index_expr(get_index_34, torch.int64)
            constant_34 = ops.constant(0, torch.int64)
            ge_17 = ops.ge(index_expr_34, constant_34)
            get_index_35 = self.get_index('index5')
            index_expr_35 = ops.index_expr(get_index_35, torch.int64)
            constant_35 = ops.constant(32, torch.int64)
            lt_17 = ops.lt(index_expr_35, constant_35)
            and__25 = ops.and_(ge_17, lt_17)
            and__26 = ops.and_(and__24, and__25)
            masked_subblock9 = self.masked_subblock9(and__26, -inf)
            maximum_7 = ops.maximum(masked_subblock9, maximum_6)
            get_index_36 = self.get_index('index15')
            store = ops.store('buf26', get_index_36, maximum_7, None)
            return store
        def masked_subblock1(self, ops):
            get_index = self.get_index('index2')
            load = ops.load('buf25', get_index)
            return load
        def masked_subblock2(self, ops):
            get_index = self.get_index('index4')
            load = ops.load('buf25', get_index)
            return load
        def masked_subblock3(self, ops):
            get_index = self.get_index('index6')
            load = ops.load('buf25', get_index)
            return load
        def masked_subblock4(self, ops):
            get_index = self.get_index('index8')
            load = ops.load('buf25', get_index)
            return load
        def masked_subblock5(self, ops):
            get_index = self.get_index('index9')
            load = ops.load('buf25', get_index)
            return load
        def masked_subblock6(self, ops):
            get_index = self.get_index('index10')
            load = ops.load('buf25', get_index)
            return load
        def masked_subblock7(self, ops):
            get_index = self.get_index('index12')
            load = ops.load('buf25', get_index)
            return load
        def masked_subblock8(self, ops):
            get_index = self.get_index('index13')
            load = ops.load('buf25', get_index)
            return load
        def masked_subblock9(self, ops):
            get_index = self.get_index('index14')
            load = ops.load('buf25', get_index)
            return load
    buf26_buf27.snodes[1] =
    buf27: SchedulerNode(ComputedBuffer)
    buf27.writes = [MemoryDep('buf27', c0, {c0: 16384})]
    buf27.unmet_dependencies = 
        [   MemoryDep('buf25', 4096*c0 + 128*c1 + c2 + 1984, {c0: 16, c1: 16, c2: 64}),
            MemoryDep('buf25', 4096*c0 + 128*c1 + c2 + 2048, {c0: 16, c1: 16, c2: 64}),
            MemoryDep('buf25', 4096*c0 + 128*c1 + c2 + 2112, {c0: 16, c1: 16, c2: 64}),
            MemoryDep('buf25', 4096*c0 + 128*c1 + c2 + 64, {c0: 16, c1: 16, c2: 64}),
            MemoryDep('buf25', 4096*c0 + 128*c1 + c2 - 1984, {c0: 16, c1: 16, c2: 64}),
            MemoryDep('buf25', 4096*c0 + 128*c1 + c2 - 2048, {c0: 16, c1: 16, c2: 64}),
            MemoryDep('buf25', 4096*c0 + 128*c1 + c2 - 2112, {c0: 16, c1: 16, c2: 64}),
            MemoryDep('buf25', 4096*c0 + 128*c1 + c2 - 64, {c0: 16, c1: 16, c2: 64}),
            MemoryDep('buf25', 4096*c0 + 128*c1 + c2, {c0: 16, c1: 16, c2: 64})]
    buf27.met_dependencies = []
    buf27.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf27.group.device = cpu
    buf27.group.iteration = ((16, 16, 64), ())
    buf27.sizes = ([16, 16, 64], [])
    class buf27_loop_body:
        var_ranges = {z0: 16, z1: 16, z2: 64}
        index0 = 2*z0 - 1
        index1 = 2*z1 - 1
        index2 = 4096*z0 + 128*z1 + z2 - 2112
        index3 = 2*z1
        index4 = 4096*z0 + 128*z1 + z2 - 2048
        index5 = 64*z0 + 2*z1 - 32
        index6 = 64*z0 + 2*z1 - 33
        index7 = 2*z1 + 1
        index8 = 4096*z0 + 128*z1 + z2 - 1984
        index9 = 64*z0 + 2*z1 - 31
        index10 = 2*z0
        index11 = 4096*z0 + 128*z1 + z2 - 64
        index12 = 64*z0 + 2*z1 - 1
        index13 = 4096*z0 + 128*z1 + z2
        index14 = 64*z0 + 2*z1
        index15 = 4096*z0 + 128*z1 + z2 + 64
        index16 = 64*z0 + 2*z1 + 1
        index17 = 2*z0 + 1
        index18 = 4096*z0 + 128*z1 + z2 + 1984
        index19 = 64*z0 + 2*z1 + 31
        index20 = 4096*z0 + 128*z1 + z2 + 2048
        index21 = 64*z0 + 2*z1 + 32
        index22 = 4096*z0 + 128*z1 + z2 + 2112
        index23 = 64*z0 + 2*z1 + 33
        index24 = 1024*z0 + 64*z1 + z2
        def body(self, ops):
            get_index = self.get_index('index0')
            index_expr = ops.index_expr(get_index, torch.int64)
            constant = ops.constant(0, torch.int64)
            ge = ops.ge(index_expr, constant)
            get_index_1 = self.get_index('index0')
            index_expr_1 = ops.index_expr(get_index_1, torch.int64)
            constant_1 = ops.constant(32, torch.int64)
            lt = ops.lt(index_expr_1, constant_1)
            and_ = ops.and_(ge, lt)
            get_index_2 = self.get_index('index1')
            index_expr_2 = ops.index_expr(get_index_2, torch.int64)
            constant_2 = ops.constant(0, torch.int64)
            ge_1 = ops.ge(index_expr_2, constant_2)
            get_index_3 = self.get_index('index1')
            index_expr_3 = ops.index_expr(get_index_3, torch.int64)
            constant_3 = ops.constant(32, torch.int64)
            lt_1 = ops.lt(index_expr_3, constant_3)
            and__1 = ops.and_(ge_1, lt_1)
            and__2 = ops.and_(and_, and__1)
            masked_subblock1 = self.masked_subblock1(and__2, -inf)
            get_index_4 = self.get_index('index0')
            index_expr_4 = ops.index_expr(get_index_4, torch.int64)
            constant_4 = ops.constant(0, torch.int64)
            ge_2 = ops.ge(index_expr_4, constant_4)
            get_index_5 = self.get_index('index0')
            index_expr_5 = ops.index_expr(get_index_5, torch.int64)
            constant_5 = ops.constant(32, torch.int64)
            lt_2 = ops.lt(index_expr_5, constant_5)
            and__3 = ops.and_(ge_2, lt_2)
            get_index_6 = self.get_index('index3')
            index_expr_6 = ops.index_expr(get_index_6, torch.int64)
            constant_6 = ops.constant(0, torch.int64)
            ge_3 = ops.ge(index_expr_6, constant_6)
            get_index_7 = self.get_index('index3')
            index_expr_7 = ops.index_expr(get_index_7, torch.int64)
            constant_7 = ops.constant(32, torch.int64)
            lt_3 = ops.lt(index_expr_7, constant_7)
            and__4 = ops.and_(ge_3, lt_3)
            and__5 = ops.and_(and__3, and__4)
            masked_subblock2 = self.masked_subblock2(and__5, -inf)
            gt = ops.gt(masked_subblock2, masked_subblock1)
            get_index_8 = self.get_index('index5')
            index_expr_8 = ops.index_expr(get_index_8, torch.int64)
            get_index_9 = self.get_index('index6')
            index_expr_9 = ops.index_expr(get_index_9, torch.int64)
            where = ops.where(gt, index_expr_8, index_expr_9)
            maximum = ops.maximum(masked_subblock2, masked_subblock1)
            get_index_10 = self.get_index('index0')
            index_expr_10 = ops.index_expr(get_index_10, torch.int64)
            constant_8 = ops.constant(0, torch.int64)
            ge_4 = ops.ge(index_expr_10, constant_8)
            get_index_11 = self.get_index('index0')
            index_expr_11 = ops.index_expr(get_index_11, torch.int64)
            constant_9 = ops.constant(32, torch.int64)
            lt_4 = ops.lt(index_expr_11, constant_9)
            and__6 = ops.and_(ge_4, lt_4)
            get_index_12 = self.get_index('index7')
            index_expr_12 = ops.index_expr(get_index_12, torch.int64)
            constant_10 = ops.constant(0, torch.int64)
            ge_5 = ops.ge(index_expr_12, constant_10)
            get_index_13 = self.get_index('index7')
            index_expr_13 = ops.index_expr(get_index_13, torch.int64)
            constant_11 = ops.constant(32, torch.int64)
            lt_5 = ops.lt(index_expr_13, constant_11)
            and__7 = ops.and_(ge_5, lt_5)
            and__8 = ops.and_(and__6, and__7)
            masked_subblock3 = self.masked_subblock3(and__8, -inf)
            gt_1 = ops.gt(masked_subblock3, maximum)
            get_index_14 = self.get_index('index9')
            index_expr_14 = ops.index_expr(get_index_14, torch.int64)
            where_1 = ops.where(gt_1, index_expr_14, where)
            maximum_1 = ops.maximum(masked_subblock3, maximum)
            get_index_15 = self.get_index('index10')
            index_expr_15 = ops.index_expr(get_index_15, torch.int64)
            constant_12 = ops.constant(0, torch.int64)
            ge_6 = ops.ge(index_expr_15, constant_12)
            get_index_16 = self.get_index('index10')
            index_expr_16 = ops.index_expr(get_index_16, torch.int64)
            constant_13 = ops.constant(32, torch.int64)
            lt_6 = ops.lt(index_expr_16, constant_13)
            and__9 = ops.and_(ge_6, lt_6)
            get_index_17 = self.get_index('index1')
            index_expr_17 = ops.index_expr(get_index_17, torch.int64)
            constant_14 = ops.constant(0, torch.int64)
            ge_7 = ops.ge(index_expr_17, constant_14)
            get_index_18 = self.get_index('index1')
            index_expr_18 = ops.index_expr(get_index_18, torch.int64)
            constant_15 = ops.constant(32, torch.int64)
            lt_7 = ops.lt(index_expr_18, constant_15)
            and__10 = ops.and_(ge_7, lt_7)
            and__11 = ops.and_(and__9, and__10)
            masked_subblock4 = self.masked_subblock4(and__11, -inf)
            gt_2 = ops.gt(masked_subblock4, maximum_1)
            get_index_19 = self.get_index('index12')
            index_expr_19 = ops.index_expr(get_index_19, torch.int64)
            where_2 = ops.where(gt_2, index_expr_19, where_1)
            maximum_2 = ops.maximum(masked_subblock4, maximum_1)
            get_index_20 = self.get_index('index10')
            index_expr_20 = ops.index_expr(get_index_20, torch.int64)
            constant_16 = ops.constant(0, torch.int64)
            ge_8 = ops.ge(index_expr_20, constant_16)
            get_index_21 = self.get_index('index10')
            index_expr_21 = ops.index_expr(get_index_21, torch.int64)
            constant_17 = ops.constant(32, torch.int64)
            lt_8 = ops.lt(index_expr_21, constant_17)
            and__12 = ops.and_(ge_8, lt_8)
            get_index_22 = self.get_index('index3')
            index_expr_22 = ops.index_expr(get_index_22, torch.int64)
            constant_18 = ops.constant(0, torch.int64)
            ge_9 = ops.ge(index_expr_22, constant_18)
            get_index_23 = self.get_index('index3')
            index_expr_23 = ops.index_expr(get_index_23, torch.int64)
            constant_19 = ops.constant(32, torch.int64)
            lt_9 = ops.lt(index_expr_23, constant_19)
            and__13 = ops.and_(ge_9, lt_9)
            and__14 = ops.and_(and__12, and__13)
            masked_subblock5 = self.masked_subblock5(and__14, -inf)
            gt_3 = ops.gt(masked_subblock5, maximum_2)
            get_index_24 = self.get_index('index14')
            index_expr_24 = ops.index_expr(get_index_24, torch.int64)
            where_3 = ops.where(gt_3, index_expr_24, where_2)
            maximum_3 = ops.maximum(masked_subblock5, maximum_2)
            get_index_25 = self.get_index('index10')
            index_expr_25 = ops.index_expr(get_index_25, torch.int64)
            constant_20 = ops.constant(0, torch.int64)
            ge_10 = ops.ge(index_expr_25, constant_20)
            get_index_26 = self.get_index('index10')
            index_expr_26 = ops.index_expr(get_index_26, torch.int64)
            constant_21 = ops.constant(32, torch.int64)
            lt_10 = ops.lt(index_expr_26, constant_21)
            and__15 = ops.and_(ge_10, lt_10)
            get_index_27 = self.get_index('index7')
            index_expr_27 = ops.index_expr(get_index_27, torch.int64)
            constant_22 = ops.constant(0, torch.int64)
            ge_11 = ops.ge(index_expr_27, constant_22)
            get_index_28 = self.get_index('index7')
            index_expr_28 = ops.index_expr(get_index_28, torch.int64)
            constant_23 = ops.constant(32, torch.int64)
            lt_11 = ops.lt(index_expr_28, constant_23)
            and__16 = ops.and_(ge_11, lt_11)
            and__17 = ops.and_(and__15, and__16)
            masked_subblock6 = self.masked_subblock6(and__17, -inf)
            gt_4 = ops.gt(masked_subblock6, maximum_3)
            get_index_29 = self.get_index('index16')
            index_expr_29 = ops.index_expr(get_index_29, torch.int64)
            where_4 = ops.where(gt_4, index_expr_29, where_3)
            maximum_4 = ops.maximum(masked_subblock6, maximum_3)
            get_index_30 = self.get_index('index17')
            index_expr_30 = ops.index_expr(get_index_30, torch.int64)
            constant_24 = ops.constant(0, torch.int64)
            ge_12 = ops.ge(index_expr_30, constant_24)
            get_index_31 = self.get_index('index17')
            index_expr_31 = ops.index_expr(get_index_31, torch.int64)
            constant_25 = ops.constant(32, torch.int64)
            lt_12 = ops.lt(index_expr_31, constant_25)
            and__18 = ops.and_(ge_12, lt_12)
            get_index_32 = self.get_index('index1')
            index_expr_32 = ops.index_expr(get_index_32, torch.int64)
            constant_26 = ops.constant(0, torch.int64)
            ge_13 = ops.ge(index_expr_32, constant_26)
            get_index_33 = self.get_index('index1')
            index_expr_33 = ops.index_expr(get_index_33, torch.int64)
            constant_27 = ops.constant(32, torch.int64)
            lt_13 = ops.lt(index_expr_33, constant_27)
            and__19 = ops.and_(ge_13, lt_13)
            and__20 = ops.and_(and__18, and__19)
            masked_subblock7 = self.masked_subblock7(and__20, -inf)
            gt_5 = ops.gt(masked_subblock7, maximum_4)
            get_index_34 = self.get_index('index19')
            index_expr_34 = ops.index_expr(get_index_34, torch.int64)
            where_5 = ops.where(gt_5, index_expr_34, where_4)
            maximum_5 = ops.maximum(masked_subblock7, maximum_4)
            get_index_35 = self.get_index('index17')
            index_expr_35 = ops.index_expr(get_index_35, torch.int64)
            constant_28 = ops.constant(0, torch.int64)
            ge_14 = ops.ge(index_expr_35, constant_28)
            get_index_36 = self.get_index('index17')
            index_expr_36 = ops.index_expr(get_index_36, torch.int64)
            constant_29 = ops.constant(32, torch.int64)
            lt_14 = ops.lt(index_expr_36, constant_29)
            and__21 = ops.and_(ge_14, lt_14)
            get_index_37 = self.get_index('index3')
            index_expr_37 = ops.index_expr(get_index_37, torch.int64)
            constant_30 = ops.constant(0, torch.int64)
            ge_15 = ops.ge(index_expr_37, constant_30)
            get_index_38 = self.get_index('index3')
            index_expr_38 = ops.index_expr(get_index_38, torch.int64)
            constant_31 = ops.constant(32, torch.int64)
            lt_15 = ops.lt(index_expr_38, constant_31)
            and__22 = ops.and_(ge_15, lt_15)
            and__23 = ops.and_(and__21, and__22)
            masked_subblock8 = self.masked_subblock8(and__23, -inf)
            gt_6 = ops.gt(masked_subblock8, maximum_5)
            get_index_39 = self.get_index('index21')
            index_expr_39 = ops.index_expr(get_index_39, torch.int64)
            where_6 = ops.where(gt_6, index_expr_39, where_5)
            maximum_6 = ops.maximum(masked_subblock8, maximum_5)
            get_index_40 = self.get_index('index17')
            index_expr_40 = ops.index_expr(get_index_40, torch.int64)
            constant_32 = ops.constant(0, torch.int64)
            ge_16 = ops.ge(index_expr_40, constant_32)
            get_index_41 = self.get_index('index17')
            index_expr_41 = ops.index_expr(get_index_41, torch.int64)
            constant_33 = ops.constant(32, torch.int64)
            lt_16 = ops.lt(index_expr_41, constant_33)
            and__24 = ops.and_(ge_16, lt_16)
            get_index_42 = self.get_index('index7')
            index_expr_42 = ops.index_expr(get_index_42, torch.int64)
            constant_34 = ops.constant(0, torch.int64)
            ge_17 = ops.ge(index_expr_42, constant_34)
            get_index_43 = self.get_index('index7')
            index_expr_43 = ops.index_expr(get_index_43, torch.int64)
            constant_35 = ops.constant(32, torch.int64)
            lt_17 = ops.lt(index_expr_43, constant_35)
            and__25 = ops.and_(ge_17, lt_17)
            and__26 = ops.and_(and__24, and__25)
            masked_subblock9 = self.masked_subblock9(and__26, -inf)
            gt_7 = ops.gt(masked_subblock9, maximum_6)
            get_index_44 = self.get_index('index23')
            index_expr_44 = ops.index_expr(get_index_44, torch.int64)
            where_7 = ops.where(gt_7, index_expr_44, where_6)
            maximum_7 = ops.maximum(masked_subblock9, maximum_6)
            get_index_45 = self.get_index('index24')
            store = ops.store('buf27', get_index_45, where_7, None)
            return store
        def masked_subblock1(self, ops):
            get_index = self.get_index('index2')
            load = ops.load('buf25', get_index)
            return load
        def masked_subblock2(self, ops):
            get_index = self.get_index('index4')
            load = ops.load('buf25', get_index)
            return load
        def masked_subblock3(self, ops):
            get_index = self.get_index('index8')
            load = ops.load('buf25', get_index)
            return load
        def masked_subblock4(self, ops):
            get_index = self.get_index('index11')
            load = ops.load('buf25', get_index)
            return load
        def masked_subblock5(self, ops):
            get_index = self.get_index('index13')
            load = ops.load('buf25', get_index)
            return load
        def masked_subblock6(self, ops):
            get_index = self.get_index('index15')
            load = ops.load('buf25', get_index)
            return load
        def masked_subblock7(self, ops):
            get_index = self.get_index('index18')
            load = ops.load('buf25', get_index)
            return load
        def masked_subblock8(self, ops):
            get_index = self.get_index('index20')
            load = ops.load('buf25', get_index)
            return load
        def masked_subblock9(self, ops):
            get_index = self.get_index('index22')
            load = ops.load('buf25', get_index)
            return load


buf28: ExternKernelSchedulerNode(ExternKernelAlloc)
buf28.writes = [StarDep(name='buf28')]
buf28.unmet_dependencies = [StarDep(name='buf26')]
buf28.met_dependencies = [StarDep(name='primals_4')]
buf28.users = [NodeUser(node=SchedulerNode(name='buf29'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf30'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf31'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf35'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf28.node.kernel = extern_kernels.convolution


buf29_buf30: FusedSchedulerNode(NoneType)
buf29_buf30.writes = [MemoryDep('buf29', c0, {c0: 64}), MemoryDep('buf30', c0, {c0: 64})]
buf29_buf30.unmet_dependencies = [MemoryDep('buf28', c0 + 64*c1, {c0: 64, c1: 256})]
buf29_buf30.met_dependencies = []
buf29_buf30.users = None
    buf29_buf30.snodes[0] =
    buf29: SchedulerNode(ComputedBuffer)
    buf29.writes = [MemoryDep('buf29', c0, {c0: 64})]
    buf29.unmet_dependencies = [MemoryDep('buf28', c0 + 64*c1, {c0: 64, c1: 256})]
    buf29.met_dependencies = []
    buf29.users = [NodeUser(node=SchedulerNode(name='buf33'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf35'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf29.group.device = cpu
    buf29.group.iteration = ((64,), (256,))
    buf29.sizes = ([64], [256])
    class buf29_loop_body:
        var_ranges = {z0: 64, z1: 256}
        index0 = z0 + 64*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf28', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf29', get_index_1, getitem)
            return store_reduction
    buf29_buf30.snodes[1] =
    buf30: SchedulerNode(ComputedBuffer)
    buf30.writes = [MemoryDep('buf30', c0, {c0: 64})]
    buf30.unmet_dependencies = [MemoryDep('buf28', c0 + 64*c1, {c0: 64, c1: 256})]
    buf30.met_dependencies = []
    buf30.users = [NodeUser(node=SchedulerNode(name='buf32'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf34'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf35'), can_inplace=False, is_weak=False)]
    buf30.group.device = cpu
    buf30.group.iteration = ((64,), (256,))
    buf30.sizes = ([64], [256])
    class buf30_loop_body:
        var_ranges = {z0: 64, z1: 256}
        index0 = z0 + 64*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf28', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf30', get_index_1, getitem_1)
            return store_reduction


buf32_buf34: FusedSchedulerNode(NoneType)
buf32_buf34.writes = [MemoryDep('buf32', c0, {c0: 64}), MemoryDep('buf34', c0, {c0: 64})]
buf32_buf34.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 64})]
buf32_buf34.met_dependencies = [MemoryDep('primals_166', c0, {c0: 64})]
buf32_buf34.users = None
    buf32_buf34.snodes[0] =
    buf32: SchedulerNode(ComputedBuffer)
    buf32.writes = [MemoryDep('buf32', c0, {c0: 64})]
    buf32.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 64})]
    buf32.met_dependencies = []
    buf32.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf32.group.device = cpu
    buf32.group.iteration = ((64,), ())
    buf32.sizes = ([64], [])
    class buf32_loop_body:
        var_ranges = {z0: 64}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf30', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf32', get_index_1, rsqrt, None)
            return store
    buf32_buf34.snodes[1] =
    buf34: SchedulerNode(ComputedBuffer)
    buf34.writes = [MemoryDep('buf34', c0, {c0: 64})]
    buf34.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 64})]
    buf34.met_dependencies = [MemoryDep('primals_166', c0, {c0: 64})]
    buf34.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf34.group.device = cpu
    buf34.group.iteration = ((64,), ())
    buf34.sizes = ([64], [])
    class buf34_loop_body:
        var_ranges = {z0: 64}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf30', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.003921568627451, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_166', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf34', get_index_2, add, None)
            return store


buf33: SchedulerNode(ComputedBuffer)
buf33.writes = [MemoryDep('buf33', c0, {c0: 64})]
buf33.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 64})]
buf33.met_dependencies = [MemoryDep('primals_165', c0, {c0: 64})]
buf33.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf33.group.device = cpu
buf33.group.iteration = ((64,), ())
buf33.sizes = ([64], [])
class buf33_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_165', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf33', get_index_2, add, None)
        return store


buf35: SchedulerNode(ComputedBuffer)
buf35.writes = [MemoryDep('buf35', c0, {c0: 16384})]
buf35.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 16384}),
        MemoryDep('buf29', c1, {c0: 256, c1: 64}),
        MemoryDep('buf30', c1, {c0: 256, c1: 64})]
buf35.met_dependencies = 
    [   MemoryDep('primals_5', c1, {c0: 256, c1: 64}),
        MemoryDep('primals_6', c1, {c0: 256, c1: 64})]
buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf36'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf35.group.device = cpu
buf35.group.iteration = ((256, 64), ())
buf35.sizes = ([256, 64], [])
class buf35_loop_body:
    var_ranges = {z0: 256, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf29', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf30', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_5', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_6', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf35', get_index_5, relu, None)
        return store


buf36: ExternKernelSchedulerNode(ExternKernelAlloc)
buf36.writes = [StarDep(name='buf36')]
buf36.unmet_dependencies = [StarDep(name='buf1'), StarDep(name='buf35')]
buf36.met_dependencies = []
buf36.users = [NodeUser(node=SchedulerNode(name='buf37'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf38'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf39'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf43'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf36.node.kernel = extern_kernels.convolution


buf37_buf38: FusedSchedulerNode(NoneType)
buf37_buf38.writes = [MemoryDep('buf37', c0, {c0: 64}), MemoryDep('buf38', c0, {c0: 64})]
buf37_buf38.unmet_dependencies = [MemoryDep('buf36', c0 + 64*c1, {c0: 64, c1: 256})]
buf37_buf38.met_dependencies = []
buf37_buf38.users = None
    buf37_buf38.snodes[0] =
    buf37: SchedulerNode(ComputedBuffer)
    buf37.writes = [MemoryDep('buf37', c0, {c0: 64})]
    buf37.unmet_dependencies = [MemoryDep('buf36', c0 + 64*c1, {c0: 64, c1: 256})]
    buf37.met_dependencies = []
    buf37.users = [NodeUser(node=SchedulerNode(name='buf41'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf43'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf37.group.device = cpu
    buf37.group.iteration = ((64,), (256,))
    buf37.sizes = ([64], [256])
    class buf37_loop_body:
        var_ranges = {z0: 64, z1: 256}
        index0 = z0 + 64*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf36', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf37', get_index_1, getitem)
            return store_reduction
    buf37_buf38.snodes[1] =
    buf38: SchedulerNode(ComputedBuffer)
    buf38.writes = [MemoryDep('buf38', c0, {c0: 64})]
    buf38.unmet_dependencies = [MemoryDep('buf36', c0 + 64*c1, {c0: 64, c1: 256})]
    buf38.met_dependencies = []
    buf38.users = [NodeUser(node=SchedulerNode(name='buf40'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf42'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf43'), can_inplace=False, is_weak=False)]
    buf38.group.device = cpu
    buf38.group.iteration = ((64,), (256,))
    buf38.sizes = ([64], [256])
    class buf38_loop_body:
        var_ranges = {z0: 64, z1: 256}
        index0 = z0 + 64*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf36', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf38', get_index_1, getitem_1)
            return store_reduction


buf40_buf42: FusedSchedulerNode(NoneType)
buf40_buf42.writes = [MemoryDep('buf40', c0, {c0: 64}), MemoryDep('buf42', c0, {c0: 64})]
buf40_buf42.unmet_dependencies = [MemoryDep('buf38', c0, {c0: 64})]
buf40_buf42.met_dependencies = [MemoryDep('primals_169', c0, {c0: 64})]
buf40_buf42.users = None
    buf40_buf42.snodes[0] =
    buf40: SchedulerNode(ComputedBuffer)
    buf40.writes = [MemoryDep('buf40', c0, {c0: 64})]
    buf40.unmet_dependencies = [MemoryDep('buf38', c0, {c0: 64})]
    buf40.met_dependencies = []
    buf40.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf40.group.device = cpu
    buf40.group.iteration = ((64,), ())
    buf40.sizes = ([64], [])
    class buf40_loop_body:
        var_ranges = {z0: 64}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf38', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf40', get_index_1, rsqrt, None)
            return store
    buf40_buf42.snodes[1] =
    buf42: SchedulerNode(ComputedBuffer)
    buf42.writes = [MemoryDep('buf42', c0, {c0: 64})]
    buf42.unmet_dependencies = [MemoryDep('buf38', c0, {c0: 64})]
    buf42.met_dependencies = [MemoryDep('primals_169', c0, {c0: 64})]
    buf42.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf42.group.device = cpu
    buf42.group.iteration = ((64,), ())
    buf42.sizes = ([64], [])
    class buf42_loop_body:
        var_ranges = {z0: 64}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf38', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.003921568627451, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_169', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf42', get_index_2, add, None)
            return store


buf41: SchedulerNode(ComputedBuffer)
buf41.writes = [MemoryDep('buf41', c0, {c0: 64})]
buf41.unmet_dependencies = [MemoryDep('buf37', c0, {c0: 64})]
buf41.met_dependencies = [MemoryDep('primals_168', c0, {c0: 64})]
buf41.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf41.group.device = cpu
buf41.group.iteration = ((64,), ())
buf41.sizes = ([64], [])
class buf41_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_168', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf41', get_index_2, add, None)
        return store


buf43: SchedulerNode(ComputedBuffer)
buf43.writes = [MemoryDep('buf43', c0, {c0: 16384})]
buf43.unmet_dependencies = 
    [   MemoryDep('buf36', c0, {c0: 16384}),
        MemoryDep('buf37', c1, {c0: 256, c1: 64}),
        MemoryDep('buf38', c1, {c0: 256, c1: 64})]
buf43.met_dependencies = 
    [   MemoryDep('primals_8', c1, {c0: 256, c1: 64}),
        MemoryDep('primals_9', c1, {c0: 256, c1: 64})]
buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf44'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf43.group.device = cpu
buf43.group.iteration = ((256, 64), ())
buf43.sizes = ([256, 64], [])
class buf43_loop_body:
    var_ranges = {z0: 256, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf37', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf38', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_8', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_9', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf43', get_index_5, relu, None)
        return store


buf44: ExternKernelSchedulerNode(ExternKernelAlloc)
buf44.writes = [StarDep(name='buf44')]
buf44.unmet_dependencies = [StarDep(name='buf43')]
buf44.met_dependencies = [StarDep(name='primals_10')]
buf44.users = [NodeUser(node=SchedulerNode(name='buf45'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf46'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf47'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf58'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf44.node.kernel = extern_kernels.convolution


buf45_buf46: FusedSchedulerNode(NoneType)
buf45_buf46.writes = [MemoryDep('buf45', c0, {c0: 256}), MemoryDep('buf46', c0, {c0: 256})]
buf45_buf46.unmet_dependencies = [MemoryDep('buf44', c0 + 256*c1, {c0: 256, c1: 256})]
buf45_buf46.met_dependencies = []
buf45_buf46.users = None
    buf45_buf46.snodes[0] =
    buf45: SchedulerNode(ComputedBuffer)
    buf45.writes = [MemoryDep('buf45', c0, {c0: 256})]
    buf45.unmet_dependencies = [MemoryDep('buf44', c0 + 256*c1, {c0: 256, c1: 256})]
    buf45.met_dependencies = []
    buf45.users = [NodeUser(node=SchedulerNode(name='buf49'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf58'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf45.group.device = cpu
    buf45.group.iteration = ((256,), (256,))
    buf45.sizes = ([256], [256])
    class buf45_loop_body:
        var_ranges = {z0: 256, z1: 256}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf44', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf45', get_index_1, getitem)
            return store_reduction
    buf45_buf46.snodes[1] =
    buf46: SchedulerNode(ComputedBuffer)
    buf46.writes = [MemoryDep('buf46', c0, {c0: 256})]
    buf46.unmet_dependencies = [MemoryDep('buf44', c0 + 256*c1, {c0: 256, c1: 256})]
    buf46.met_dependencies = []
    buf46.users = [NodeUser(node=SchedulerNode(name='buf48'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf50'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf58'), can_inplace=False, is_weak=False)]
    buf46.group.device = cpu
    buf46.group.iteration = ((256,), (256,))
    buf46.sizes = ([256], [256])
    class buf46_loop_body:
        var_ranges = {z0: 256, z1: 256}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf44', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf46', get_index_1, getitem_1)
            return store_reduction


buf48_buf50: FusedSchedulerNode(NoneType)
buf48_buf50.writes = [MemoryDep('buf48', c0, {c0: 256}), MemoryDep('buf50', c0, {c0: 256})]
buf48_buf50.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 256})]
buf48_buf50.met_dependencies = [MemoryDep('primals_172', c0, {c0: 256})]
buf48_buf50.users = None
    buf48_buf50.snodes[0] =
    buf48: SchedulerNode(ComputedBuffer)
    buf48.writes = [MemoryDep('buf48', c0, {c0: 256})]
    buf48.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 256})]
    buf48.met_dependencies = []
    buf48.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf48.group.device = cpu
    buf48.group.iteration = ((256,), ())
    buf48.sizes = ([256], [])
    class buf48_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf46', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf48', get_index_1, rsqrt, None)
            return store
    buf48_buf50.snodes[1] =
    buf50: SchedulerNode(ComputedBuffer)
    buf50.writes = [MemoryDep('buf50', c0, {c0: 256})]
    buf50.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 256})]
    buf50.met_dependencies = [MemoryDep('primals_172', c0, {c0: 256})]
    buf50.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf50.group.device = cpu
    buf50.group.iteration = ((256,), ())
    buf50.sizes = ([256], [])
    class buf50_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf46', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.003921568627451, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_172', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf50', get_index_2, add, None)
            return store


buf49: SchedulerNode(ComputedBuffer)
buf49.writes = [MemoryDep('buf49', c0, {c0: 256})]
buf49.unmet_dependencies = [MemoryDep('buf45', c0, {c0: 256})]
buf49.met_dependencies = [MemoryDep('primals_171', c0, {c0: 256})]
buf49.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf49.group.device = cpu
buf49.group.iteration = ((256,), ())
buf49.sizes = ([256], [])
class buf49_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_171', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf49', get_index_2, add, None)
        return store


buf51: ExternKernelSchedulerNode(ExternKernelAlloc)
buf51.writes = [StarDep(name='buf51')]
buf51.unmet_dependencies = [StarDep(name='buf26')]
buf51.met_dependencies = [StarDep(name='primals_13')]
buf51.users = [NodeUser(node=SchedulerNode(name='buf52'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf53'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf54'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf58'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf51.node.kernel = extern_kernels.convolution


buf52_buf53: FusedSchedulerNode(NoneType)
buf52_buf53.writes = [MemoryDep('buf52', c0, {c0: 256}), MemoryDep('buf53', c0, {c0: 256})]
buf52_buf53.unmet_dependencies = [MemoryDep('buf51', c0 + 256*c1, {c0: 256, c1: 256})]
buf52_buf53.met_dependencies = []
buf52_buf53.users = None
    buf52_buf53.snodes[0] =
    buf52: SchedulerNode(ComputedBuffer)
    buf52.writes = [MemoryDep('buf52', c0, {c0: 256})]
    buf52.unmet_dependencies = [MemoryDep('buf51', c0 + 256*c1, {c0: 256, c1: 256})]
    buf52.met_dependencies = []
    buf52.users = [NodeUser(node=SchedulerNode(name='buf56'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf58'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf52.group.device = cpu
    buf52.group.iteration = ((256,), (256,))
    buf52.sizes = ([256], [256])
    class buf52_loop_body:
        var_ranges = {z0: 256, z1: 256}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf51', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf52', get_index_1, getitem)
            return store_reduction
    buf52_buf53.snodes[1] =
    buf53: SchedulerNode(ComputedBuffer)
    buf53.writes = [MemoryDep('buf53', c0, {c0: 256})]
    buf53.unmet_dependencies = [MemoryDep('buf51', c0 + 256*c1, {c0: 256, c1: 256})]
    buf53.met_dependencies = []
    buf53.users = [NodeUser(node=SchedulerNode(name='buf55'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf57'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf58'), can_inplace=False, is_weak=False)]
    buf53.group.device = cpu
    buf53.group.iteration = ((256,), (256,))
    buf53.sizes = ([256], [256])
    class buf53_loop_body:
        var_ranges = {z0: 256, z1: 256}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf51', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf53', get_index_1, getitem_1)
            return store_reduction


buf55_buf57: FusedSchedulerNode(NoneType)
buf55_buf57.writes = [MemoryDep('buf55', c0, {c0: 256}), MemoryDep('buf57', c0, {c0: 256})]
buf55_buf57.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 256})]
buf55_buf57.met_dependencies = [MemoryDep('primals_175', c0, {c0: 256})]
buf55_buf57.users = None
    buf55_buf57.snodes[0] =
    buf55: SchedulerNode(ComputedBuffer)
    buf55.writes = [MemoryDep('buf55', c0, {c0: 256})]
    buf55.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 256})]
    buf55.met_dependencies = []
    buf55.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf55.group.device = cpu
    buf55.group.iteration = ((256,), ())
    buf55.sizes = ([256], [])
    class buf55_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf53', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf55', get_index_1, rsqrt, None)
            return store
    buf55_buf57.snodes[1] =
    buf57: SchedulerNode(ComputedBuffer)
    buf57.writes = [MemoryDep('buf57', c0, {c0: 256})]
    buf57.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 256})]
    buf57.met_dependencies = [MemoryDep('primals_175', c0, {c0: 256})]
    buf57.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf57.group.device = cpu
    buf57.group.iteration = ((256,), ())
    buf57.sizes = ([256], [])
    class buf57_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf53', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.003921568627451, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_175', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf57', get_index_2, add, None)
            return store


buf56: SchedulerNode(ComputedBuffer)
buf56.writes = [MemoryDep('buf56', c0, {c0: 256})]
buf56.unmet_dependencies = [MemoryDep('buf52', c0, {c0: 256})]
buf56.met_dependencies = [MemoryDep('primals_174', c0, {c0: 256})]
buf56.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf56.group.device = cpu
buf56.group.iteration = ((256,), ())
buf56.sizes = ([256], [])
class buf56_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_174', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf56', get_index_2, add, None)
        return store


buf58: SchedulerNode(ComputedBuffer)
buf58.writes = [MemoryDep('buf58', c0, {c0: 65536})]
buf58.unmet_dependencies = 
    [   MemoryDep('buf44', c0, {c0: 65536}),
        MemoryDep('buf45', c1, {c0: 256, c1: 256}),
        MemoryDep('buf46', c1, {c0: 256, c1: 256}),
        MemoryDep('buf51', c0, {c0: 65536}),
        MemoryDep('buf52', c1, {c0: 256, c1: 256}),
        MemoryDep('buf53', c1, {c0: 256, c1: 256})]
buf58.met_dependencies = 
    [   MemoryDep('primals_11', c1, {c0: 256, c1: 256}),
        MemoryDep('primals_12', c1, {c0: 256, c1: 256}),
        MemoryDep('primals_14', c1, {c0: 256, c1: 256}),
        MemoryDep('primals_15', c1, {c0: 256, c1: 256})]
buf58.users = [NodeUser(node=SchedulerNode(name='buf59'), can_inplace=True, is_weak=False)]
buf58.group.device = cpu
buf58.group.iteration = ((256, 256), ())
buf58.sizes = ([256, 256], [])
class buf58_loop_body:
    var_ranges = {z0: 256, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf45', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf46', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_11', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_12', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf51', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf52', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf53', get_index_7)
        constant_2 = ops.constant(256.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_14', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_15', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf58', get_index_10, add_4, None)
        return store


buf59: SchedulerNode(ComputedBuffer)
buf59.writes = [MemoryDep('buf59', c0, {c0: 65536})]
buf59.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 65536})]
buf59.met_dependencies = []
buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf60'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf83'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf59.group.device = cpu
buf59.group.iteration = ((65536,), ())
buf59.sizes = ([65536], [])
class buf59_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf59', get_index_1, relu, None)
        return store


buf60: ExternKernelSchedulerNode(ExternKernelAlloc)
buf60.writes = [StarDep(name='buf60')]
buf60.unmet_dependencies = [StarDep(name='buf59')]
buf60.met_dependencies = [StarDep(name='primals_16')]
buf60.users = [NodeUser(node=SchedulerNode(name='buf61'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf62'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf63'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf67'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf60.node.kernel = extern_kernels.convolution


buf61_buf62: FusedSchedulerNode(NoneType)
buf61_buf62.writes = [MemoryDep('buf61', c0, {c0: 64}), MemoryDep('buf62', c0, {c0: 64})]
buf61_buf62.unmet_dependencies = [MemoryDep('buf60', c0 + 64*c1, {c0: 64, c1: 256})]
buf61_buf62.met_dependencies = []
buf61_buf62.users = None
    buf61_buf62.snodes[0] =
    buf61: SchedulerNode(ComputedBuffer)
    buf61.writes = [MemoryDep('buf61', c0, {c0: 64})]
    buf61.unmet_dependencies = [MemoryDep('buf60', c0 + 64*c1, {c0: 64, c1: 256})]
    buf61.met_dependencies = []
    buf61.users = [NodeUser(node=SchedulerNode(name='buf65'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf67'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf61.group.device = cpu
    buf61.group.iteration = ((64,), (256,))
    buf61.sizes = ([64], [256])
    class buf61_loop_body:
        var_ranges = {z0: 64, z1: 256}
        index0 = z0 + 64*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf60', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf61', get_index_1, getitem)
            return store_reduction
    buf61_buf62.snodes[1] =
    buf62: SchedulerNode(ComputedBuffer)
    buf62.writes = [MemoryDep('buf62', c0, {c0: 64})]
    buf62.unmet_dependencies = [MemoryDep('buf60', c0 + 64*c1, {c0: 64, c1: 256})]
    buf62.met_dependencies = []
    buf62.users = [NodeUser(node=SchedulerNode(name='buf64'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf66'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf67'), can_inplace=False, is_weak=False)]
    buf62.group.device = cpu
    buf62.group.iteration = ((64,), (256,))
    buf62.sizes = ([64], [256])
    class buf62_loop_body:
        var_ranges = {z0: 64, z1: 256}
        index0 = z0 + 64*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf60', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf62', get_index_1, getitem_1)
            return store_reduction


buf64_buf66: FusedSchedulerNode(NoneType)
buf64_buf66.writes = [MemoryDep('buf64', c0, {c0: 64}), MemoryDep('buf66', c0, {c0: 64})]
buf64_buf66.unmet_dependencies = [MemoryDep('buf62', c0, {c0: 64})]
buf64_buf66.met_dependencies = [MemoryDep('primals_178', c0, {c0: 64})]
buf64_buf66.users = None
    buf64_buf66.snodes[0] =
    buf64: SchedulerNode(ComputedBuffer)
    buf64.writes = [MemoryDep('buf64', c0, {c0: 64})]
    buf64.unmet_dependencies = [MemoryDep('buf62', c0, {c0: 64})]
    buf64.met_dependencies = []
    buf64.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf64.group.device = cpu
    buf64.group.iteration = ((64,), ())
    buf64.sizes = ([64], [])
    class buf64_loop_body:
        var_ranges = {z0: 64}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf62', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf64', get_index_1, rsqrt, None)
            return store
    buf64_buf66.snodes[1] =
    buf66: SchedulerNode(ComputedBuffer)
    buf66.writes = [MemoryDep('buf66', c0, {c0: 64})]
    buf66.unmet_dependencies = [MemoryDep('buf62', c0, {c0: 64})]
    buf66.met_dependencies = [MemoryDep('primals_178', c0, {c0: 64})]
    buf66.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf66.group.device = cpu
    buf66.group.iteration = ((64,), ())
    buf66.sizes = ([64], [])
    class buf66_loop_body:
        var_ranges = {z0: 64}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf62', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.003921568627451, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_178', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf66', get_index_2, add, None)
            return store


buf65: SchedulerNode(ComputedBuffer)
buf65.writes = [MemoryDep('buf65', c0, {c0: 64})]
buf65.unmet_dependencies = [MemoryDep('buf61', c0, {c0: 64})]
buf65.met_dependencies = [MemoryDep('primals_177', c0, {c0: 64})]
buf65.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf65.group.device = cpu
buf65.group.iteration = ((64,), ())
buf65.sizes = ([64], [])
class buf65_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_177', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf65', get_index_2, add, None)
        return store


buf67: SchedulerNode(ComputedBuffer)
buf67.writes = [MemoryDep('buf67', c0, {c0: 16384})]
buf67.unmet_dependencies = 
    [   MemoryDep('buf60', c0, {c0: 16384}),
        MemoryDep('buf61', c1, {c0: 256, c1: 64}),
        MemoryDep('buf62', c1, {c0: 256, c1: 64})]
buf67.met_dependencies = 
    [   MemoryDep('primals_17', c1, {c0: 256, c1: 64}),
        MemoryDep('primals_18', c1, {c0: 256, c1: 64})]
buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf68'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf67.group.device = cpu
buf67.group.iteration = ((256, 64), ())
buf67.sizes = ([256, 64], [])
class buf67_loop_body:
    var_ranges = {z0: 256, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf61', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf62', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_17', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_18', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf67', get_index_5, relu, None)
        return store


buf68: ExternKernelSchedulerNode(ExternKernelAlloc)
buf68.writes = [StarDep(name='buf68')]
buf68.unmet_dependencies = [StarDep(name='buf2'), StarDep(name='buf67')]
buf68.met_dependencies = []
buf68.users = [NodeUser(node=SchedulerNode(name='buf69'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf70'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf71'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf75'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf68.node.kernel = extern_kernels.convolution


buf69_buf70: FusedSchedulerNode(NoneType)
buf69_buf70.writes = [MemoryDep('buf69', c0, {c0: 64}), MemoryDep('buf70', c0, {c0: 64})]
buf69_buf70.unmet_dependencies = [MemoryDep('buf68', c0 + 64*c1, {c0: 64, c1: 256})]
buf69_buf70.met_dependencies = []
buf69_buf70.users = None
    buf69_buf70.snodes[0] =
    buf69: SchedulerNode(ComputedBuffer)
    buf69.writes = [MemoryDep('buf69', c0, {c0: 64})]
    buf69.unmet_dependencies = [MemoryDep('buf68', c0 + 64*c1, {c0: 64, c1: 256})]
    buf69.met_dependencies = []
    buf69.users = [NodeUser(node=SchedulerNode(name='buf73'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf75'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf69.group.device = cpu
    buf69.group.iteration = ((64,), (256,))
    buf69.sizes = ([64], [256])
    class buf69_loop_body:
        var_ranges = {z0: 64, z1: 256}
        index0 = z0 + 64*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf68', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf69', get_index_1, getitem)
            return store_reduction
    buf69_buf70.snodes[1] =
    buf70: SchedulerNode(ComputedBuffer)
    buf70.writes = [MemoryDep('buf70', c0, {c0: 64})]
    buf70.unmet_dependencies = [MemoryDep('buf68', c0 + 64*c1, {c0: 64, c1: 256})]
    buf70.met_dependencies = []
    buf70.users = [NodeUser(node=SchedulerNode(name='buf72'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf74'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf75'), can_inplace=False, is_weak=False)]
    buf70.group.device = cpu
    buf70.group.iteration = ((64,), (256,))
    buf70.sizes = ([64], [256])
    class buf70_loop_body:
        var_ranges = {z0: 64, z1: 256}
        index0 = z0 + 64*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf68', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf70', get_index_1, getitem_1)
            return store_reduction


buf72_buf74: FusedSchedulerNode(NoneType)
buf72_buf74.writes = [MemoryDep('buf72', c0, {c0: 64}), MemoryDep('buf74', c0, {c0: 64})]
buf72_buf74.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 64})]
buf72_buf74.met_dependencies = [MemoryDep('primals_181', c0, {c0: 64})]
buf72_buf74.users = None
    buf72_buf74.snodes[0] =
    buf72: SchedulerNode(ComputedBuffer)
    buf72.writes = [MemoryDep('buf72', c0, {c0: 64})]
    buf72.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 64})]
    buf72.met_dependencies = []
    buf72.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf72.group.device = cpu
    buf72.group.iteration = ((64,), ())
    buf72.sizes = ([64], [])
    class buf72_loop_body:
        var_ranges = {z0: 64}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf70', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf72', get_index_1, rsqrt, None)
            return store
    buf72_buf74.snodes[1] =
    buf74: SchedulerNode(ComputedBuffer)
    buf74.writes = [MemoryDep('buf74', c0, {c0: 64})]
    buf74.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 64})]
    buf74.met_dependencies = [MemoryDep('primals_181', c0, {c0: 64})]
    buf74.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf74.group.device = cpu
    buf74.group.iteration = ((64,), ())
    buf74.sizes = ([64], [])
    class buf74_loop_body:
        var_ranges = {z0: 64}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf70', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.003921568627451, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_181', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf74', get_index_2, add, None)
            return store


buf73: SchedulerNode(ComputedBuffer)
buf73.writes = [MemoryDep('buf73', c0, {c0: 64})]
buf73.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 64})]
buf73.met_dependencies = [MemoryDep('primals_180', c0, {c0: 64})]
buf73.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf73.group.device = cpu
buf73.group.iteration = ((64,), ())
buf73.sizes = ([64], [])
class buf73_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_180', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf73', get_index_2, add, None)
        return store


buf75: SchedulerNode(ComputedBuffer)
buf75.writes = [MemoryDep('buf75', c0, {c0: 16384})]
buf75.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 16384}),
        MemoryDep('buf69', c1, {c0: 256, c1: 64}),
        MemoryDep('buf70', c1, {c0: 256, c1: 64})]
buf75.met_dependencies = 
    [   MemoryDep('primals_20', c1, {c0: 256, c1: 64}),
        MemoryDep('primals_21', c1, {c0: 256, c1: 64})]
buf75.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf76'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf75.group.device = cpu
buf75.group.iteration = ((256, 64), ())
buf75.sizes = ([256, 64], [])
class buf75_loop_body:
    var_ranges = {z0: 256, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf69', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf70', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_20', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_21', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf75', get_index_5, relu, None)
        return store


buf76: ExternKernelSchedulerNode(ExternKernelAlloc)
buf76.writes = [StarDep(name='buf76')]
buf76.unmet_dependencies = [StarDep(name='buf75')]
buf76.met_dependencies = [StarDep(name='primals_22')]
buf76.users = [NodeUser(node=SchedulerNode(name='buf77'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf78'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf79'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf83'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf76.node.kernel = extern_kernels.convolution


buf77_buf78: FusedSchedulerNode(NoneType)
buf77_buf78.writes = [MemoryDep('buf77', c0, {c0: 256}), MemoryDep('buf78', c0, {c0: 256})]
buf77_buf78.unmet_dependencies = [MemoryDep('buf76', c0 + 256*c1, {c0: 256, c1: 256})]
buf77_buf78.met_dependencies = []
buf77_buf78.users = None
    buf77_buf78.snodes[0] =
    buf77: SchedulerNode(ComputedBuffer)
    buf77.writes = [MemoryDep('buf77', c0, {c0: 256})]
    buf77.unmet_dependencies = [MemoryDep('buf76', c0 + 256*c1, {c0: 256, c1: 256})]
    buf77.met_dependencies = []
    buf77.users = [NodeUser(node=SchedulerNode(name='buf81'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf83'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf77.group.device = cpu
    buf77.group.iteration = ((256,), (256,))
    buf77.sizes = ([256], [256])
    class buf77_loop_body:
        var_ranges = {z0: 256, z1: 256}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf76', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf77', get_index_1, getitem)
            return store_reduction
    buf77_buf78.snodes[1] =
    buf78: SchedulerNode(ComputedBuffer)
    buf78.writes = [MemoryDep('buf78', c0, {c0: 256})]
    buf78.unmet_dependencies = [MemoryDep('buf76', c0 + 256*c1, {c0: 256, c1: 256})]
    buf78.met_dependencies = []
    buf78.users = [NodeUser(node=SchedulerNode(name='buf80'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf82'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf83'), can_inplace=False, is_weak=False)]
    buf78.group.device = cpu
    buf78.group.iteration = ((256,), (256,))
    buf78.sizes = ([256], [256])
    class buf78_loop_body:
        var_ranges = {z0: 256, z1: 256}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf76', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf78', get_index_1, getitem_1)
            return store_reduction


buf80_buf82: FusedSchedulerNode(NoneType)
buf80_buf82.writes = [MemoryDep('buf80', c0, {c0: 256}), MemoryDep('buf82', c0, {c0: 256})]
buf80_buf82.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 256})]
buf80_buf82.met_dependencies = [MemoryDep('primals_184', c0, {c0: 256})]
buf80_buf82.users = None
    buf80_buf82.snodes[0] =
    buf80: SchedulerNode(ComputedBuffer)
    buf80.writes = [MemoryDep('buf80', c0, {c0: 256})]
    buf80.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 256})]
    buf80.met_dependencies = []
    buf80.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf80.group.device = cpu
    buf80.group.iteration = ((256,), ())
    buf80.sizes = ([256], [])
    class buf80_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf78', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf80', get_index_1, rsqrt, None)
            return store
    buf80_buf82.snodes[1] =
    buf82: SchedulerNode(ComputedBuffer)
    buf82.writes = [MemoryDep('buf82', c0, {c0: 256})]
    buf82.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 256})]
    buf82.met_dependencies = [MemoryDep('primals_184', c0, {c0: 256})]
    buf82.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf82.group.device = cpu
    buf82.group.iteration = ((256,), ())
    buf82.sizes = ([256], [])
    class buf82_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf78', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.003921568627451, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_184', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf82', get_index_2, add, None)
            return store


buf81: SchedulerNode(ComputedBuffer)
buf81.writes = [MemoryDep('buf81', c0, {c0: 256})]
buf81.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 256})]
buf81.met_dependencies = [MemoryDep('primals_183', c0, {c0: 256})]
buf81.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf81.group.device = cpu
buf81.group.iteration = ((256,), ())
buf81.sizes = ([256], [])
class buf81_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_183', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf81', get_index_2, add, None)
        return store


buf83: SchedulerNode(ComputedBuffer)
buf83.writes = [MemoryDep('buf83', c0, {c0: 65536})]
buf83.unmet_dependencies = 
    [   MemoryDep('buf59', c0, {c0: 65536}),
        MemoryDep('buf76', c0, {c0: 65536}),
        MemoryDep('buf77', c1, {c0: 256, c1: 256}),
        MemoryDep('buf78', c1, {c0: 256, c1: 256})]
buf83.met_dependencies = 
    [   MemoryDep('primals_23', c1, {c0: 256, c1: 256}),
        MemoryDep('primals_24', c1, {c0: 256, c1: 256})]
buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf84'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf107'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf83.group.device = cpu
buf83.group.iteration = ((256, 256), ())
buf83.sizes = ([256, 256], [])
class buf83_loop_body:
    var_ranges = {z0: 256, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf77', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf78', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_23', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_24', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf59', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf83', get_index_6, relu, None)
        return store


buf84: ExternKernelSchedulerNode(ExternKernelAlloc)
buf84.writes = [StarDep(name='buf84')]
buf84.unmet_dependencies = [StarDep(name='buf83')]
buf84.met_dependencies = [StarDep(name='primals_25')]
buf84.users = [NodeUser(node=SchedulerNode(name='buf85'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf86'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf87'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf91'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf84.node.kernel = extern_kernels.convolution


buf85_buf86: FusedSchedulerNode(NoneType)
buf85_buf86.writes = [MemoryDep('buf85', c0, {c0: 64}), MemoryDep('buf86', c0, {c0: 64})]
buf85_buf86.unmet_dependencies = [MemoryDep('buf84', c0 + 64*c1, {c0: 64, c1: 256})]
buf85_buf86.met_dependencies = []
buf85_buf86.users = None
    buf85_buf86.snodes[0] =
    buf85: SchedulerNode(ComputedBuffer)
    buf85.writes = [MemoryDep('buf85', c0, {c0: 64})]
    buf85.unmet_dependencies = [MemoryDep('buf84', c0 + 64*c1, {c0: 64, c1: 256})]
    buf85.met_dependencies = []
    buf85.users = [NodeUser(node=SchedulerNode(name='buf89'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf91'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf85.group.device = cpu
    buf85.group.iteration = ((64,), (256,))
    buf85.sizes = ([64], [256])
    class buf85_loop_body:
        var_ranges = {z0: 64, z1: 256}
        index0 = z0 + 64*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf84', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf85', get_index_1, getitem)
            return store_reduction
    buf85_buf86.snodes[1] =
    buf86: SchedulerNode(ComputedBuffer)
    buf86.writes = [MemoryDep('buf86', c0, {c0: 64})]
    buf86.unmet_dependencies = [MemoryDep('buf84', c0 + 64*c1, {c0: 64, c1: 256})]
    buf86.met_dependencies = []
    buf86.users = [NodeUser(node=SchedulerNode(name='buf88'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf90'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf91'), can_inplace=False, is_weak=False)]
    buf86.group.device = cpu
    buf86.group.iteration = ((64,), (256,))
    buf86.sizes = ([64], [256])
    class buf86_loop_body:
        var_ranges = {z0: 64, z1: 256}
        index0 = z0 + 64*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf84', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf86', get_index_1, getitem_1)
            return store_reduction


buf88_buf90: FusedSchedulerNode(NoneType)
buf88_buf90.writes = [MemoryDep('buf88', c0, {c0: 64}), MemoryDep('buf90', c0, {c0: 64})]
buf88_buf90.unmet_dependencies = [MemoryDep('buf86', c0, {c0: 64})]
buf88_buf90.met_dependencies = [MemoryDep('primals_187', c0, {c0: 64})]
buf88_buf90.users = None
    buf88_buf90.snodes[0] =
    buf88: SchedulerNode(ComputedBuffer)
    buf88.writes = [MemoryDep('buf88', c0, {c0: 64})]
    buf88.unmet_dependencies = [MemoryDep('buf86', c0, {c0: 64})]
    buf88.met_dependencies = []
    buf88.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf88.group.device = cpu
    buf88.group.iteration = ((64,), ())
    buf88.sizes = ([64], [])
    class buf88_loop_body:
        var_ranges = {z0: 64}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf86', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf88', get_index_1, rsqrt, None)
            return store
    buf88_buf90.snodes[1] =
    buf90: SchedulerNode(ComputedBuffer)
    buf90.writes = [MemoryDep('buf90', c0, {c0: 64})]
    buf90.unmet_dependencies = [MemoryDep('buf86', c0, {c0: 64})]
    buf90.met_dependencies = [MemoryDep('primals_187', c0, {c0: 64})]
    buf90.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf90.group.device = cpu
    buf90.group.iteration = ((64,), ())
    buf90.sizes = ([64], [])
    class buf90_loop_body:
        var_ranges = {z0: 64}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf86', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.003921568627451, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_187', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf90', get_index_2, add, None)
            return store


buf89: SchedulerNode(ComputedBuffer)
buf89.writes = [MemoryDep('buf89', c0, {c0: 64})]
buf89.unmet_dependencies = [MemoryDep('buf85', c0, {c0: 64})]
buf89.met_dependencies = [MemoryDep('primals_186', c0, {c0: 64})]
buf89.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf89.group.device = cpu
buf89.group.iteration = ((64,), ())
buf89.sizes = ([64], [])
class buf89_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_186', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf89', get_index_2, add, None)
        return store


buf91: SchedulerNode(ComputedBuffer)
buf91.writes = [MemoryDep('buf91', c0, {c0: 16384})]
buf91.unmet_dependencies = 
    [   MemoryDep('buf84', c0, {c0: 16384}),
        MemoryDep('buf85', c1, {c0: 256, c1: 64}),
        MemoryDep('buf86', c1, {c0: 256, c1: 64})]
buf91.met_dependencies = 
    [   MemoryDep('primals_26', c1, {c0: 256, c1: 64}),
        MemoryDep('primals_27', c1, {c0: 256, c1: 64})]
buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf92'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf91.group.device = cpu
buf91.group.iteration = ((256, 64), ())
buf91.sizes = ([256, 64], [])
class buf91_loop_body:
    var_ranges = {z0: 256, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf85', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf86', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_26', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_27', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf91', get_index_5, relu, None)
        return store


buf92: ExternKernelSchedulerNode(ExternKernelAlloc)
buf92.writes = [StarDep(name='buf92')]
buf92.unmet_dependencies = [StarDep(name='buf3'), StarDep(name='buf91')]
buf92.met_dependencies = []
buf92.users = [NodeUser(node=SchedulerNode(name='buf93'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf94'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf95'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf99'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf92.node.kernel = extern_kernels.convolution


buf93_buf94: FusedSchedulerNode(NoneType)
buf93_buf94.writes = [MemoryDep('buf93', c0, {c0: 64}), MemoryDep('buf94', c0, {c0: 64})]
buf93_buf94.unmet_dependencies = [MemoryDep('buf92', c0 + 64*c1, {c0: 64, c1: 256})]
buf93_buf94.met_dependencies = []
buf93_buf94.users = None
    buf93_buf94.snodes[0] =
    buf93: SchedulerNode(ComputedBuffer)
    buf93.writes = [MemoryDep('buf93', c0, {c0: 64})]
    buf93.unmet_dependencies = [MemoryDep('buf92', c0 + 64*c1, {c0: 64, c1: 256})]
    buf93.met_dependencies = []
    buf93.users = [NodeUser(node=SchedulerNode(name='buf97'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf99'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf93.group.device = cpu
    buf93.group.iteration = ((64,), (256,))
    buf93.sizes = ([64], [256])
    class buf93_loop_body:
        var_ranges = {z0: 64, z1: 256}
        index0 = z0 + 64*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf92', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf93', get_index_1, getitem)
            return store_reduction
    buf93_buf94.snodes[1] =
    buf94: SchedulerNode(ComputedBuffer)
    buf94.writes = [MemoryDep('buf94', c0, {c0: 64})]
    buf94.unmet_dependencies = [MemoryDep('buf92', c0 + 64*c1, {c0: 64, c1: 256})]
    buf94.met_dependencies = []
    buf94.users = [NodeUser(node=SchedulerNode(name='buf96'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf98'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf99'), can_inplace=False, is_weak=False)]
    buf94.group.device = cpu
    buf94.group.iteration = ((64,), (256,))
    buf94.sizes = ([64], [256])
    class buf94_loop_body:
        var_ranges = {z0: 64, z1: 256}
        index0 = z0 + 64*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf92', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf94', get_index_1, getitem_1)
            return store_reduction


buf96_buf98: FusedSchedulerNode(NoneType)
buf96_buf98.writes = [MemoryDep('buf96', c0, {c0: 64}), MemoryDep('buf98', c0, {c0: 64})]
buf96_buf98.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 64})]
buf96_buf98.met_dependencies = [MemoryDep('primals_190', c0, {c0: 64})]
buf96_buf98.users = None
    buf96_buf98.snodes[0] =
    buf96: SchedulerNode(ComputedBuffer)
    buf96.writes = [MemoryDep('buf96', c0, {c0: 64})]
    buf96.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 64})]
    buf96.met_dependencies = []
    buf96.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf96.group.device = cpu
    buf96.group.iteration = ((64,), ())
    buf96.sizes = ([64], [])
    class buf96_loop_body:
        var_ranges = {z0: 64}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf94', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf96', get_index_1, rsqrt, None)
            return store
    buf96_buf98.snodes[1] =
    buf98: SchedulerNode(ComputedBuffer)
    buf98.writes = [MemoryDep('buf98', c0, {c0: 64})]
    buf98.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 64})]
    buf98.met_dependencies = [MemoryDep('primals_190', c0, {c0: 64})]
    buf98.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf98.group.device = cpu
    buf98.group.iteration = ((64,), ())
    buf98.sizes = ([64], [])
    class buf98_loop_body:
        var_ranges = {z0: 64}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf94', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.003921568627451, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_190', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf98', get_index_2, add, None)
            return store


buf97: SchedulerNode(ComputedBuffer)
buf97.writes = [MemoryDep('buf97', c0, {c0: 64})]
buf97.unmet_dependencies = [MemoryDep('buf93', c0, {c0: 64})]
buf97.met_dependencies = [MemoryDep('primals_189', c0, {c0: 64})]
buf97.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf97.group.device = cpu
buf97.group.iteration = ((64,), ())
buf97.sizes = ([64], [])
class buf97_loop_body:
    var_ranges = {z0: 64}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_189', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf97', get_index_2, add, None)
        return store


buf99: SchedulerNode(ComputedBuffer)
buf99.writes = [MemoryDep('buf99', c0, {c0: 16384})]
buf99.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 16384}),
        MemoryDep('buf93', c1, {c0: 256, c1: 64}),
        MemoryDep('buf94', c1, {c0: 256, c1: 64})]
buf99.met_dependencies = 
    [   MemoryDep('primals_29', c1, {c0: 256, c1: 64}),
        MemoryDep('primals_30', c1, {c0: 256, c1: 64})]
buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf100'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf99.group.device = cpu
buf99.group.iteration = ((256, 64), ())
buf99.sizes = ([256, 64], [])
class buf99_loop_body:
    var_ranges = {z0: 256, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf93', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf94', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_29', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_30', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf99', get_index_5, relu, None)
        return store


buf100: ExternKernelSchedulerNode(ExternKernelAlloc)
buf100.writes = [StarDep(name='buf100')]
buf100.unmet_dependencies = [StarDep(name='buf99')]
buf100.met_dependencies = [StarDep(name='primals_31')]
buf100.users = [NodeUser(node=SchedulerNode(name='buf101'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf102'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf103'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf107'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf100.node.kernel = extern_kernels.convolution


buf101_buf102: FusedSchedulerNode(NoneType)
buf101_buf102.writes = [MemoryDep('buf101', c0, {c0: 256}), MemoryDep('buf102', c0, {c0: 256})]
buf101_buf102.unmet_dependencies = [MemoryDep('buf100', c0 + 256*c1, {c0: 256, c1: 256})]
buf101_buf102.met_dependencies = []
buf101_buf102.users = None
    buf101_buf102.snodes[0] =
    buf101: SchedulerNode(ComputedBuffer)
    buf101.writes = [MemoryDep('buf101', c0, {c0: 256})]
    buf101.unmet_dependencies = [MemoryDep('buf100', c0 + 256*c1, {c0: 256, c1: 256})]
    buf101.met_dependencies = []
    buf101.users = [NodeUser(node=SchedulerNode(name='buf105'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf107'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf101.group.device = cpu
    buf101.group.iteration = ((256,), (256,))
    buf101.sizes = ([256], [256])
    class buf101_loop_body:
        var_ranges = {z0: 256, z1: 256}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf100', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf101', get_index_1, getitem)
            return store_reduction
    buf101_buf102.snodes[1] =
    buf102: SchedulerNode(ComputedBuffer)
    buf102.writes = [MemoryDep('buf102', c0, {c0: 256})]
    buf102.unmet_dependencies = [MemoryDep('buf100', c0 + 256*c1, {c0: 256, c1: 256})]
    buf102.met_dependencies = []
    buf102.users = [NodeUser(node=SchedulerNode(name='buf104'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf106'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf107'), can_inplace=False, is_weak=False)]
    buf102.group.device = cpu
    buf102.group.iteration = ((256,), (256,))
    buf102.sizes = ([256], [256])
    class buf102_loop_body:
        var_ranges = {z0: 256, z1: 256}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf100', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf102', get_index_1, getitem_1)
            return store_reduction


buf104_buf106: FusedSchedulerNode(NoneType)
buf104_buf106.writes = [MemoryDep('buf104', c0, {c0: 256}), MemoryDep('buf106', c0, {c0: 256})]
buf104_buf106.unmet_dependencies = [MemoryDep('buf102', c0, {c0: 256})]
buf104_buf106.met_dependencies = [MemoryDep('primals_193', c0, {c0: 256})]
buf104_buf106.users = None
    buf104_buf106.snodes[0] =
    buf104: SchedulerNode(ComputedBuffer)
    buf104.writes = [MemoryDep('buf104', c0, {c0: 256})]
    buf104.unmet_dependencies = [MemoryDep('buf102', c0, {c0: 256})]
    buf104.met_dependencies = []
    buf104.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf104.group.device = cpu
    buf104.group.iteration = ((256,), ())
    buf104.sizes = ([256], [])
    class buf104_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf102', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf104', get_index_1, rsqrt, None)
            return store
    buf104_buf106.snodes[1] =
    buf106: SchedulerNode(ComputedBuffer)
    buf106.writes = [MemoryDep('buf106', c0, {c0: 256})]
    buf106.unmet_dependencies = [MemoryDep('buf102', c0, {c0: 256})]
    buf106.met_dependencies = [MemoryDep('primals_193', c0, {c0: 256})]
    buf106.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf106.group.device = cpu
    buf106.group.iteration = ((256,), ())
    buf106.sizes = ([256], [])
    class buf106_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf102', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.003921568627451, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_193', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf106', get_index_2, add, None)
            return store


buf105: SchedulerNode(ComputedBuffer)
buf105.writes = [MemoryDep('buf105', c0, {c0: 256})]
buf105.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 256})]
buf105.met_dependencies = [MemoryDep('primals_192', c0, {c0: 256})]
buf105.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf105.group.device = cpu
buf105.group.iteration = ((256,), ())
buf105.sizes = ([256], [])
class buf105_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_192', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf105', get_index_2, add, None)
        return store


buf107: SchedulerNode(ComputedBuffer)
buf107.writes = [MemoryDep('buf107', c0, {c0: 65536})]
buf107.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 65536}),
        MemoryDep('buf101', c1, {c0: 256, c1: 256}),
        MemoryDep('buf102', c1, {c0: 256, c1: 256}),
        MemoryDep('buf83', c0, {c0: 65536})]
buf107.met_dependencies = 
    [   MemoryDep('primals_32', c1, {c0: 256, c1: 256}),
        MemoryDep('primals_33', c1, {c0: 256, c1: 256})]
buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf108'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf131'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf107.group.device = cpu
buf107.group.iteration = ((256, 256), ())
buf107.sizes = ([256, 256], [])
class buf107_loop_body:
    var_ranges = {z0: 256, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf101', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf102', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_32', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_33', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf83', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf107', get_index_6, relu, None)
        return store


buf108: ExternKernelSchedulerNode(ExternKernelAlloc)
buf108.writes = [StarDep(name='buf108')]
buf108.unmet_dependencies = [StarDep(name='buf107')]
buf108.met_dependencies = [StarDep(name='primals_34')]
buf108.users = [NodeUser(node=SchedulerNode(name='buf109'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf110'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf111'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf115'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf108.node.kernel = extern_kernels.convolution


buf109_buf110: FusedSchedulerNode(NoneType)
buf109_buf110.writes = [MemoryDep('buf109', c0, {c0: 128}), MemoryDep('buf110', c0, {c0: 128})]
buf109_buf110.unmet_dependencies = [MemoryDep('buf108', c0 + 128*c1, {c0: 128, c1: 256})]
buf109_buf110.met_dependencies = []
buf109_buf110.users = None
    buf109_buf110.snodes[0] =
    buf109: SchedulerNode(ComputedBuffer)
    buf109.writes = [MemoryDep('buf109', c0, {c0: 128})]
    buf109.unmet_dependencies = [MemoryDep('buf108', c0 + 128*c1, {c0: 128, c1: 256})]
    buf109.met_dependencies = []
    buf109.users = [NodeUser(node=SchedulerNode(name='buf113'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf115'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf109.group.device = cpu
    buf109.group.iteration = ((128,), (256,))
    buf109.sizes = ([128], [256])
    class buf109_loop_body:
        var_ranges = {z0: 128, z1: 256}
        index0 = z0 + 128*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf108', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf109', get_index_1, getitem)
            return store_reduction
    buf109_buf110.snodes[1] =
    buf110: SchedulerNode(ComputedBuffer)
    buf110.writes = [MemoryDep('buf110', c0, {c0: 128})]
    buf110.unmet_dependencies = [MemoryDep('buf108', c0 + 128*c1, {c0: 128, c1: 256})]
    buf110.met_dependencies = []
    buf110.users = [NodeUser(node=SchedulerNode(name='buf112'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf114'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf115'), can_inplace=False, is_weak=False)]
    buf110.group.device = cpu
    buf110.group.iteration = ((128,), (256,))
    buf110.sizes = ([128], [256])
    class buf110_loop_body:
        var_ranges = {z0: 128, z1: 256}
        index0 = z0 + 128*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf108', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf110', get_index_1, getitem_1)
            return store_reduction


buf112_buf114: FusedSchedulerNode(NoneType)
buf112_buf114.writes = [MemoryDep('buf112', c0, {c0: 128}), MemoryDep('buf114', c0, {c0: 128})]
buf112_buf114.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 128})]
buf112_buf114.met_dependencies = [MemoryDep('primals_196', c0, {c0: 128})]
buf112_buf114.users = None
    buf112_buf114.snodes[0] =
    buf112: SchedulerNode(ComputedBuffer)
    buf112.writes = [MemoryDep('buf112', c0, {c0: 128})]
    buf112.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 128})]
    buf112.met_dependencies = []
    buf112.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf112.group.device = cpu
    buf112.group.iteration = ((128,), ())
    buf112.sizes = ([128], [])
    class buf112_loop_body:
        var_ranges = {z0: 128}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf110', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf112', get_index_1, rsqrt, None)
            return store
    buf112_buf114.snodes[1] =
    buf114: SchedulerNode(ComputedBuffer)
    buf114.writes = [MemoryDep('buf114', c0, {c0: 128})]
    buf114.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 128})]
    buf114.met_dependencies = [MemoryDep('primals_196', c0, {c0: 128})]
    buf114.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf114.group.device = cpu
    buf114.group.iteration = ((128,), ())
    buf114.sizes = ([128], [])
    class buf114_loop_body:
        var_ranges = {z0: 128}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf110', get_index)
            constant = ops.constant(256.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.003921568627451, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_196', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf114', get_index_2, add, None)
            return store


buf113: SchedulerNode(ComputedBuffer)
buf113.writes = [MemoryDep('buf113', c0, {c0: 128})]
buf113.unmet_dependencies = [MemoryDep('buf109', c0, {c0: 128})]
buf113.met_dependencies = [MemoryDep('primals_195', c0, {c0: 128})]
buf113.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf113.group.device = cpu
buf113.group.iteration = ((128,), ())
buf113.sizes = ([128], [])
class buf113_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_195', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf113', get_index_2, add, None)
        return store


buf115: SchedulerNode(ComputedBuffer)
buf115.writes = [MemoryDep('buf115', c0, {c0: 32768})]
buf115.unmet_dependencies = 
    [   MemoryDep('buf108', c0, {c0: 32768}),
        MemoryDep('buf109', c1, {c0: 256, c1: 128}),
        MemoryDep('buf110', c1, {c0: 256, c1: 128})]
buf115.met_dependencies = 
    [   MemoryDep('primals_35', c1, {c0: 256, c1: 128}),
        MemoryDep('primals_36', c1, {c0: 256, c1: 128})]
buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf116'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf115.group.device = cpu
buf115.group.iteration = ((256, 128), ())
buf115.sizes = ([256, 128], [])
class buf115_loop_body:
    var_ranges = {z0: 256, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf109', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf110', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_35', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_36', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf115', get_index_5, relu, None)
        return store


buf116: ExternKernelSchedulerNode(ExternKernelAlloc)
buf116.writes = [StarDep(name='buf116')]
buf116.unmet_dependencies = [StarDep(name='buf115'), StarDep(name='buf4')]
buf116.met_dependencies = []
buf116.users = [NodeUser(node=SchedulerNode(name='buf117'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf118'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf119'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf123'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf116.node.kernel = extern_kernels.convolution


buf117_buf118: FusedSchedulerNode(NoneType)
buf117_buf118.writes = [MemoryDep('buf117', c0, {c0: 128}), MemoryDep('buf118', c0, {c0: 128})]
buf117_buf118.unmet_dependencies = [MemoryDep('buf116', c0 + 128*c1, {c0: 128, c1: 64})]
buf117_buf118.met_dependencies = []
buf117_buf118.users = None
    buf117_buf118.snodes[0] =
    buf117: SchedulerNode(ComputedBuffer)
    buf117.writes = [MemoryDep('buf117', c0, {c0: 128})]
    buf117.unmet_dependencies = [MemoryDep('buf116', c0 + 128*c1, {c0: 128, c1: 64})]
    buf117.met_dependencies = []
    buf117.users = [NodeUser(node=SchedulerNode(name='buf121'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf123'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf117.group.device = cpu
    buf117.group.iteration = ((128,), (64,))
    buf117.sizes = ([128], [64])
    class buf117_loop_body:
        var_ranges = {z0: 128, z1: 64}
        index0 = z0 + 128*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf116', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf117', get_index_1, getitem)
            return store_reduction
    buf117_buf118.snodes[1] =
    buf118: SchedulerNode(ComputedBuffer)
    buf118.writes = [MemoryDep('buf118', c0, {c0: 128})]
    buf118.unmet_dependencies = [MemoryDep('buf116', c0 + 128*c1, {c0: 128, c1: 64})]
    buf118.met_dependencies = []
    buf118.users = [NodeUser(node=SchedulerNode(name='buf120'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf122'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf123'), can_inplace=False, is_weak=False)]
    buf118.group.device = cpu
    buf118.group.iteration = ((128,), (64,))
    buf118.sizes = ([128], [64])
    class buf118_loop_body:
        var_ranges = {z0: 128, z1: 64}
        index0 = z0 + 128*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf116', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf118', get_index_1, getitem_1)
            return store_reduction


buf120_buf122: FusedSchedulerNode(NoneType)
buf120_buf122.writes = [MemoryDep('buf120', c0, {c0: 128}), MemoryDep('buf122', c0, {c0: 128})]
buf120_buf122.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 128})]
buf120_buf122.met_dependencies = [MemoryDep('primals_199', c0, {c0: 128})]
buf120_buf122.users = None
    buf120_buf122.snodes[0] =
    buf120: SchedulerNode(ComputedBuffer)
    buf120.writes = [MemoryDep('buf120', c0, {c0: 128})]
    buf120.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 128})]
    buf120.met_dependencies = []
    buf120.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf120.group.device = cpu
    buf120.group.iteration = ((128,), ())
    buf120.sizes = ([128], [])
    class buf120_loop_body:
        var_ranges = {z0: 128}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf118', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf120', get_index_1, rsqrt, None)
            return store
    buf120_buf122.snodes[1] =
    buf122: SchedulerNode(ComputedBuffer)
    buf122.writes = [MemoryDep('buf122', c0, {c0: 128})]
    buf122.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 128})]
    buf122.met_dependencies = [MemoryDep('primals_199', c0, {c0: 128})]
    buf122.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf122.group.device = cpu
    buf122.group.iteration = ((128,), ())
    buf122.sizes = ([128], [])
    class buf122_loop_body:
        var_ranges = {z0: 128}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf118', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0158730158730158, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_199', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf122', get_index_2, add, None)
            return store


buf121: SchedulerNode(ComputedBuffer)
buf121.writes = [MemoryDep('buf121', c0, {c0: 128})]
buf121.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 128})]
buf121.met_dependencies = [MemoryDep('primals_198', c0, {c0: 128})]
buf121.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf121.group.device = cpu
buf121.group.iteration = ((128,), ())
buf121.sizes = ([128], [])
class buf121_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_198', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf121', get_index_2, add, None)
        return store


buf123: SchedulerNode(ComputedBuffer)
buf123.writes = [MemoryDep('buf123', c0, {c0: 8192})]
buf123.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 8192}),
        MemoryDep('buf117', c1, {c0: 64, c1: 128}),
        MemoryDep('buf118', c1, {c0: 64, c1: 128})]
buf123.met_dependencies = 
    [   MemoryDep('primals_38', c1, {c0: 64, c1: 128}),
        MemoryDep('primals_39', c1, {c0: 64, c1: 128})]
buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf124'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf123.group.device = cpu
buf123.group.iteration = ((64, 128), ())
buf123.sizes = ([64, 128], [])
class buf123_loop_body:
    var_ranges = {z0: 64, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf117', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf118', get_index_2)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_38', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_39', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf123', get_index_5, relu, None)
        return store


buf124: ExternKernelSchedulerNode(ExternKernelAlloc)
buf124.writes = [StarDep(name='buf124')]
buf124.unmet_dependencies = [StarDep(name='buf123')]
buf124.met_dependencies = [StarDep(name='primals_40')]
buf124.users = [NodeUser(node=SchedulerNode(name='buf125'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf126'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf127'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf138'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf124.node.kernel = extern_kernels.convolution


buf125_buf126: FusedSchedulerNode(NoneType)
buf125_buf126.writes = [MemoryDep('buf125', c0, {c0: 512}), MemoryDep('buf126', c0, {c0: 512})]
buf125_buf126.unmet_dependencies = [MemoryDep('buf124', c0 + 512*c1, {c0: 512, c1: 64})]
buf125_buf126.met_dependencies = []
buf125_buf126.users = None
    buf125_buf126.snodes[0] =
    buf125: SchedulerNode(ComputedBuffer)
    buf125.writes = [MemoryDep('buf125', c0, {c0: 512})]
    buf125.unmet_dependencies = [MemoryDep('buf124', c0 + 512*c1, {c0: 512, c1: 64})]
    buf125.met_dependencies = []
    buf125.users = [NodeUser(node=SchedulerNode(name='buf129'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf138'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf125.group.device = cpu
    buf125.group.iteration = ((512,), (64,))
    buf125.sizes = ([512], [64])
    class buf125_loop_body:
        var_ranges = {z0: 512, z1: 64}
        index0 = z0 + 512*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf124', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf125', get_index_1, getitem)
            return store_reduction
    buf125_buf126.snodes[1] =
    buf126: SchedulerNode(ComputedBuffer)
    buf126.writes = [MemoryDep('buf126', c0, {c0: 512})]
    buf126.unmet_dependencies = [MemoryDep('buf124', c0 + 512*c1, {c0: 512, c1: 64})]
    buf126.met_dependencies = []
    buf126.users = [NodeUser(node=SchedulerNode(name='buf128'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf130'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf138'), can_inplace=False, is_weak=False)]
    buf126.group.device = cpu
    buf126.group.iteration = ((512,), (64,))
    buf126.sizes = ([512], [64])
    class buf126_loop_body:
        var_ranges = {z0: 512, z1: 64}
        index0 = z0 + 512*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf124', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf126', get_index_1, getitem_1)
            return store_reduction


buf128_buf130: FusedSchedulerNode(NoneType)
buf128_buf130.writes = [MemoryDep('buf128', c0, {c0: 512}), MemoryDep('buf130', c0, {c0: 512})]
buf128_buf130.unmet_dependencies = [MemoryDep('buf126', c0, {c0: 512})]
buf128_buf130.met_dependencies = [MemoryDep('primals_202', c0, {c0: 512})]
buf128_buf130.users = None
    buf128_buf130.snodes[0] =
    buf128: SchedulerNode(ComputedBuffer)
    buf128.writes = [MemoryDep('buf128', c0, {c0: 512})]
    buf128.unmet_dependencies = [MemoryDep('buf126', c0, {c0: 512})]
    buf128.met_dependencies = []
    buf128.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf128.group.device = cpu
    buf128.group.iteration = ((512,), ())
    buf128.sizes = ([512], [])
    class buf128_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf126', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf128', get_index_1, rsqrt, None)
            return store
    buf128_buf130.snodes[1] =
    buf130: SchedulerNode(ComputedBuffer)
    buf130.writes = [MemoryDep('buf130', c0, {c0: 512})]
    buf130.unmet_dependencies = [MemoryDep('buf126', c0, {c0: 512})]
    buf130.met_dependencies = [MemoryDep('primals_202', c0, {c0: 512})]
    buf130.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf130.group.device = cpu
    buf130.group.iteration = ((512,), ())
    buf130.sizes = ([512], [])
    class buf130_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf126', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0158730158730158, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_202', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf130', get_index_2, add, None)
            return store


buf129: SchedulerNode(ComputedBuffer)
buf129.writes = [MemoryDep('buf129', c0, {c0: 512})]
buf129.unmet_dependencies = [MemoryDep('buf125', c0, {c0: 512})]
buf129.met_dependencies = [MemoryDep('primals_201', c0, {c0: 512})]
buf129.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf129.group.device = cpu
buf129.group.iteration = ((512,), ())
buf129.sizes = ([512], [])
class buf129_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_201', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf129', get_index_2, add, None)
        return store


buf131: ExternKernelSchedulerNode(ExternKernelAlloc)
buf131.writes = [StarDep(name='buf131')]
buf131.unmet_dependencies = [StarDep(name='buf107')]
buf131.met_dependencies = [StarDep(name='primals_43')]
buf131.users = [NodeUser(node=SchedulerNode(name='buf132'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf133'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf134'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf138'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf131.node.kernel = extern_kernels.convolution


buf132_buf133: FusedSchedulerNode(NoneType)
buf132_buf133.writes = [MemoryDep('buf132', c0, {c0: 512}), MemoryDep('buf133', c0, {c0: 512})]
buf132_buf133.unmet_dependencies = [MemoryDep('buf131', c0 + 512*c1, {c0: 512, c1: 64})]
buf132_buf133.met_dependencies = []
buf132_buf133.users = None
    buf132_buf133.snodes[0] =
    buf132: SchedulerNode(ComputedBuffer)
    buf132.writes = [MemoryDep('buf132', c0, {c0: 512})]
    buf132.unmet_dependencies = [MemoryDep('buf131', c0 + 512*c1, {c0: 512, c1: 64})]
    buf132.met_dependencies = []
    buf132.users = [NodeUser(node=SchedulerNode(name='buf136'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf138'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf132.group.device = cpu
    buf132.group.iteration = ((512,), (64,))
    buf132.sizes = ([512], [64])
    class buf132_loop_body:
        var_ranges = {z0: 512, z1: 64}
        index0 = z0 + 512*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf131', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf132', get_index_1, getitem)
            return store_reduction
    buf132_buf133.snodes[1] =
    buf133: SchedulerNode(ComputedBuffer)
    buf133.writes = [MemoryDep('buf133', c0, {c0: 512})]
    buf133.unmet_dependencies = [MemoryDep('buf131', c0 + 512*c1, {c0: 512, c1: 64})]
    buf133.met_dependencies = []
    buf133.users = [NodeUser(node=SchedulerNode(name='buf135'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf137'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf138'), can_inplace=False, is_weak=False)]
    buf133.group.device = cpu
    buf133.group.iteration = ((512,), (64,))
    buf133.sizes = ([512], [64])
    class buf133_loop_body:
        var_ranges = {z0: 512, z1: 64}
        index0 = z0 + 512*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf131', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf133', get_index_1, getitem_1)
            return store_reduction


buf135_buf137: FusedSchedulerNode(NoneType)
buf135_buf137.writes = [MemoryDep('buf135', c0, {c0: 512}), MemoryDep('buf137', c0, {c0: 512})]
buf135_buf137.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 512})]
buf135_buf137.met_dependencies = [MemoryDep('primals_205', c0, {c0: 512})]
buf135_buf137.users = None
    buf135_buf137.snodes[0] =
    buf135: SchedulerNode(ComputedBuffer)
    buf135.writes = [MemoryDep('buf135', c0, {c0: 512})]
    buf135.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 512})]
    buf135.met_dependencies = []
    buf135.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf135.group.device = cpu
    buf135.group.iteration = ((512,), ())
    buf135.sizes = ([512], [])
    class buf135_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf133', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf135', get_index_1, rsqrt, None)
            return store
    buf135_buf137.snodes[1] =
    buf137: SchedulerNode(ComputedBuffer)
    buf137.writes = [MemoryDep('buf137', c0, {c0: 512})]
    buf137.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 512})]
    buf137.met_dependencies = [MemoryDep('primals_205', c0, {c0: 512})]
    buf137.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf137.group.device = cpu
    buf137.group.iteration = ((512,), ())
    buf137.sizes = ([512], [])
    class buf137_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf133', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0158730158730158, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_205', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf137', get_index_2, add, None)
            return store


buf136: SchedulerNode(ComputedBuffer)
buf136.writes = [MemoryDep('buf136', c0, {c0: 512})]
buf136.unmet_dependencies = [MemoryDep('buf132', c0, {c0: 512})]
buf136.met_dependencies = [MemoryDep('primals_204', c0, {c0: 512})]
buf136.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf136.group.device = cpu
buf136.group.iteration = ((512,), ())
buf136.sizes = ([512], [])
class buf136_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_204', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf136', get_index_2, add, None)
        return store


buf138: SchedulerNode(ComputedBuffer)
buf138.writes = [MemoryDep('buf138', c0, {c0: 32768})]
buf138.unmet_dependencies = 
    [   MemoryDep('buf124', c0, {c0: 32768}),
        MemoryDep('buf125', c1, {c0: 64, c1: 512}),
        MemoryDep('buf126', c1, {c0: 64, c1: 512}),
        MemoryDep('buf131', c0, {c0: 32768}),
        MemoryDep('buf132', c1, {c0: 64, c1: 512}),
        MemoryDep('buf133', c1, {c0: 64, c1: 512})]
buf138.met_dependencies = 
    [   MemoryDep('primals_41', c1, {c0: 64, c1: 512}),
        MemoryDep('primals_42', c1, {c0: 64, c1: 512}),
        MemoryDep('primals_44', c1, {c0: 64, c1: 512}),
        MemoryDep('primals_45', c1, {c0: 64, c1: 512})]
buf138.users = [NodeUser(node=SchedulerNode(name='buf139'), can_inplace=True, is_weak=False)]
buf138.group.device = cpu
buf138.group.iteration = ((64, 512), ())
buf138.sizes = ([64, 512], [])
class buf138_loop_body:
    var_ranges = {z0: 64, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf125', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf126', get_index_2)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_41', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_42', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf131', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf132', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf133', get_index_7)
        constant_2 = ops.constant(64.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_44', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_45', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf138', get_index_10, add_4, None)
        return store


buf139: SchedulerNode(ComputedBuffer)
buf139.writes = [MemoryDep('buf139', c0, {c0: 32768})]
buf139.unmet_dependencies = [MemoryDep('buf138', c0, {c0: 32768})]
buf139.met_dependencies = []
buf139.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf140'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf163'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf139.group.device = cpu
buf139.group.iteration = ((32768,), ())
buf139.sizes = ([32768], [])
class buf139_loop_body:
    var_ranges = {z0: 32768}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf139', get_index_1, relu, None)
        return store


buf140: ExternKernelSchedulerNode(ExternKernelAlloc)
buf140.writes = [StarDep(name='buf140')]
buf140.unmet_dependencies = [StarDep(name='buf139')]
buf140.met_dependencies = [StarDep(name='primals_46')]
buf140.users = [NodeUser(node=SchedulerNode(name='buf141'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf142'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf143'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf147'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf140.node.kernel = extern_kernels.convolution


buf141_buf142: FusedSchedulerNode(NoneType)
buf141_buf142.writes = [MemoryDep('buf141', c0, {c0: 128}), MemoryDep('buf142', c0, {c0: 128})]
buf141_buf142.unmet_dependencies = [MemoryDep('buf140', c0 + 128*c1, {c0: 128, c1: 64})]
buf141_buf142.met_dependencies = []
buf141_buf142.users = None
    buf141_buf142.snodes[0] =
    buf141: SchedulerNode(ComputedBuffer)
    buf141.writes = [MemoryDep('buf141', c0, {c0: 128})]
    buf141.unmet_dependencies = [MemoryDep('buf140', c0 + 128*c1, {c0: 128, c1: 64})]
    buf141.met_dependencies = []
    buf141.users = [NodeUser(node=SchedulerNode(name='buf145'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf147'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf141.group.device = cpu
    buf141.group.iteration = ((128,), (64,))
    buf141.sizes = ([128], [64])
    class buf141_loop_body:
        var_ranges = {z0: 128, z1: 64}
        index0 = z0 + 128*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf140', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf141', get_index_1, getitem)
            return store_reduction
    buf141_buf142.snodes[1] =
    buf142: SchedulerNode(ComputedBuffer)
    buf142.writes = [MemoryDep('buf142', c0, {c0: 128})]
    buf142.unmet_dependencies = [MemoryDep('buf140', c0 + 128*c1, {c0: 128, c1: 64})]
    buf142.met_dependencies = []
    buf142.users = [NodeUser(node=SchedulerNode(name='buf144'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf146'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf147'), can_inplace=False, is_weak=False)]
    buf142.group.device = cpu
    buf142.group.iteration = ((128,), (64,))
    buf142.sizes = ([128], [64])
    class buf142_loop_body:
        var_ranges = {z0: 128, z1: 64}
        index0 = z0 + 128*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf140', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf142', get_index_1, getitem_1)
            return store_reduction


buf144_buf146: FusedSchedulerNode(NoneType)
buf144_buf146.writes = [MemoryDep('buf144', c0, {c0: 128}), MemoryDep('buf146', c0, {c0: 128})]
buf144_buf146.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 128})]
buf144_buf146.met_dependencies = [MemoryDep('primals_208', c0, {c0: 128})]
buf144_buf146.users = None
    buf144_buf146.snodes[0] =
    buf144: SchedulerNode(ComputedBuffer)
    buf144.writes = [MemoryDep('buf144', c0, {c0: 128})]
    buf144.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 128})]
    buf144.met_dependencies = []
    buf144.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf144.group.device = cpu
    buf144.group.iteration = ((128,), ())
    buf144.sizes = ([128], [])
    class buf144_loop_body:
        var_ranges = {z0: 128}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf142', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf144', get_index_1, rsqrt, None)
            return store
    buf144_buf146.snodes[1] =
    buf146: SchedulerNode(ComputedBuffer)
    buf146.writes = [MemoryDep('buf146', c0, {c0: 128})]
    buf146.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 128})]
    buf146.met_dependencies = [MemoryDep('primals_208', c0, {c0: 128})]
    buf146.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf146.group.device = cpu
    buf146.group.iteration = ((128,), ())
    buf146.sizes = ([128], [])
    class buf146_loop_body:
        var_ranges = {z0: 128}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf142', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0158730158730158, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_208', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf146', get_index_2, add, None)
            return store


buf145: SchedulerNode(ComputedBuffer)
buf145.writes = [MemoryDep('buf145', c0, {c0: 128})]
buf145.unmet_dependencies = [MemoryDep('buf141', c0, {c0: 128})]
buf145.met_dependencies = [MemoryDep('primals_207', c0, {c0: 128})]
buf145.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf145.group.device = cpu
buf145.group.iteration = ((128,), ())
buf145.sizes = ([128], [])
class buf145_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_207', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf145', get_index_2, add, None)
        return store


buf147: SchedulerNode(ComputedBuffer)
buf147.writes = [MemoryDep('buf147', c0, {c0: 8192})]
buf147.unmet_dependencies = 
    [   MemoryDep('buf140', c0, {c0: 8192}),
        MemoryDep('buf141', c1, {c0: 64, c1: 128}),
        MemoryDep('buf142', c1, {c0: 64, c1: 128})]
buf147.met_dependencies = 
    [   MemoryDep('primals_47', c1, {c0: 64, c1: 128}),
        MemoryDep('primals_48', c1, {c0: 64, c1: 128})]
buf147.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf148'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf147.group.device = cpu
buf147.group.iteration = ((64, 128), ())
buf147.sizes = ([64, 128], [])
class buf147_loop_body:
    var_ranges = {z0: 64, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf141', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf142', get_index_2)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_47', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_48', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf147', get_index_5, relu, None)
        return store


buf148: ExternKernelSchedulerNode(ExternKernelAlloc)
buf148.writes = [StarDep(name='buf148')]
buf148.unmet_dependencies = [StarDep(name='buf147'), StarDep(name='buf5')]
buf148.met_dependencies = []
buf148.users = [NodeUser(node=SchedulerNode(name='buf149'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf150'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf151'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf155'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf148.node.kernel = extern_kernels.convolution


buf149_buf150: FusedSchedulerNode(NoneType)
buf149_buf150.writes = [MemoryDep('buf149', c0, {c0: 128}), MemoryDep('buf150', c0, {c0: 128})]
buf149_buf150.unmet_dependencies = [MemoryDep('buf148', c0 + 128*c1, {c0: 128, c1: 64})]
buf149_buf150.met_dependencies = []
buf149_buf150.users = None
    buf149_buf150.snodes[0] =
    buf149: SchedulerNode(ComputedBuffer)
    buf149.writes = [MemoryDep('buf149', c0, {c0: 128})]
    buf149.unmet_dependencies = [MemoryDep('buf148', c0 + 128*c1, {c0: 128, c1: 64})]
    buf149.met_dependencies = []
    buf149.users = [NodeUser(node=SchedulerNode(name='buf153'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf155'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf149.group.device = cpu
    buf149.group.iteration = ((128,), (64,))
    buf149.sizes = ([128], [64])
    class buf149_loop_body:
        var_ranges = {z0: 128, z1: 64}
        index0 = z0 + 128*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf148', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf149', get_index_1, getitem)
            return store_reduction
    buf149_buf150.snodes[1] =
    buf150: SchedulerNode(ComputedBuffer)
    buf150.writes = [MemoryDep('buf150', c0, {c0: 128})]
    buf150.unmet_dependencies = [MemoryDep('buf148', c0 + 128*c1, {c0: 128, c1: 64})]
    buf150.met_dependencies = []
    buf150.users = [NodeUser(node=SchedulerNode(name='buf152'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf154'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf155'), can_inplace=False, is_weak=False)]
    buf150.group.device = cpu
    buf150.group.iteration = ((128,), (64,))
    buf150.sizes = ([128], [64])
    class buf150_loop_body:
        var_ranges = {z0: 128, z1: 64}
        index0 = z0 + 128*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf148', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf150', get_index_1, getitem_1)
            return store_reduction


buf152_buf154: FusedSchedulerNode(NoneType)
buf152_buf154.writes = [MemoryDep('buf152', c0, {c0: 128}), MemoryDep('buf154', c0, {c0: 128})]
buf152_buf154.unmet_dependencies = [MemoryDep('buf150', c0, {c0: 128})]
buf152_buf154.met_dependencies = [MemoryDep('primals_211', c0, {c0: 128})]
buf152_buf154.users = None
    buf152_buf154.snodes[0] =
    buf152: SchedulerNode(ComputedBuffer)
    buf152.writes = [MemoryDep('buf152', c0, {c0: 128})]
    buf152.unmet_dependencies = [MemoryDep('buf150', c0, {c0: 128})]
    buf152.met_dependencies = []
    buf152.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf152.group.device = cpu
    buf152.group.iteration = ((128,), ())
    buf152.sizes = ([128], [])
    class buf152_loop_body:
        var_ranges = {z0: 128}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf150', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf152', get_index_1, rsqrt, None)
            return store
    buf152_buf154.snodes[1] =
    buf154: SchedulerNode(ComputedBuffer)
    buf154.writes = [MemoryDep('buf154', c0, {c0: 128})]
    buf154.unmet_dependencies = [MemoryDep('buf150', c0, {c0: 128})]
    buf154.met_dependencies = [MemoryDep('primals_211', c0, {c0: 128})]
    buf154.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf154.group.device = cpu
    buf154.group.iteration = ((128,), ())
    buf154.sizes = ([128], [])
    class buf154_loop_body:
        var_ranges = {z0: 128}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf150', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0158730158730158, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_211', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf154', get_index_2, add, None)
            return store


buf153: SchedulerNode(ComputedBuffer)
buf153.writes = [MemoryDep('buf153', c0, {c0: 128})]
buf153.unmet_dependencies = [MemoryDep('buf149', c0, {c0: 128})]
buf153.met_dependencies = [MemoryDep('primals_210', c0, {c0: 128})]
buf153.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf153.group.device = cpu
buf153.group.iteration = ((128,), ())
buf153.sizes = ([128], [])
class buf153_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_210', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf153', get_index_2, add, None)
        return store


buf155: SchedulerNode(ComputedBuffer)
buf155.writes = [MemoryDep('buf155', c0, {c0: 8192})]
buf155.unmet_dependencies = 
    [   MemoryDep('buf148', c0, {c0: 8192}),
        MemoryDep('buf149', c1, {c0: 64, c1: 128}),
        MemoryDep('buf150', c1, {c0: 64, c1: 128})]
buf155.met_dependencies = 
    [   MemoryDep('primals_50', c1, {c0: 64, c1: 128}),
        MemoryDep('primals_51', c1, {c0: 64, c1: 128})]
buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf156'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf155.group.device = cpu
buf155.group.iteration = ((64, 128), ())
buf155.sizes = ([64, 128], [])
class buf155_loop_body:
    var_ranges = {z0: 64, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf149', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf150', get_index_2)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_50', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_51', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf155', get_index_5, relu, None)
        return store


buf156: ExternKernelSchedulerNode(ExternKernelAlloc)
buf156.writes = [StarDep(name='buf156')]
buf156.unmet_dependencies = [StarDep(name='buf155')]
buf156.met_dependencies = [StarDep(name='primals_52')]
buf156.users = [NodeUser(node=SchedulerNode(name='buf157'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf158'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf159'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf163'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf156.node.kernel = extern_kernels.convolution


buf157_buf158: FusedSchedulerNode(NoneType)
buf157_buf158.writes = [MemoryDep('buf157', c0, {c0: 512}), MemoryDep('buf158', c0, {c0: 512})]
buf157_buf158.unmet_dependencies = [MemoryDep('buf156', c0 + 512*c1, {c0: 512, c1: 64})]
buf157_buf158.met_dependencies = []
buf157_buf158.users = None
    buf157_buf158.snodes[0] =
    buf157: SchedulerNode(ComputedBuffer)
    buf157.writes = [MemoryDep('buf157', c0, {c0: 512})]
    buf157.unmet_dependencies = [MemoryDep('buf156', c0 + 512*c1, {c0: 512, c1: 64})]
    buf157.met_dependencies = []
    buf157.users = [NodeUser(node=SchedulerNode(name='buf161'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf163'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf157.group.device = cpu
    buf157.group.iteration = ((512,), (64,))
    buf157.sizes = ([512], [64])
    class buf157_loop_body:
        var_ranges = {z0: 512, z1: 64}
        index0 = z0 + 512*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf156', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf157', get_index_1, getitem)
            return store_reduction
    buf157_buf158.snodes[1] =
    buf158: SchedulerNode(ComputedBuffer)
    buf158.writes = [MemoryDep('buf158', c0, {c0: 512})]
    buf158.unmet_dependencies = [MemoryDep('buf156', c0 + 512*c1, {c0: 512, c1: 64})]
    buf158.met_dependencies = []
    buf158.users = [NodeUser(node=SchedulerNode(name='buf160'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf162'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf163'), can_inplace=False, is_weak=False)]
    buf158.group.device = cpu
    buf158.group.iteration = ((512,), (64,))
    buf158.sizes = ([512], [64])
    class buf158_loop_body:
        var_ranges = {z0: 512, z1: 64}
        index0 = z0 + 512*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf156', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf158', get_index_1, getitem_1)
            return store_reduction


buf160_buf162: FusedSchedulerNode(NoneType)
buf160_buf162.writes = [MemoryDep('buf160', c0, {c0: 512}), MemoryDep('buf162', c0, {c0: 512})]
buf160_buf162.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 512})]
buf160_buf162.met_dependencies = [MemoryDep('primals_214', c0, {c0: 512})]
buf160_buf162.users = None
    buf160_buf162.snodes[0] =
    buf160: SchedulerNode(ComputedBuffer)
    buf160.writes = [MemoryDep('buf160', c0, {c0: 512})]
    buf160.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 512})]
    buf160.met_dependencies = []
    buf160.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf160.group.device = cpu
    buf160.group.iteration = ((512,), ())
    buf160.sizes = ([512], [])
    class buf160_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf158', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf160', get_index_1, rsqrt, None)
            return store
    buf160_buf162.snodes[1] =
    buf162: SchedulerNode(ComputedBuffer)
    buf162.writes = [MemoryDep('buf162', c0, {c0: 512})]
    buf162.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 512})]
    buf162.met_dependencies = [MemoryDep('primals_214', c0, {c0: 512})]
    buf162.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf162.group.device = cpu
    buf162.group.iteration = ((512,), ())
    buf162.sizes = ([512], [])
    class buf162_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf158', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0158730158730158, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_214', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf162', get_index_2, add, None)
            return store


buf161: SchedulerNode(ComputedBuffer)
buf161.writes = [MemoryDep('buf161', c0, {c0: 512})]
buf161.unmet_dependencies = [MemoryDep('buf157', c0, {c0: 512})]
buf161.met_dependencies = [MemoryDep('primals_213', c0, {c0: 512})]
buf161.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf161.group.device = cpu
buf161.group.iteration = ((512,), ())
buf161.sizes = ([512], [])
class buf161_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_213', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf161', get_index_2, add, None)
        return store


buf163: SchedulerNode(ComputedBuffer)
buf163.writes = [MemoryDep('buf163', c0, {c0: 32768})]
buf163.unmet_dependencies = 
    [   MemoryDep('buf139', c0, {c0: 32768}),
        MemoryDep('buf156', c0, {c0: 32768}),
        MemoryDep('buf157', c1, {c0: 64, c1: 512}),
        MemoryDep('buf158', c1, {c0: 64, c1: 512})]
buf163.met_dependencies = 
    [   MemoryDep('primals_53', c1, {c0: 64, c1: 512}),
        MemoryDep('primals_54', c1, {c0: 64, c1: 512})]
buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf164'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf187'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf163.group.device = cpu
buf163.group.iteration = ((64, 512), ())
buf163.sizes = ([64, 512], [])
class buf163_loop_body:
    var_ranges = {z0: 64, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf157', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf158', get_index_2)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_53', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_54', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf139', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf163', get_index_6, relu, None)
        return store


buf164: ExternKernelSchedulerNode(ExternKernelAlloc)
buf164.writes = [StarDep(name='buf164')]
buf164.unmet_dependencies = [StarDep(name='buf163')]
buf164.met_dependencies = [StarDep(name='primals_55')]
buf164.users = [NodeUser(node=SchedulerNode(name='buf165'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf166'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf167'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf171'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf164.node.kernel = extern_kernels.convolution


buf165_buf166: FusedSchedulerNode(NoneType)
buf165_buf166.writes = [MemoryDep('buf165', c0, {c0: 128}), MemoryDep('buf166', c0, {c0: 128})]
buf165_buf166.unmet_dependencies = [MemoryDep('buf164', c0 + 128*c1, {c0: 128, c1: 64})]
buf165_buf166.met_dependencies = []
buf165_buf166.users = None
    buf165_buf166.snodes[0] =
    buf165: SchedulerNode(ComputedBuffer)
    buf165.writes = [MemoryDep('buf165', c0, {c0: 128})]
    buf165.unmet_dependencies = [MemoryDep('buf164', c0 + 128*c1, {c0: 128, c1: 64})]
    buf165.met_dependencies = []
    buf165.users = [NodeUser(node=SchedulerNode(name='buf169'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf171'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf165.group.device = cpu
    buf165.group.iteration = ((128,), (64,))
    buf165.sizes = ([128], [64])
    class buf165_loop_body:
        var_ranges = {z0: 128, z1: 64}
        index0 = z0 + 128*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf164', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf165', get_index_1, getitem)
            return store_reduction
    buf165_buf166.snodes[1] =
    buf166: SchedulerNode(ComputedBuffer)
    buf166.writes = [MemoryDep('buf166', c0, {c0: 128})]
    buf166.unmet_dependencies = [MemoryDep('buf164', c0 + 128*c1, {c0: 128, c1: 64})]
    buf166.met_dependencies = []
    buf166.users = [NodeUser(node=SchedulerNode(name='buf168'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf170'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf171'), can_inplace=False, is_weak=False)]
    buf166.group.device = cpu
    buf166.group.iteration = ((128,), (64,))
    buf166.sizes = ([128], [64])
    class buf166_loop_body:
        var_ranges = {z0: 128, z1: 64}
        index0 = z0 + 128*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf164', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf166', get_index_1, getitem_1)
            return store_reduction


buf168_buf170: FusedSchedulerNode(NoneType)
buf168_buf170.writes = [MemoryDep('buf168', c0, {c0: 128}), MemoryDep('buf170', c0, {c0: 128})]
buf168_buf170.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 128})]
buf168_buf170.met_dependencies = [MemoryDep('primals_217', c0, {c0: 128})]
buf168_buf170.users = None
    buf168_buf170.snodes[0] =
    buf168: SchedulerNode(ComputedBuffer)
    buf168.writes = [MemoryDep('buf168', c0, {c0: 128})]
    buf168.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 128})]
    buf168.met_dependencies = []
    buf168.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf168.group.device = cpu
    buf168.group.iteration = ((128,), ())
    buf168.sizes = ([128], [])
    class buf168_loop_body:
        var_ranges = {z0: 128}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf166', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf168', get_index_1, rsqrt, None)
            return store
    buf168_buf170.snodes[1] =
    buf170: SchedulerNode(ComputedBuffer)
    buf170.writes = [MemoryDep('buf170', c0, {c0: 128})]
    buf170.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 128})]
    buf170.met_dependencies = [MemoryDep('primals_217', c0, {c0: 128})]
    buf170.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf170.group.device = cpu
    buf170.group.iteration = ((128,), ())
    buf170.sizes = ([128], [])
    class buf170_loop_body:
        var_ranges = {z0: 128}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf166', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0158730158730158, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_217', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf170', get_index_2, add, None)
            return store


buf169: SchedulerNode(ComputedBuffer)
buf169.writes = [MemoryDep('buf169', c0, {c0: 128})]
buf169.unmet_dependencies = [MemoryDep('buf165', c0, {c0: 128})]
buf169.met_dependencies = [MemoryDep('primals_216', c0, {c0: 128})]
buf169.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf169.group.device = cpu
buf169.group.iteration = ((128,), ())
buf169.sizes = ([128], [])
class buf169_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_216', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf169', get_index_2, add, None)
        return store


buf171: SchedulerNode(ComputedBuffer)
buf171.writes = [MemoryDep('buf171', c0, {c0: 8192})]
buf171.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 8192}),
        MemoryDep('buf165', c1, {c0: 64, c1: 128}),
        MemoryDep('buf166', c1, {c0: 64, c1: 128})]
buf171.met_dependencies = 
    [   MemoryDep('primals_56', c1, {c0: 64, c1: 128}),
        MemoryDep('primals_57', c1, {c0: 64, c1: 128})]
buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf172'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf171.group.device = cpu
buf171.group.iteration = ((64, 128), ())
buf171.sizes = ([64, 128], [])
class buf171_loop_body:
    var_ranges = {z0: 64, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf165', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf166', get_index_2)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_56', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_57', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf171', get_index_5, relu, None)
        return store


buf172: ExternKernelSchedulerNode(ExternKernelAlloc)
buf172.writes = [StarDep(name='buf172')]
buf172.unmet_dependencies = [StarDep(name='buf171'), StarDep(name='buf6')]
buf172.met_dependencies = []
buf172.users = [NodeUser(node=SchedulerNode(name='buf173'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf174'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf175'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf179'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf172.node.kernel = extern_kernels.convolution


buf173_buf174: FusedSchedulerNode(NoneType)
buf173_buf174.writes = [MemoryDep('buf173', c0, {c0: 128}), MemoryDep('buf174', c0, {c0: 128})]
buf173_buf174.unmet_dependencies = [MemoryDep('buf172', c0 + 128*c1, {c0: 128, c1: 64})]
buf173_buf174.met_dependencies = []
buf173_buf174.users = None
    buf173_buf174.snodes[0] =
    buf173: SchedulerNode(ComputedBuffer)
    buf173.writes = [MemoryDep('buf173', c0, {c0: 128})]
    buf173.unmet_dependencies = [MemoryDep('buf172', c0 + 128*c1, {c0: 128, c1: 64})]
    buf173.met_dependencies = []
    buf173.users = [NodeUser(node=SchedulerNode(name='buf177'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf179'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf173.group.device = cpu
    buf173.group.iteration = ((128,), (64,))
    buf173.sizes = ([128], [64])
    class buf173_loop_body:
        var_ranges = {z0: 128, z1: 64}
        index0 = z0 + 128*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf172', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf173', get_index_1, getitem)
            return store_reduction
    buf173_buf174.snodes[1] =
    buf174: SchedulerNode(ComputedBuffer)
    buf174.writes = [MemoryDep('buf174', c0, {c0: 128})]
    buf174.unmet_dependencies = [MemoryDep('buf172', c0 + 128*c1, {c0: 128, c1: 64})]
    buf174.met_dependencies = []
    buf174.users = [NodeUser(node=SchedulerNode(name='buf176'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf178'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf179'), can_inplace=False, is_weak=False)]
    buf174.group.device = cpu
    buf174.group.iteration = ((128,), (64,))
    buf174.sizes = ([128], [64])
    class buf174_loop_body:
        var_ranges = {z0: 128, z1: 64}
        index0 = z0 + 128*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf172', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf174', get_index_1, getitem_1)
            return store_reduction


buf176_buf178: FusedSchedulerNode(NoneType)
buf176_buf178.writes = [MemoryDep('buf176', c0, {c0: 128}), MemoryDep('buf178', c0, {c0: 128})]
buf176_buf178.unmet_dependencies = [MemoryDep('buf174', c0, {c0: 128})]
buf176_buf178.met_dependencies = [MemoryDep('primals_220', c0, {c0: 128})]
buf176_buf178.users = None
    buf176_buf178.snodes[0] =
    buf176: SchedulerNode(ComputedBuffer)
    buf176.writes = [MemoryDep('buf176', c0, {c0: 128})]
    buf176.unmet_dependencies = [MemoryDep('buf174', c0, {c0: 128})]
    buf176.met_dependencies = []
    buf176.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf176.group.device = cpu
    buf176.group.iteration = ((128,), ())
    buf176.sizes = ([128], [])
    class buf176_loop_body:
        var_ranges = {z0: 128}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf174', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf176', get_index_1, rsqrt, None)
            return store
    buf176_buf178.snodes[1] =
    buf178: SchedulerNode(ComputedBuffer)
    buf178.writes = [MemoryDep('buf178', c0, {c0: 128})]
    buf178.unmet_dependencies = [MemoryDep('buf174', c0, {c0: 128})]
    buf178.met_dependencies = [MemoryDep('primals_220', c0, {c0: 128})]
    buf178.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf178.group.device = cpu
    buf178.group.iteration = ((128,), ())
    buf178.sizes = ([128], [])
    class buf178_loop_body:
        var_ranges = {z0: 128}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf174', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0158730158730158, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_220', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf178', get_index_2, add, None)
            return store


buf177: SchedulerNode(ComputedBuffer)
buf177.writes = [MemoryDep('buf177', c0, {c0: 128})]
buf177.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 128})]
buf177.met_dependencies = [MemoryDep('primals_219', c0, {c0: 128})]
buf177.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf177.group.device = cpu
buf177.group.iteration = ((128,), ())
buf177.sizes = ([128], [])
class buf177_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_219', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf177', get_index_2, add, None)
        return store


buf179: SchedulerNode(ComputedBuffer)
buf179.writes = [MemoryDep('buf179', c0, {c0: 8192})]
buf179.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 8192}),
        MemoryDep('buf173', c1, {c0: 64, c1: 128}),
        MemoryDep('buf174', c1, {c0: 64, c1: 128})]
buf179.met_dependencies = 
    [   MemoryDep('primals_59', c1, {c0: 64, c1: 128}),
        MemoryDep('primals_60', c1, {c0: 64, c1: 128})]
buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf180'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf179.group.device = cpu
buf179.group.iteration = ((64, 128), ())
buf179.sizes = ([64, 128], [])
class buf179_loop_body:
    var_ranges = {z0: 64, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf173', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf174', get_index_2)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_59', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_60', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf179', get_index_5, relu, None)
        return store


buf180: ExternKernelSchedulerNode(ExternKernelAlloc)
buf180.writes = [StarDep(name='buf180')]
buf180.unmet_dependencies = [StarDep(name='buf179')]
buf180.met_dependencies = [StarDep(name='primals_61')]
buf180.users = [NodeUser(node=SchedulerNode(name='buf181'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf182'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf183'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf187'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf180.node.kernel = extern_kernels.convolution


buf181_buf182: FusedSchedulerNode(NoneType)
buf181_buf182.writes = [MemoryDep('buf181', c0, {c0: 512}), MemoryDep('buf182', c0, {c0: 512})]
buf181_buf182.unmet_dependencies = [MemoryDep('buf180', c0 + 512*c1, {c0: 512, c1: 64})]
buf181_buf182.met_dependencies = []
buf181_buf182.users = None
    buf181_buf182.snodes[0] =
    buf181: SchedulerNode(ComputedBuffer)
    buf181.writes = [MemoryDep('buf181', c0, {c0: 512})]
    buf181.unmet_dependencies = [MemoryDep('buf180', c0 + 512*c1, {c0: 512, c1: 64})]
    buf181.met_dependencies = []
    buf181.users = [NodeUser(node=SchedulerNode(name='buf185'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf187'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf181.group.device = cpu
    buf181.group.iteration = ((512,), (64,))
    buf181.sizes = ([512], [64])
    class buf181_loop_body:
        var_ranges = {z0: 512, z1: 64}
        index0 = z0 + 512*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf180', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf181', get_index_1, getitem)
            return store_reduction
    buf181_buf182.snodes[1] =
    buf182: SchedulerNode(ComputedBuffer)
    buf182.writes = [MemoryDep('buf182', c0, {c0: 512})]
    buf182.unmet_dependencies = [MemoryDep('buf180', c0 + 512*c1, {c0: 512, c1: 64})]
    buf182.met_dependencies = []
    buf182.users = [NodeUser(node=SchedulerNode(name='buf184'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf186'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf187'), can_inplace=False, is_weak=False)]
    buf182.group.device = cpu
    buf182.group.iteration = ((512,), (64,))
    buf182.sizes = ([512], [64])
    class buf182_loop_body:
        var_ranges = {z0: 512, z1: 64}
        index0 = z0 + 512*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf180', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf182', get_index_1, getitem_1)
            return store_reduction


buf184_buf186: FusedSchedulerNode(NoneType)
buf184_buf186.writes = [MemoryDep('buf184', c0, {c0: 512}), MemoryDep('buf186', c0, {c0: 512})]
buf184_buf186.unmet_dependencies = [MemoryDep('buf182', c0, {c0: 512})]
buf184_buf186.met_dependencies = [MemoryDep('primals_223', c0, {c0: 512})]
buf184_buf186.users = None
    buf184_buf186.snodes[0] =
    buf184: SchedulerNode(ComputedBuffer)
    buf184.writes = [MemoryDep('buf184', c0, {c0: 512})]
    buf184.unmet_dependencies = [MemoryDep('buf182', c0, {c0: 512})]
    buf184.met_dependencies = []
    buf184.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf184.group.device = cpu
    buf184.group.iteration = ((512,), ())
    buf184.sizes = ([512], [])
    class buf184_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf182', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf184', get_index_1, rsqrt, None)
            return store
    buf184_buf186.snodes[1] =
    buf186: SchedulerNode(ComputedBuffer)
    buf186.writes = [MemoryDep('buf186', c0, {c0: 512})]
    buf186.unmet_dependencies = [MemoryDep('buf182', c0, {c0: 512})]
    buf186.met_dependencies = [MemoryDep('primals_223', c0, {c0: 512})]
    buf186.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf186.group.device = cpu
    buf186.group.iteration = ((512,), ())
    buf186.sizes = ([512], [])
    class buf186_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf182', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0158730158730158, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_223', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf186', get_index_2, add, None)
            return store


buf185: SchedulerNode(ComputedBuffer)
buf185.writes = [MemoryDep('buf185', c0, {c0: 512})]
buf185.unmet_dependencies = [MemoryDep('buf181', c0, {c0: 512})]
buf185.met_dependencies = [MemoryDep('primals_222', c0, {c0: 512})]
buf185.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf185.group.device = cpu
buf185.group.iteration = ((512,), ())
buf185.sizes = ([512], [])
class buf185_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_222', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf185', get_index_2, add, None)
        return store


buf187: SchedulerNode(ComputedBuffer)
buf187.writes = [MemoryDep('buf187', c0, {c0: 32768})]
buf187.unmet_dependencies = 
    [   MemoryDep('buf163', c0, {c0: 32768}),
        MemoryDep('buf180', c0, {c0: 32768}),
        MemoryDep('buf181', c1, {c0: 64, c1: 512}),
        MemoryDep('buf182', c1, {c0: 64, c1: 512})]
buf187.met_dependencies = 
    [   MemoryDep('primals_62', c1, {c0: 64, c1: 512}),
        MemoryDep('primals_63', c1, {c0: 64, c1: 512})]
buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf188'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf211'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf187.group.device = cpu
buf187.group.iteration = ((64, 512), ())
buf187.sizes = ([64, 512], [])
class buf187_loop_body:
    var_ranges = {z0: 64, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf181', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf182', get_index_2)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_62', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_63', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf163', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf187', get_index_6, relu, None)
        return store


buf188: ExternKernelSchedulerNode(ExternKernelAlloc)
buf188.writes = [StarDep(name='buf188')]
buf188.unmet_dependencies = [StarDep(name='buf187')]
buf188.met_dependencies = [StarDep(name='primals_64')]
buf188.users = [NodeUser(node=SchedulerNode(name='buf189'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf190'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf191'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf195'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf188.node.kernel = extern_kernels.convolution


buf189_buf190: FusedSchedulerNode(NoneType)
buf189_buf190.writes = [MemoryDep('buf189', c0, {c0: 128}), MemoryDep('buf190', c0, {c0: 128})]
buf189_buf190.unmet_dependencies = [MemoryDep('buf188', c0 + 128*c1, {c0: 128, c1: 64})]
buf189_buf190.met_dependencies = []
buf189_buf190.users = None
    buf189_buf190.snodes[0] =
    buf189: SchedulerNode(ComputedBuffer)
    buf189.writes = [MemoryDep('buf189', c0, {c0: 128})]
    buf189.unmet_dependencies = [MemoryDep('buf188', c0 + 128*c1, {c0: 128, c1: 64})]
    buf189.met_dependencies = []
    buf189.users = [NodeUser(node=SchedulerNode(name='buf193'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf195'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf189.group.device = cpu
    buf189.group.iteration = ((128,), (64,))
    buf189.sizes = ([128], [64])
    class buf189_loop_body:
        var_ranges = {z0: 128, z1: 64}
        index0 = z0 + 128*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf188', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf189', get_index_1, getitem)
            return store_reduction
    buf189_buf190.snodes[1] =
    buf190: SchedulerNode(ComputedBuffer)
    buf190.writes = [MemoryDep('buf190', c0, {c0: 128})]
    buf190.unmet_dependencies = [MemoryDep('buf188', c0 + 128*c1, {c0: 128, c1: 64})]
    buf190.met_dependencies = []
    buf190.users = [NodeUser(node=SchedulerNode(name='buf192'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf194'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf195'), can_inplace=False, is_weak=False)]
    buf190.group.device = cpu
    buf190.group.iteration = ((128,), (64,))
    buf190.sizes = ([128], [64])
    class buf190_loop_body:
        var_ranges = {z0: 128, z1: 64}
        index0 = z0 + 128*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf188', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf190', get_index_1, getitem_1)
            return store_reduction


buf192_buf194: FusedSchedulerNode(NoneType)
buf192_buf194.writes = [MemoryDep('buf192', c0, {c0: 128}), MemoryDep('buf194', c0, {c0: 128})]
buf192_buf194.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 128})]
buf192_buf194.met_dependencies = [MemoryDep('primals_226', c0, {c0: 128})]
buf192_buf194.users = None
    buf192_buf194.snodes[0] =
    buf192: SchedulerNode(ComputedBuffer)
    buf192.writes = [MemoryDep('buf192', c0, {c0: 128})]
    buf192.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 128})]
    buf192.met_dependencies = []
    buf192.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf192.group.device = cpu
    buf192.group.iteration = ((128,), ())
    buf192.sizes = ([128], [])
    class buf192_loop_body:
        var_ranges = {z0: 128}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf190', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf192', get_index_1, rsqrt, None)
            return store
    buf192_buf194.snodes[1] =
    buf194: SchedulerNode(ComputedBuffer)
    buf194.writes = [MemoryDep('buf194', c0, {c0: 128})]
    buf194.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 128})]
    buf194.met_dependencies = [MemoryDep('primals_226', c0, {c0: 128})]
    buf194.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf194.group.device = cpu
    buf194.group.iteration = ((128,), ())
    buf194.sizes = ([128], [])
    class buf194_loop_body:
        var_ranges = {z0: 128}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf190', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0158730158730158, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_226', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf194', get_index_2, add, None)
            return store


buf193: SchedulerNode(ComputedBuffer)
buf193.writes = [MemoryDep('buf193', c0, {c0: 128})]
buf193.unmet_dependencies = [MemoryDep('buf189', c0, {c0: 128})]
buf193.met_dependencies = [MemoryDep('primals_225', c0, {c0: 128})]
buf193.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf193.group.device = cpu
buf193.group.iteration = ((128,), ())
buf193.sizes = ([128], [])
class buf193_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_225', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf193', get_index_2, add, None)
        return store


buf195: SchedulerNode(ComputedBuffer)
buf195.writes = [MemoryDep('buf195', c0, {c0: 8192})]
buf195.unmet_dependencies = 
    [   MemoryDep('buf188', c0, {c0: 8192}),
        MemoryDep('buf189', c1, {c0: 64, c1: 128}),
        MemoryDep('buf190', c1, {c0: 64, c1: 128})]
buf195.met_dependencies = 
    [   MemoryDep('primals_65', c1, {c0: 64, c1: 128}),
        MemoryDep('primals_66', c1, {c0: 64, c1: 128})]
buf195.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf196'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf195.group.device = cpu
buf195.group.iteration = ((64, 128), ())
buf195.sizes = ([64, 128], [])
class buf195_loop_body:
    var_ranges = {z0: 64, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf189', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf190', get_index_2)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_65', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_66', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf195', get_index_5, relu, None)
        return store


buf196: ExternKernelSchedulerNode(ExternKernelAlloc)
buf196.writes = [StarDep(name='buf196')]
buf196.unmet_dependencies = [StarDep(name='buf195'), StarDep(name='buf7')]
buf196.met_dependencies = []
buf196.users = [NodeUser(node=SchedulerNode(name='buf197'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf198'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf199'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf203'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf196.node.kernel = extern_kernels.convolution


buf197_buf198: FusedSchedulerNode(NoneType)
buf197_buf198.writes = [MemoryDep('buf197', c0, {c0: 128}), MemoryDep('buf198', c0, {c0: 128})]
buf197_buf198.unmet_dependencies = [MemoryDep('buf196', c0 + 128*c1, {c0: 128, c1: 64})]
buf197_buf198.met_dependencies = []
buf197_buf198.users = None
    buf197_buf198.snodes[0] =
    buf197: SchedulerNode(ComputedBuffer)
    buf197.writes = [MemoryDep('buf197', c0, {c0: 128})]
    buf197.unmet_dependencies = [MemoryDep('buf196', c0 + 128*c1, {c0: 128, c1: 64})]
    buf197.met_dependencies = []
    buf197.users = [NodeUser(node=SchedulerNode(name='buf201'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf203'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf197.group.device = cpu
    buf197.group.iteration = ((128,), (64,))
    buf197.sizes = ([128], [64])
    class buf197_loop_body:
        var_ranges = {z0: 128, z1: 64}
        index0 = z0 + 128*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf196', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf197', get_index_1, getitem)
            return store_reduction
    buf197_buf198.snodes[1] =
    buf198: SchedulerNode(ComputedBuffer)
    buf198.writes = [MemoryDep('buf198', c0, {c0: 128})]
    buf198.unmet_dependencies = [MemoryDep('buf196', c0 + 128*c1, {c0: 128, c1: 64})]
    buf198.met_dependencies = []
    buf198.users = [NodeUser(node=SchedulerNode(name='buf200'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf202'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf203'), can_inplace=False, is_weak=False)]
    buf198.group.device = cpu
    buf198.group.iteration = ((128,), (64,))
    buf198.sizes = ([128], [64])
    class buf198_loop_body:
        var_ranges = {z0: 128, z1: 64}
        index0 = z0 + 128*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf196', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf198', get_index_1, getitem_1)
            return store_reduction


buf200_buf202: FusedSchedulerNode(NoneType)
buf200_buf202.writes = [MemoryDep('buf200', c0, {c0: 128}), MemoryDep('buf202', c0, {c0: 128})]
buf200_buf202.unmet_dependencies = [MemoryDep('buf198', c0, {c0: 128})]
buf200_buf202.met_dependencies = [MemoryDep('primals_229', c0, {c0: 128})]
buf200_buf202.users = None
    buf200_buf202.snodes[0] =
    buf200: SchedulerNode(ComputedBuffer)
    buf200.writes = [MemoryDep('buf200', c0, {c0: 128})]
    buf200.unmet_dependencies = [MemoryDep('buf198', c0, {c0: 128})]
    buf200.met_dependencies = []
    buf200.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf200.group.device = cpu
    buf200.group.iteration = ((128,), ())
    buf200.sizes = ([128], [])
    class buf200_loop_body:
        var_ranges = {z0: 128}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf198', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf200', get_index_1, rsqrt, None)
            return store
    buf200_buf202.snodes[1] =
    buf202: SchedulerNode(ComputedBuffer)
    buf202.writes = [MemoryDep('buf202', c0, {c0: 128})]
    buf202.unmet_dependencies = [MemoryDep('buf198', c0, {c0: 128})]
    buf202.met_dependencies = [MemoryDep('primals_229', c0, {c0: 128})]
    buf202.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf202.group.device = cpu
    buf202.group.iteration = ((128,), ())
    buf202.sizes = ([128], [])
    class buf202_loop_body:
        var_ranges = {z0: 128}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf198', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0158730158730158, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_229', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf202', get_index_2, add, None)
            return store


buf201: SchedulerNode(ComputedBuffer)
buf201.writes = [MemoryDep('buf201', c0, {c0: 128})]
buf201.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 128})]
buf201.met_dependencies = [MemoryDep('primals_228', c0, {c0: 128})]
buf201.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf201.group.device = cpu
buf201.group.iteration = ((128,), ())
buf201.sizes = ([128], [])
class buf201_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_228', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf201', get_index_2, add, None)
        return store


buf203: SchedulerNode(ComputedBuffer)
buf203.writes = [MemoryDep('buf203', c0, {c0: 8192})]
buf203.unmet_dependencies = 
    [   MemoryDep('buf196', c0, {c0: 8192}),
        MemoryDep('buf197', c1, {c0: 64, c1: 128}),
        MemoryDep('buf198', c1, {c0: 64, c1: 128})]
buf203.met_dependencies = 
    [   MemoryDep('primals_68', c1, {c0: 64, c1: 128}),
        MemoryDep('primals_69', c1, {c0: 64, c1: 128})]
buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf204'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf203.group.device = cpu
buf203.group.iteration = ((64, 128), ())
buf203.sizes = ([64, 128], [])
class buf203_loop_body:
    var_ranges = {z0: 64, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf197', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf198', get_index_2)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_68', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_69', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf203', get_index_5, relu, None)
        return store


buf204: ExternKernelSchedulerNode(ExternKernelAlloc)
buf204.writes = [StarDep(name='buf204')]
buf204.unmet_dependencies = [StarDep(name='buf203')]
buf204.met_dependencies = [StarDep(name='primals_70')]
buf204.users = [NodeUser(node=SchedulerNode(name='buf205'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf206'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf207'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf211'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf204.node.kernel = extern_kernels.convolution


buf205_buf206: FusedSchedulerNode(NoneType)
buf205_buf206.writes = [MemoryDep('buf205', c0, {c0: 512}), MemoryDep('buf206', c0, {c0: 512})]
buf205_buf206.unmet_dependencies = [MemoryDep('buf204', c0 + 512*c1, {c0: 512, c1: 64})]
buf205_buf206.met_dependencies = []
buf205_buf206.users = None
    buf205_buf206.snodes[0] =
    buf205: SchedulerNode(ComputedBuffer)
    buf205.writes = [MemoryDep('buf205', c0, {c0: 512})]
    buf205.unmet_dependencies = [MemoryDep('buf204', c0 + 512*c1, {c0: 512, c1: 64})]
    buf205.met_dependencies = []
    buf205.users = [NodeUser(node=SchedulerNode(name='buf209'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf211'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf205.group.device = cpu
    buf205.group.iteration = ((512,), (64,))
    buf205.sizes = ([512], [64])
    class buf205_loop_body:
        var_ranges = {z0: 512, z1: 64}
        index0 = z0 + 512*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf204', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf205', get_index_1, getitem)
            return store_reduction
    buf205_buf206.snodes[1] =
    buf206: SchedulerNode(ComputedBuffer)
    buf206.writes = [MemoryDep('buf206', c0, {c0: 512})]
    buf206.unmet_dependencies = [MemoryDep('buf204', c0 + 512*c1, {c0: 512, c1: 64})]
    buf206.met_dependencies = []
    buf206.users = [NodeUser(node=SchedulerNode(name='buf208'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf210'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf211'), can_inplace=False, is_weak=False)]
    buf206.group.device = cpu
    buf206.group.iteration = ((512,), (64,))
    buf206.sizes = ([512], [64])
    class buf206_loop_body:
        var_ranges = {z0: 512, z1: 64}
        index0 = z0 + 512*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf204', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf206', get_index_1, getitem_1)
            return store_reduction


buf208_buf210: FusedSchedulerNode(NoneType)
buf208_buf210.writes = [MemoryDep('buf208', c0, {c0: 512}), MemoryDep('buf210', c0, {c0: 512})]
buf208_buf210.unmet_dependencies = [MemoryDep('buf206', c0, {c0: 512})]
buf208_buf210.met_dependencies = [MemoryDep('primals_232', c0, {c0: 512})]
buf208_buf210.users = None
    buf208_buf210.snodes[0] =
    buf208: SchedulerNode(ComputedBuffer)
    buf208.writes = [MemoryDep('buf208', c0, {c0: 512})]
    buf208.unmet_dependencies = [MemoryDep('buf206', c0, {c0: 512})]
    buf208.met_dependencies = []
    buf208.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf208.group.device = cpu
    buf208.group.iteration = ((512,), ())
    buf208.sizes = ([512], [])
    class buf208_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf206', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf208', get_index_1, rsqrt, None)
            return store
    buf208_buf210.snodes[1] =
    buf210: SchedulerNode(ComputedBuffer)
    buf210.writes = [MemoryDep('buf210', c0, {c0: 512})]
    buf210.unmet_dependencies = [MemoryDep('buf206', c0, {c0: 512})]
    buf210.met_dependencies = [MemoryDep('primals_232', c0, {c0: 512})]
    buf210.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf210.group.device = cpu
    buf210.group.iteration = ((512,), ())
    buf210.sizes = ([512], [])
    class buf210_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf206', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0158730158730158, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_232', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf210', get_index_2, add, None)
            return store


buf209: SchedulerNode(ComputedBuffer)
buf209.writes = [MemoryDep('buf209', c0, {c0: 512})]
buf209.unmet_dependencies = [MemoryDep('buf205', c0, {c0: 512})]
buf209.met_dependencies = [MemoryDep('primals_231', c0, {c0: 512})]
buf209.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf209.group.device = cpu
buf209.group.iteration = ((512,), ())
buf209.sizes = ([512], [])
class buf209_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_231', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf209', get_index_2, add, None)
        return store


buf211: SchedulerNode(ComputedBuffer)
buf211.writes = [MemoryDep('buf211', c0, {c0: 32768})]
buf211.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 32768}),
        MemoryDep('buf204', c0, {c0: 32768}),
        MemoryDep('buf205', c1, {c0: 64, c1: 512}),
        MemoryDep('buf206', c1, {c0: 64, c1: 512})]
buf211.met_dependencies = 
    [   MemoryDep('primals_71', c1, {c0: 64, c1: 512}),
        MemoryDep('primals_72', c1, {c0: 64, c1: 512})]
buf211.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf212'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf235'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf211.group.device = cpu
buf211.group.iteration = ((64, 512), ())
buf211.sizes = ([64, 512], [])
class buf211_loop_body:
    var_ranges = {z0: 64, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf205', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf206', get_index_2)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_71', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_72', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf187', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf211', get_index_6, relu, None)
        return store


buf212: ExternKernelSchedulerNode(ExternKernelAlloc)
buf212.writes = [StarDep(name='buf212')]
buf212.unmet_dependencies = [StarDep(name='buf211')]
buf212.met_dependencies = [StarDep(name='primals_73')]
buf212.users = [NodeUser(node=SchedulerNode(name='buf213'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf214'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf215'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf219'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf212.node.kernel = extern_kernels.convolution


buf213_buf214: FusedSchedulerNode(NoneType)
buf213_buf214.writes = [MemoryDep('buf213', c0, {c0: 256}), MemoryDep('buf214', c0, {c0: 256})]
buf213_buf214.unmet_dependencies = [MemoryDep('buf212', c0 + 256*c1, {c0: 256, c1: 64})]
buf213_buf214.met_dependencies = []
buf213_buf214.users = None
    buf213_buf214.snodes[0] =
    buf213: SchedulerNode(ComputedBuffer)
    buf213.writes = [MemoryDep('buf213', c0, {c0: 256})]
    buf213.unmet_dependencies = [MemoryDep('buf212', c0 + 256*c1, {c0: 256, c1: 64})]
    buf213.met_dependencies = []
    buf213.users = [NodeUser(node=SchedulerNode(name='buf217'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf219'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf213.group.device = cpu
    buf213.group.iteration = ((256,), (64,))
    buf213.sizes = ([256], [64])
    class buf213_loop_body:
        var_ranges = {z0: 256, z1: 64}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf212', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf213', get_index_1, getitem)
            return store_reduction
    buf213_buf214.snodes[1] =
    buf214: SchedulerNode(ComputedBuffer)
    buf214.writes = [MemoryDep('buf214', c0, {c0: 256})]
    buf214.unmet_dependencies = [MemoryDep('buf212', c0 + 256*c1, {c0: 256, c1: 64})]
    buf214.met_dependencies = []
    buf214.users = [NodeUser(node=SchedulerNode(name='buf216'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf218'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf219'), can_inplace=False, is_weak=False)]
    buf214.group.device = cpu
    buf214.group.iteration = ((256,), (64,))
    buf214.sizes = ([256], [64])
    class buf214_loop_body:
        var_ranges = {z0: 256, z1: 64}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf212', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf214', get_index_1, getitem_1)
            return store_reduction


buf216_buf218: FusedSchedulerNode(NoneType)
buf216_buf218.writes = [MemoryDep('buf216', c0, {c0: 256}), MemoryDep('buf218', c0, {c0: 256})]
buf216_buf218.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 256})]
buf216_buf218.met_dependencies = [MemoryDep('primals_235', c0, {c0: 256})]
buf216_buf218.users = None
    buf216_buf218.snodes[0] =
    buf216: SchedulerNode(ComputedBuffer)
    buf216.writes = [MemoryDep('buf216', c0, {c0: 256})]
    buf216.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 256})]
    buf216.met_dependencies = []
    buf216.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf216.group.device = cpu
    buf216.group.iteration = ((256,), ())
    buf216.sizes = ([256], [])
    class buf216_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf214', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf216', get_index_1, rsqrt, None)
            return store
    buf216_buf218.snodes[1] =
    buf218: SchedulerNode(ComputedBuffer)
    buf218.writes = [MemoryDep('buf218', c0, {c0: 256})]
    buf218.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 256})]
    buf218.met_dependencies = [MemoryDep('primals_235', c0, {c0: 256})]
    buf218.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf218.group.device = cpu
    buf218.group.iteration = ((256,), ())
    buf218.sizes = ([256], [])
    class buf218_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf214', get_index)
            constant = ops.constant(64.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0158730158730158, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_235', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf218', get_index_2, add, None)
            return store


buf217: SchedulerNode(ComputedBuffer)
buf217.writes = [MemoryDep('buf217', c0, {c0: 256})]
buf217.unmet_dependencies = [MemoryDep('buf213', c0, {c0: 256})]
buf217.met_dependencies = [MemoryDep('primals_234', c0, {c0: 256})]
buf217.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf217.group.device = cpu
buf217.group.iteration = ((256,), ())
buf217.sizes = ([256], [])
class buf217_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_234', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf217', get_index_2, add, None)
        return store


buf219: SchedulerNode(ComputedBuffer)
buf219.writes = [MemoryDep('buf219', c0, {c0: 16384})]
buf219.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 16384}),
        MemoryDep('buf213', c1, {c0: 64, c1: 256}),
        MemoryDep('buf214', c1, {c0: 64, c1: 256})]
buf219.met_dependencies = 
    [   MemoryDep('primals_74', c1, {c0: 64, c1: 256}),
        MemoryDep('primals_75', c1, {c0: 64, c1: 256})]
buf219.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf220'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf219.group.device = cpu
buf219.group.iteration = ((64, 256), ())
buf219.sizes = ([64, 256], [])
class buf219_loop_body:
    var_ranges = {z0: 64, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf213', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf214', get_index_2)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_74', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_75', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf219', get_index_5, relu, None)
        return store


buf220: ExternKernelSchedulerNode(ExternKernelAlloc)
buf220.writes = [StarDep(name='buf220')]
buf220.unmet_dependencies = [StarDep(name='buf219'), StarDep(name='buf8')]
buf220.met_dependencies = []
buf220.users = [NodeUser(node=SchedulerNode(name='buf221'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf222'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf223'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf227'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf220.node.kernel = extern_kernels.convolution


buf221_buf222: FusedSchedulerNode(NoneType)
buf221_buf222.writes = [MemoryDep('buf221', c0, {c0: 256}), MemoryDep('buf222', c0, {c0: 256})]
buf221_buf222.unmet_dependencies = [MemoryDep('buf220', c0 + 256*c1, {c0: 256, c1: 16})]
buf221_buf222.met_dependencies = []
buf221_buf222.users = None
    buf221_buf222.snodes[0] =
    buf221: SchedulerNode(ComputedBuffer)
    buf221.writes = [MemoryDep('buf221', c0, {c0: 256})]
    buf221.unmet_dependencies = [MemoryDep('buf220', c0 + 256*c1, {c0: 256, c1: 16})]
    buf221.met_dependencies = []
    buf221.users = [NodeUser(node=SchedulerNode(name='buf225'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf227'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf221.group.device = cpu
    buf221.group.iteration = ((256,), (16,))
    buf221.sizes = ([256], [16])
    class buf221_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf220', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf221', get_index_1, getitem)
            return store_reduction
    buf221_buf222.snodes[1] =
    buf222: SchedulerNode(ComputedBuffer)
    buf222.writes = [MemoryDep('buf222', c0, {c0: 256})]
    buf222.unmet_dependencies = [MemoryDep('buf220', c0 + 256*c1, {c0: 256, c1: 16})]
    buf222.met_dependencies = []
    buf222.users = [NodeUser(node=SchedulerNode(name='buf224'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf226'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf227'), can_inplace=False, is_weak=False)]
    buf222.group.device = cpu
    buf222.group.iteration = ((256,), (16,))
    buf222.sizes = ([256], [16])
    class buf222_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf220', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf222', get_index_1, getitem_1)
            return store_reduction


buf224_buf226: FusedSchedulerNode(NoneType)
buf224_buf226.writes = [MemoryDep('buf224', c0, {c0: 256}), MemoryDep('buf226', c0, {c0: 256})]
buf224_buf226.unmet_dependencies = [MemoryDep('buf222', c0, {c0: 256})]
buf224_buf226.met_dependencies = [MemoryDep('primals_238', c0, {c0: 256})]
buf224_buf226.users = None
    buf224_buf226.snodes[0] =
    buf224: SchedulerNode(ComputedBuffer)
    buf224.writes = [MemoryDep('buf224', c0, {c0: 256})]
    buf224.unmet_dependencies = [MemoryDep('buf222', c0, {c0: 256})]
    buf224.met_dependencies = []
    buf224.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf224.group.device = cpu
    buf224.group.iteration = ((256,), ())
    buf224.sizes = ([256], [])
    class buf224_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf222', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf224', get_index_1, rsqrt, None)
            return store
    buf224_buf226.snodes[1] =
    buf226: SchedulerNode(ComputedBuffer)
    buf226.writes = [MemoryDep('buf226', c0, {c0: 256})]
    buf226.unmet_dependencies = [MemoryDep('buf222', c0, {c0: 256})]
    buf226.met_dependencies = [MemoryDep('primals_238', c0, {c0: 256})]
    buf226.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf226.group.device = cpu
    buf226.group.iteration = ((256,), ())
    buf226.sizes = ([256], [])
    class buf226_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf222', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0666666666666667, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_238', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf226', get_index_2, add, None)
            return store


buf225: SchedulerNode(ComputedBuffer)
buf225.writes = [MemoryDep('buf225', c0, {c0: 256})]
buf225.unmet_dependencies = [MemoryDep('buf221', c0, {c0: 256})]
buf225.met_dependencies = [MemoryDep('primals_237', c0, {c0: 256})]
buf225.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf225.group.device = cpu
buf225.group.iteration = ((256,), ())
buf225.sizes = ([256], [])
class buf225_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_237', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf225', get_index_2, add, None)
        return store


buf227: SchedulerNode(ComputedBuffer)
buf227.writes = [MemoryDep('buf227', c0, {c0: 4096})]
buf227.unmet_dependencies = 
    [   MemoryDep('buf220', c0, {c0: 4096}),
        MemoryDep('buf221', c1, {c0: 16, c1: 256}),
        MemoryDep('buf222', c1, {c0: 16, c1: 256})]
buf227.met_dependencies = 
    [   MemoryDep('primals_77', c1, {c0: 16, c1: 256}),
        MemoryDep('primals_78', c1, {c0: 16, c1: 256})]
buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf228'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf227.group.device = cpu
buf227.group.iteration = ((16, 256), ())
buf227.sizes = ([16, 256], [])
class buf227_loop_body:
    var_ranges = {z0: 16, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf221', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf222', get_index_2)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_77', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_78', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf227', get_index_5, relu, None)
        return store


buf228: ExternKernelSchedulerNode(ExternKernelAlloc)
buf228.writes = [StarDep(name='buf228')]
buf228.unmet_dependencies = [StarDep(name='buf227')]
buf228.met_dependencies = [StarDep(name='primals_79')]
buf228.users = [NodeUser(node=SchedulerNode(name='buf229'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf230'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf231'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf242'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf228.node.kernel = extern_kernels.convolution


buf229_buf230: FusedSchedulerNode(NoneType)
buf229_buf230.writes = [MemoryDep('buf229', c0, {c0: 1024}), MemoryDep('buf230', c0, {c0: 1024})]
buf229_buf230.unmet_dependencies = [MemoryDep('buf228', c0 + 1024*c1, {c0: 1024, c1: 16})]
buf229_buf230.met_dependencies = []
buf229_buf230.users = None
    buf229_buf230.snodes[0] =
    buf229: SchedulerNode(ComputedBuffer)
    buf229.writes = [MemoryDep('buf229', c0, {c0: 1024})]
    buf229.unmet_dependencies = [MemoryDep('buf228', c0 + 1024*c1, {c0: 1024, c1: 16})]
    buf229.met_dependencies = []
    buf229.users = [NodeUser(node=SchedulerNode(name='buf233'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf242'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf229.group.device = cpu
    buf229.group.iteration = ((1024,), (16,))
    buf229.sizes = ([1024], [16])
    class buf229_loop_body:
        var_ranges = {z0: 1024, z1: 16}
        index0 = z0 + 1024*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf228', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf229', get_index_1, getitem)
            return store_reduction
    buf229_buf230.snodes[1] =
    buf230: SchedulerNode(ComputedBuffer)
    buf230.writes = [MemoryDep('buf230', c0, {c0: 1024})]
    buf230.unmet_dependencies = [MemoryDep('buf228', c0 + 1024*c1, {c0: 1024, c1: 16})]
    buf230.met_dependencies = []
    buf230.users = [NodeUser(node=SchedulerNode(name='buf232'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf234'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf242'), can_inplace=False, is_weak=False)]
    buf230.group.device = cpu
    buf230.group.iteration = ((1024,), (16,))
    buf230.sizes = ([1024], [16])
    class buf230_loop_body:
        var_ranges = {z0: 1024, z1: 16}
        index0 = z0 + 1024*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf228', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf230', get_index_1, getitem_1)
            return store_reduction


buf232_buf234: FusedSchedulerNode(NoneType)
buf232_buf234.writes = [MemoryDep('buf232', c0, {c0: 1024}), MemoryDep('buf234', c0, {c0: 1024})]
buf232_buf234.unmet_dependencies = [MemoryDep('buf230', c0, {c0: 1024})]
buf232_buf234.met_dependencies = [MemoryDep('primals_241', c0, {c0: 1024})]
buf232_buf234.users = None
    buf232_buf234.snodes[0] =
    buf232: SchedulerNode(ComputedBuffer)
    buf232.writes = [MemoryDep('buf232', c0, {c0: 1024})]
    buf232.unmet_dependencies = [MemoryDep('buf230', c0, {c0: 1024})]
    buf232.met_dependencies = []
    buf232.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf232.group.device = cpu
    buf232.group.iteration = ((1024,), ())
    buf232.sizes = ([1024], [])
    class buf232_loop_body:
        var_ranges = {z0: 1024}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf230', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf232', get_index_1, rsqrt, None)
            return store
    buf232_buf234.snodes[1] =
    buf234: SchedulerNode(ComputedBuffer)
    buf234.writes = [MemoryDep('buf234', c0, {c0: 1024})]
    buf234.unmet_dependencies = [MemoryDep('buf230', c0, {c0: 1024})]
    buf234.met_dependencies = [MemoryDep('primals_241', c0, {c0: 1024})]
    buf234.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf234.group.device = cpu
    buf234.group.iteration = ((1024,), ())
    buf234.sizes = ([1024], [])
    class buf234_loop_body:
        var_ranges = {z0: 1024}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf230', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0666666666666667, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_241', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf234', get_index_2, add, None)
            return store


buf233: SchedulerNode(ComputedBuffer)
buf233.writes = [MemoryDep('buf233', c0, {c0: 1024})]
buf233.unmet_dependencies = [MemoryDep('buf229', c0, {c0: 1024})]
buf233.met_dependencies = [MemoryDep('primals_240', c0, {c0: 1024})]
buf233.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf233.group.device = cpu
buf233.group.iteration = ((1024,), ())
buf233.sizes = ([1024], [])
class buf233_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_240', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf233', get_index_2, add, None)
        return store


buf235: ExternKernelSchedulerNode(ExternKernelAlloc)
buf235.writes = [StarDep(name='buf235')]
buf235.unmet_dependencies = [StarDep(name='buf211')]
buf235.met_dependencies = [StarDep(name='primals_82')]
buf235.users = [NodeUser(node=SchedulerNode(name='buf236'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf237'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf238'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf242'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf235.node.kernel = extern_kernels.convolution


buf236_buf237: FusedSchedulerNode(NoneType)
buf236_buf237.writes = [MemoryDep('buf236', c0, {c0: 1024}), MemoryDep('buf237', c0, {c0: 1024})]
buf236_buf237.unmet_dependencies = [MemoryDep('buf235', c0 + 1024*c1, {c0: 1024, c1: 16})]
buf236_buf237.met_dependencies = []
buf236_buf237.users = None
    buf236_buf237.snodes[0] =
    buf236: SchedulerNode(ComputedBuffer)
    buf236.writes = [MemoryDep('buf236', c0, {c0: 1024})]
    buf236.unmet_dependencies = [MemoryDep('buf235', c0 + 1024*c1, {c0: 1024, c1: 16})]
    buf236.met_dependencies = []
    buf236.users = [NodeUser(node=SchedulerNode(name='buf240'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf242'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf236.group.device = cpu
    buf236.group.iteration = ((1024,), (16,))
    buf236.sizes = ([1024], [16])
    class buf236_loop_body:
        var_ranges = {z0: 1024, z1: 16}
        index0 = z0 + 1024*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf235', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf236', get_index_1, getitem)
            return store_reduction
    buf236_buf237.snodes[1] =
    buf237: SchedulerNode(ComputedBuffer)
    buf237.writes = [MemoryDep('buf237', c0, {c0: 1024})]
    buf237.unmet_dependencies = [MemoryDep('buf235', c0 + 1024*c1, {c0: 1024, c1: 16})]
    buf237.met_dependencies = []
    buf237.users = [NodeUser(node=SchedulerNode(name='buf239'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf241'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf242'), can_inplace=False, is_weak=False)]
    buf237.group.device = cpu
    buf237.group.iteration = ((1024,), (16,))
    buf237.sizes = ([1024], [16])
    class buf237_loop_body:
        var_ranges = {z0: 1024, z1: 16}
        index0 = z0 + 1024*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf235', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf237', get_index_1, getitem_1)
            return store_reduction


buf239_buf241: FusedSchedulerNode(NoneType)
buf239_buf241.writes = [MemoryDep('buf239', c0, {c0: 1024}), MemoryDep('buf241', c0, {c0: 1024})]
buf239_buf241.unmet_dependencies = [MemoryDep('buf237', c0, {c0: 1024})]
buf239_buf241.met_dependencies = [MemoryDep('primals_244', c0, {c0: 1024})]
buf239_buf241.users = None
    buf239_buf241.snodes[0] =
    buf239: SchedulerNode(ComputedBuffer)
    buf239.writes = [MemoryDep('buf239', c0, {c0: 1024})]
    buf239.unmet_dependencies = [MemoryDep('buf237', c0, {c0: 1024})]
    buf239.met_dependencies = []
    buf239.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf239.group.device = cpu
    buf239.group.iteration = ((1024,), ())
    buf239.sizes = ([1024], [])
    class buf239_loop_body:
        var_ranges = {z0: 1024}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf237', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf239', get_index_1, rsqrt, None)
            return store
    buf239_buf241.snodes[1] =
    buf241: SchedulerNode(ComputedBuffer)
    buf241.writes = [MemoryDep('buf241', c0, {c0: 1024})]
    buf241.unmet_dependencies = [MemoryDep('buf237', c0, {c0: 1024})]
    buf241.met_dependencies = [MemoryDep('primals_244', c0, {c0: 1024})]
    buf241.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf241.group.device = cpu
    buf241.group.iteration = ((1024,), ())
    buf241.sizes = ([1024], [])
    class buf241_loop_body:
        var_ranges = {z0: 1024}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf237', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0666666666666667, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_244', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf241', get_index_2, add, None)
            return store


buf240: SchedulerNode(ComputedBuffer)
buf240.writes = [MemoryDep('buf240', c0, {c0: 1024})]
buf240.unmet_dependencies = [MemoryDep('buf236', c0, {c0: 1024})]
buf240.met_dependencies = [MemoryDep('primals_243', c0, {c0: 1024})]
buf240.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf240.group.device = cpu
buf240.group.iteration = ((1024,), ())
buf240.sizes = ([1024], [])
class buf240_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_243', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf240', get_index_2, add, None)
        return store


buf242: SchedulerNode(ComputedBuffer)
buf242.writes = [MemoryDep('buf242', c0, {c0: 16384})]
buf242.unmet_dependencies = 
    [   MemoryDep('buf228', c0, {c0: 16384}),
        MemoryDep('buf229', c1, {c0: 16, c1: 1024}),
        MemoryDep('buf230', c1, {c0: 16, c1: 1024}),
        MemoryDep('buf235', c0, {c0: 16384}),
        MemoryDep('buf236', c1, {c0: 16, c1: 1024}),
        MemoryDep('buf237', c1, {c0: 16, c1: 1024})]
buf242.met_dependencies = 
    [   MemoryDep('primals_80', c1, {c0: 16, c1: 1024}),
        MemoryDep('primals_81', c1, {c0: 16, c1: 1024}),
        MemoryDep('primals_83', c1, {c0: 16, c1: 1024}),
        MemoryDep('primals_84', c1, {c0: 16, c1: 1024})]
buf242.users = [NodeUser(node=SchedulerNode(name='buf243'), can_inplace=True, is_weak=False)]
buf242.group.device = cpu
buf242.group.iteration = ((16, 1024), ())
buf242.sizes = ([16, 1024], [])
class buf242_loop_body:
    var_ranges = {z0: 16, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf229', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf230', get_index_2)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_80', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_81', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf235', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf236', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf237', get_index_7)
        constant_2 = ops.constant(16.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_83', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_84', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf242', get_index_10, add_4, None)
        return store


buf243: SchedulerNode(ComputedBuffer)
buf243.writes = [MemoryDep('buf243', c0, {c0: 16384})]
buf243.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 16384})]
buf243.met_dependencies = []
buf243.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf244'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf267'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf243.group.device = cpu
buf243.group.iteration = ((16384,), ())
buf243.sizes = ([16384], [])
class buf243_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf243', get_index_1, relu, None)
        return store


buf244: ExternKernelSchedulerNode(ExternKernelAlloc)
buf244.writes = [StarDep(name='buf244')]
buf244.unmet_dependencies = [StarDep(name='buf243')]
buf244.met_dependencies = [StarDep(name='primals_85')]
buf244.users = [NodeUser(node=SchedulerNode(name='buf245'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf246'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf247'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf251'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf244.node.kernel = extern_kernels.convolution


buf245_buf246: FusedSchedulerNode(NoneType)
buf245_buf246.writes = [MemoryDep('buf245', c0, {c0: 256}), MemoryDep('buf246', c0, {c0: 256})]
buf245_buf246.unmet_dependencies = [MemoryDep('buf244', c0 + 256*c1, {c0: 256, c1: 16})]
buf245_buf246.met_dependencies = []
buf245_buf246.users = None
    buf245_buf246.snodes[0] =
    buf245: SchedulerNode(ComputedBuffer)
    buf245.writes = [MemoryDep('buf245', c0, {c0: 256})]
    buf245.unmet_dependencies = [MemoryDep('buf244', c0 + 256*c1, {c0: 256, c1: 16})]
    buf245.met_dependencies = []
    buf245.users = [NodeUser(node=SchedulerNode(name='buf249'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf251'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf245.group.device = cpu
    buf245.group.iteration = ((256,), (16,))
    buf245.sizes = ([256], [16])
    class buf245_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf244', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf245', get_index_1, getitem)
            return store_reduction
    buf245_buf246.snodes[1] =
    buf246: SchedulerNode(ComputedBuffer)
    buf246.writes = [MemoryDep('buf246', c0, {c0: 256})]
    buf246.unmet_dependencies = [MemoryDep('buf244', c0 + 256*c1, {c0: 256, c1: 16})]
    buf246.met_dependencies = []
    buf246.users = [NodeUser(node=SchedulerNode(name='buf248'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf250'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf251'), can_inplace=False, is_weak=False)]
    buf246.group.device = cpu
    buf246.group.iteration = ((256,), (16,))
    buf246.sizes = ([256], [16])
    class buf246_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf244', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf246', get_index_1, getitem_1)
            return store_reduction


buf248_buf250: FusedSchedulerNode(NoneType)
buf248_buf250.writes = [MemoryDep('buf248', c0, {c0: 256}), MemoryDep('buf250', c0, {c0: 256})]
buf248_buf250.unmet_dependencies = [MemoryDep('buf246', c0, {c0: 256})]
buf248_buf250.met_dependencies = [MemoryDep('primals_247', c0, {c0: 256})]
buf248_buf250.users = None
    buf248_buf250.snodes[0] =
    buf248: SchedulerNode(ComputedBuffer)
    buf248.writes = [MemoryDep('buf248', c0, {c0: 256})]
    buf248.unmet_dependencies = [MemoryDep('buf246', c0, {c0: 256})]
    buf248.met_dependencies = []
    buf248.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf248.group.device = cpu
    buf248.group.iteration = ((256,), ())
    buf248.sizes = ([256], [])
    class buf248_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf246', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf248', get_index_1, rsqrt, None)
            return store
    buf248_buf250.snodes[1] =
    buf250: SchedulerNode(ComputedBuffer)
    buf250.writes = [MemoryDep('buf250', c0, {c0: 256})]
    buf250.unmet_dependencies = [MemoryDep('buf246', c0, {c0: 256})]
    buf250.met_dependencies = [MemoryDep('primals_247', c0, {c0: 256})]
    buf250.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf250.group.device = cpu
    buf250.group.iteration = ((256,), ())
    buf250.sizes = ([256], [])
    class buf250_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf246', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0666666666666667, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_247', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf250', get_index_2, add, None)
            return store


buf249: SchedulerNode(ComputedBuffer)
buf249.writes = [MemoryDep('buf249', c0, {c0: 256})]
buf249.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 256})]
buf249.met_dependencies = [MemoryDep('primals_246', c0, {c0: 256})]
buf249.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf249.group.device = cpu
buf249.group.iteration = ((256,), ())
buf249.sizes = ([256], [])
class buf249_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_246', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf249', get_index_2, add, None)
        return store


buf251: SchedulerNode(ComputedBuffer)
buf251.writes = [MemoryDep('buf251', c0, {c0: 4096})]
buf251.unmet_dependencies = 
    [   MemoryDep('buf244', c0, {c0: 4096}),
        MemoryDep('buf245', c1, {c0: 16, c1: 256}),
        MemoryDep('buf246', c1, {c0: 16, c1: 256})]
buf251.met_dependencies = 
    [   MemoryDep('primals_86', c1, {c0: 16, c1: 256}),
        MemoryDep('primals_87', c1, {c0: 16, c1: 256})]
buf251.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf252'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf251.group.device = cpu
buf251.group.iteration = ((16, 256), ())
buf251.sizes = ([16, 256], [])
class buf251_loop_body:
    var_ranges = {z0: 16, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf245', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf246', get_index_2)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_86', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_87', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf251', get_index_5, relu, None)
        return store


buf252: ExternKernelSchedulerNode(ExternKernelAlloc)
buf252.writes = [StarDep(name='buf252')]
buf252.unmet_dependencies = [StarDep(name='buf251'), StarDep(name='buf9')]
buf252.met_dependencies = []
buf252.users = [NodeUser(node=SchedulerNode(name='buf253'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf254'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf255'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf259'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf252.node.kernel = extern_kernels.convolution


buf253_buf254: FusedSchedulerNode(NoneType)
buf253_buf254.writes = [MemoryDep('buf253', c0, {c0: 256}), MemoryDep('buf254', c0, {c0: 256})]
buf253_buf254.unmet_dependencies = [MemoryDep('buf252', c0 + 256*c1, {c0: 256, c1: 16})]
buf253_buf254.met_dependencies = []
buf253_buf254.users = None
    buf253_buf254.snodes[0] =
    buf253: SchedulerNode(ComputedBuffer)
    buf253.writes = [MemoryDep('buf253', c0, {c0: 256})]
    buf253.unmet_dependencies = [MemoryDep('buf252', c0 + 256*c1, {c0: 256, c1: 16})]
    buf253.met_dependencies = []
    buf253.users = [NodeUser(node=SchedulerNode(name='buf257'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf259'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf253.group.device = cpu
    buf253.group.iteration = ((256,), (16,))
    buf253.sizes = ([256], [16])
    class buf253_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf252', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf253', get_index_1, getitem)
            return store_reduction
    buf253_buf254.snodes[1] =
    buf254: SchedulerNode(ComputedBuffer)
    buf254.writes = [MemoryDep('buf254', c0, {c0: 256})]
    buf254.unmet_dependencies = [MemoryDep('buf252', c0 + 256*c1, {c0: 256, c1: 16})]
    buf254.met_dependencies = []
    buf254.users = [NodeUser(node=SchedulerNode(name='buf256'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf258'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf259'), can_inplace=False, is_weak=False)]
    buf254.group.device = cpu
    buf254.group.iteration = ((256,), (16,))
    buf254.sizes = ([256], [16])
    class buf254_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf252', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf254', get_index_1, getitem_1)
            return store_reduction


buf256_buf258: FusedSchedulerNode(NoneType)
buf256_buf258.writes = [MemoryDep('buf256', c0, {c0: 256}), MemoryDep('buf258', c0, {c0: 256})]
buf256_buf258.unmet_dependencies = [MemoryDep('buf254', c0, {c0: 256})]
buf256_buf258.met_dependencies = [MemoryDep('primals_250', c0, {c0: 256})]
buf256_buf258.users = None
    buf256_buf258.snodes[0] =
    buf256: SchedulerNode(ComputedBuffer)
    buf256.writes = [MemoryDep('buf256', c0, {c0: 256})]
    buf256.unmet_dependencies = [MemoryDep('buf254', c0, {c0: 256})]
    buf256.met_dependencies = []
    buf256.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf256.group.device = cpu
    buf256.group.iteration = ((256,), ())
    buf256.sizes = ([256], [])
    class buf256_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf254', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf256', get_index_1, rsqrt, None)
            return store
    buf256_buf258.snodes[1] =
    buf258: SchedulerNode(ComputedBuffer)
    buf258.writes = [MemoryDep('buf258', c0, {c0: 256})]
    buf258.unmet_dependencies = [MemoryDep('buf254', c0, {c0: 256})]
    buf258.met_dependencies = [MemoryDep('primals_250', c0, {c0: 256})]
    buf258.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf258.group.device = cpu
    buf258.group.iteration = ((256,), ())
    buf258.sizes = ([256], [])
    class buf258_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf254', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0666666666666667, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_250', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf258', get_index_2, add, None)
            return store


buf257: SchedulerNode(ComputedBuffer)
buf257.writes = [MemoryDep('buf257', c0, {c0: 256})]
buf257.unmet_dependencies = [MemoryDep('buf253', c0, {c0: 256})]
buf257.met_dependencies = [MemoryDep('primals_249', c0, {c0: 256})]
buf257.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf257.group.device = cpu
buf257.group.iteration = ((256,), ())
buf257.sizes = ([256], [])
class buf257_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_249', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf257', get_index_2, add, None)
        return store


buf259: SchedulerNode(ComputedBuffer)
buf259.writes = [MemoryDep('buf259', c0, {c0: 4096})]
buf259.unmet_dependencies = 
    [   MemoryDep('buf252', c0, {c0: 4096}),
        MemoryDep('buf253', c1, {c0: 16, c1: 256}),
        MemoryDep('buf254', c1, {c0: 16, c1: 256})]
buf259.met_dependencies = 
    [   MemoryDep('primals_89', c1, {c0: 16, c1: 256}),
        MemoryDep('primals_90', c1, {c0: 16, c1: 256})]
buf259.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf260'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf259.group.device = cpu
buf259.group.iteration = ((16, 256), ())
buf259.sizes = ([16, 256], [])
class buf259_loop_body:
    var_ranges = {z0: 16, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf253', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf254', get_index_2)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_89', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_90', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf259', get_index_5, relu, None)
        return store


buf260: ExternKernelSchedulerNode(ExternKernelAlloc)
buf260.writes = [StarDep(name='buf260')]
buf260.unmet_dependencies = [StarDep(name='buf259')]
buf260.met_dependencies = [StarDep(name='primals_91')]
buf260.users = [NodeUser(node=SchedulerNode(name='buf261'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf262'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf263'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf267'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf260.node.kernel = extern_kernels.convolution


buf261_buf262: FusedSchedulerNode(NoneType)
buf261_buf262.writes = [MemoryDep('buf261', c0, {c0: 1024}), MemoryDep('buf262', c0, {c0: 1024})]
buf261_buf262.unmet_dependencies = [MemoryDep('buf260', c0 + 1024*c1, {c0: 1024, c1: 16})]
buf261_buf262.met_dependencies = []
buf261_buf262.users = None
    buf261_buf262.snodes[0] =
    buf261: SchedulerNode(ComputedBuffer)
    buf261.writes = [MemoryDep('buf261', c0, {c0: 1024})]
    buf261.unmet_dependencies = [MemoryDep('buf260', c0 + 1024*c1, {c0: 1024, c1: 16})]
    buf261.met_dependencies = []
    buf261.users = [NodeUser(node=SchedulerNode(name='buf265'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf267'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf261.group.device = cpu
    buf261.group.iteration = ((1024,), (16,))
    buf261.sizes = ([1024], [16])
    class buf261_loop_body:
        var_ranges = {z0: 1024, z1: 16}
        index0 = z0 + 1024*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf260', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf261', get_index_1, getitem)
            return store_reduction
    buf261_buf262.snodes[1] =
    buf262: SchedulerNode(ComputedBuffer)
    buf262.writes = [MemoryDep('buf262', c0, {c0: 1024})]
    buf262.unmet_dependencies = [MemoryDep('buf260', c0 + 1024*c1, {c0: 1024, c1: 16})]
    buf262.met_dependencies = []
    buf262.users = [NodeUser(node=SchedulerNode(name='buf264'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf266'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf267'), can_inplace=False, is_weak=False)]
    buf262.group.device = cpu
    buf262.group.iteration = ((1024,), (16,))
    buf262.sizes = ([1024], [16])
    class buf262_loop_body:
        var_ranges = {z0: 1024, z1: 16}
        index0 = z0 + 1024*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf260', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf262', get_index_1, getitem_1)
            return store_reduction


buf264_buf266: FusedSchedulerNode(NoneType)
buf264_buf266.writes = [MemoryDep('buf264', c0, {c0: 1024}), MemoryDep('buf266', c0, {c0: 1024})]
buf264_buf266.unmet_dependencies = [MemoryDep('buf262', c0, {c0: 1024})]
buf264_buf266.met_dependencies = [MemoryDep('primals_253', c0, {c0: 1024})]
buf264_buf266.users = None
    buf264_buf266.snodes[0] =
    buf264: SchedulerNode(ComputedBuffer)
    buf264.writes = [MemoryDep('buf264', c0, {c0: 1024})]
    buf264.unmet_dependencies = [MemoryDep('buf262', c0, {c0: 1024})]
    buf264.met_dependencies = []
    buf264.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf264.group.device = cpu
    buf264.group.iteration = ((1024,), ())
    buf264.sizes = ([1024], [])
    class buf264_loop_body:
        var_ranges = {z0: 1024}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf262', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf264', get_index_1, rsqrt, None)
            return store
    buf264_buf266.snodes[1] =
    buf266: SchedulerNode(ComputedBuffer)
    buf266.writes = [MemoryDep('buf266', c0, {c0: 1024})]
    buf266.unmet_dependencies = [MemoryDep('buf262', c0, {c0: 1024})]
    buf266.met_dependencies = [MemoryDep('primals_253', c0, {c0: 1024})]
    buf266.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf266.group.device = cpu
    buf266.group.iteration = ((1024,), ())
    buf266.sizes = ([1024], [])
    class buf266_loop_body:
        var_ranges = {z0: 1024}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf262', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0666666666666667, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_253', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf266', get_index_2, add, None)
            return store


buf265: SchedulerNode(ComputedBuffer)
buf265.writes = [MemoryDep('buf265', c0, {c0: 1024})]
buf265.unmet_dependencies = [MemoryDep('buf261', c0, {c0: 1024})]
buf265.met_dependencies = [MemoryDep('primals_252', c0, {c0: 1024})]
buf265.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf265.group.device = cpu
buf265.group.iteration = ((1024,), ())
buf265.sizes = ([1024], [])
class buf265_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_252', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf265', get_index_2, add, None)
        return store


buf267: SchedulerNode(ComputedBuffer)
buf267.writes = [MemoryDep('buf267', c0, {c0: 16384})]
buf267.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 16384}),
        MemoryDep('buf260', c0, {c0: 16384}),
        MemoryDep('buf261', c1, {c0: 16, c1: 1024}),
        MemoryDep('buf262', c1, {c0: 16, c1: 1024})]
buf267.met_dependencies = 
    [   MemoryDep('primals_92', c1, {c0: 16, c1: 1024}),
        MemoryDep('primals_93', c1, {c0: 16, c1: 1024})]
buf267.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf268'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf291'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf267.group.device = cpu
buf267.group.iteration = ((16, 1024), ())
buf267.sizes = ([16, 1024], [])
class buf267_loop_body:
    var_ranges = {z0: 16, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf261', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf262', get_index_2)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_92', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_93', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf243', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf267', get_index_6, relu, None)
        return store


buf268: ExternKernelSchedulerNode(ExternKernelAlloc)
buf268.writes = [StarDep(name='buf268')]
buf268.unmet_dependencies = [StarDep(name='buf267')]
buf268.met_dependencies = [StarDep(name='primals_94')]
buf268.users = [NodeUser(node=SchedulerNode(name='buf269'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf270'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf271'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf275'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf268.node.kernel = extern_kernels.convolution


buf269_buf270: FusedSchedulerNode(NoneType)
buf269_buf270.writes = [MemoryDep('buf269', c0, {c0: 256}), MemoryDep('buf270', c0, {c0: 256})]
buf269_buf270.unmet_dependencies = [MemoryDep('buf268', c0 + 256*c1, {c0: 256, c1: 16})]
buf269_buf270.met_dependencies = []
buf269_buf270.users = None
    buf269_buf270.snodes[0] =
    buf269: SchedulerNode(ComputedBuffer)
    buf269.writes = [MemoryDep('buf269', c0, {c0: 256})]
    buf269.unmet_dependencies = [MemoryDep('buf268', c0 + 256*c1, {c0: 256, c1: 16})]
    buf269.met_dependencies = []
    buf269.users = [NodeUser(node=SchedulerNode(name='buf273'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf275'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf269.group.device = cpu
    buf269.group.iteration = ((256,), (16,))
    buf269.sizes = ([256], [16])
    class buf269_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf268', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf269', get_index_1, getitem)
            return store_reduction
    buf269_buf270.snodes[1] =
    buf270: SchedulerNode(ComputedBuffer)
    buf270.writes = [MemoryDep('buf270', c0, {c0: 256})]
    buf270.unmet_dependencies = [MemoryDep('buf268', c0 + 256*c1, {c0: 256, c1: 16})]
    buf270.met_dependencies = []
    buf270.users = [NodeUser(node=SchedulerNode(name='buf272'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf274'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf275'), can_inplace=False, is_weak=False)]
    buf270.group.device = cpu
    buf270.group.iteration = ((256,), (16,))
    buf270.sizes = ([256], [16])
    class buf270_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf268', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf270', get_index_1, getitem_1)
            return store_reduction


buf272_buf274: FusedSchedulerNode(NoneType)
buf272_buf274.writes = [MemoryDep('buf272', c0, {c0: 256}), MemoryDep('buf274', c0, {c0: 256})]
buf272_buf274.unmet_dependencies = [MemoryDep('buf270', c0, {c0: 256})]
buf272_buf274.met_dependencies = [MemoryDep('primals_256', c0, {c0: 256})]
buf272_buf274.users = None
    buf272_buf274.snodes[0] =
    buf272: SchedulerNode(ComputedBuffer)
    buf272.writes = [MemoryDep('buf272', c0, {c0: 256})]
    buf272.unmet_dependencies = [MemoryDep('buf270', c0, {c0: 256})]
    buf272.met_dependencies = []
    buf272.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf272.group.device = cpu
    buf272.group.iteration = ((256,), ())
    buf272.sizes = ([256], [])
    class buf272_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf270', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf272', get_index_1, rsqrt, None)
            return store
    buf272_buf274.snodes[1] =
    buf274: SchedulerNode(ComputedBuffer)
    buf274.writes = [MemoryDep('buf274', c0, {c0: 256})]
    buf274.unmet_dependencies = [MemoryDep('buf270', c0, {c0: 256})]
    buf274.met_dependencies = [MemoryDep('primals_256', c0, {c0: 256})]
    buf274.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf274.group.device = cpu
    buf274.group.iteration = ((256,), ())
    buf274.sizes = ([256], [])
    class buf274_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf270', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0666666666666667, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_256', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf274', get_index_2, add, None)
            return store


buf273: SchedulerNode(ComputedBuffer)
buf273.writes = [MemoryDep('buf273', c0, {c0: 256})]
buf273.unmet_dependencies = [MemoryDep('buf269', c0, {c0: 256})]
buf273.met_dependencies = [MemoryDep('primals_255', c0, {c0: 256})]
buf273.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf273.group.device = cpu
buf273.group.iteration = ((256,), ())
buf273.sizes = ([256], [])
class buf273_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_255', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf273', get_index_2, add, None)
        return store


buf275: SchedulerNode(ComputedBuffer)
buf275.writes = [MemoryDep('buf275', c0, {c0: 4096})]
buf275.unmet_dependencies = 
    [   MemoryDep('buf268', c0, {c0: 4096}),
        MemoryDep('buf269', c1, {c0: 16, c1: 256}),
        MemoryDep('buf270', c1, {c0: 16, c1: 256})]
buf275.met_dependencies = 
    [   MemoryDep('primals_95', c1, {c0: 16, c1: 256}),
        MemoryDep('primals_96', c1, {c0: 16, c1: 256})]
buf275.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf276'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf275.group.device = cpu
buf275.group.iteration = ((16, 256), ())
buf275.sizes = ([16, 256], [])
class buf275_loop_body:
    var_ranges = {z0: 16, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf269', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf270', get_index_2)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_95', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_96', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf275', get_index_5, relu, None)
        return store


buf276: ExternKernelSchedulerNode(ExternKernelAlloc)
buf276.writes = [StarDep(name='buf276')]
buf276.unmet_dependencies = [StarDep(name='buf10'), StarDep(name='buf275')]
buf276.met_dependencies = []
buf276.users = [NodeUser(node=SchedulerNode(name='buf277'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf278'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf279'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf283'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf276.node.kernel = extern_kernels.convolution


buf277_buf278: FusedSchedulerNode(NoneType)
buf277_buf278.writes = [MemoryDep('buf277', c0, {c0: 256}), MemoryDep('buf278', c0, {c0: 256})]
buf277_buf278.unmet_dependencies = [MemoryDep('buf276', c0 + 256*c1, {c0: 256, c1: 16})]
buf277_buf278.met_dependencies = []
buf277_buf278.users = None
    buf277_buf278.snodes[0] =
    buf277: SchedulerNode(ComputedBuffer)
    buf277.writes = [MemoryDep('buf277', c0, {c0: 256})]
    buf277.unmet_dependencies = [MemoryDep('buf276', c0 + 256*c1, {c0: 256, c1: 16})]
    buf277.met_dependencies = []
    buf277.users = [NodeUser(node=SchedulerNode(name='buf281'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf283'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf277.group.device = cpu
    buf277.group.iteration = ((256,), (16,))
    buf277.sizes = ([256], [16])
    class buf277_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf276', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf277', get_index_1, getitem)
            return store_reduction
    buf277_buf278.snodes[1] =
    buf278: SchedulerNode(ComputedBuffer)
    buf278.writes = [MemoryDep('buf278', c0, {c0: 256})]
    buf278.unmet_dependencies = [MemoryDep('buf276', c0 + 256*c1, {c0: 256, c1: 16})]
    buf278.met_dependencies = []
    buf278.users = [NodeUser(node=SchedulerNode(name='buf280'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf282'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf283'), can_inplace=False, is_weak=False)]
    buf278.group.device = cpu
    buf278.group.iteration = ((256,), (16,))
    buf278.sizes = ([256], [16])
    class buf278_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf276', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf278', get_index_1, getitem_1)
            return store_reduction


buf280_buf282: FusedSchedulerNode(NoneType)
buf280_buf282.writes = [MemoryDep('buf280', c0, {c0: 256}), MemoryDep('buf282', c0, {c0: 256})]
buf280_buf282.unmet_dependencies = [MemoryDep('buf278', c0, {c0: 256})]
buf280_buf282.met_dependencies = [MemoryDep('primals_259', c0, {c0: 256})]
buf280_buf282.users = None
    buf280_buf282.snodes[0] =
    buf280: SchedulerNode(ComputedBuffer)
    buf280.writes = [MemoryDep('buf280', c0, {c0: 256})]
    buf280.unmet_dependencies = [MemoryDep('buf278', c0, {c0: 256})]
    buf280.met_dependencies = []
    buf280.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf280.group.device = cpu
    buf280.group.iteration = ((256,), ())
    buf280.sizes = ([256], [])
    class buf280_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf278', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf280', get_index_1, rsqrt, None)
            return store
    buf280_buf282.snodes[1] =
    buf282: SchedulerNode(ComputedBuffer)
    buf282.writes = [MemoryDep('buf282', c0, {c0: 256})]
    buf282.unmet_dependencies = [MemoryDep('buf278', c0, {c0: 256})]
    buf282.met_dependencies = [MemoryDep('primals_259', c0, {c0: 256})]
    buf282.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf282.group.device = cpu
    buf282.group.iteration = ((256,), ())
    buf282.sizes = ([256], [])
    class buf282_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf278', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0666666666666667, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_259', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf282', get_index_2, add, None)
            return store


buf281: SchedulerNode(ComputedBuffer)
buf281.writes = [MemoryDep('buf281', c0, {c0: 256})]
buf281.unmet_dependencies = [MemoryDep('buf277', c0, {c0: 256})]
buf281.met_dependencies = [MemoryDep('primals_258', c0, {c0: 256})]
buf281.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf281.group.device = cpu
buf281.group.iteration = ((256,), ())
buf281.sizes = ([256], [])
class buf281_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_258', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf281', get_index_2, add, None)
        return store


buf283: SchedulerNode(ComputedBuffer)
buf283.writes = [MemoryDep('buf283', c0, {c0: 4096})]
buf283.unmet_dependencies = 
    [   MemoryDep('buf276', c0, {c0: 4096}),
        MemoryDep('buf277', c1, {c0: 16, c1: 256}),
        MemoryDep('buf278', c1, {c0: 16, c1: 256})]
buf283.met_dependencies = 
    [   MemoryDep('primals_98', c1, {c0: 16, c1: 256}),
        MemoryDep('primals_99', c1, {c0: 16, c1: 256})]
buf283.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf284'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf283.group.device = cpu
buf283.group.iteration = ((16, 256), ())
buf283.sizes = ([16, 256], [])
class buf283_loop_body:
    var_ranges = {z0: 16, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf277', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf278', get_index_2)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_98', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_99', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf283', get_index_5, relu, None)
        return store


buf284: ExternKernelSchedulerNode(ExternKernelAlloc)
buf284.writes = [StarDep(name='buf284')]
buf284.unmet_dependencies = [StarDep(name='buf283')]
buf284.met_dependencies = [StarDep(name='primals_100')]
buf284.users = [NodeUser(node=SchedulerNode(name='buf285'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf286'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf287'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf291'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf284.node.kernel = extern_kernels.convolution


buf285_buf286: FusedSchedulerNode(NoneType)
buf285_buf286.writes = [MemoryDep('buf285', c0, {c0: 1024}), MemoryDep('buf286', c0, {c0: 1024})]
buf285_buf286.unmet_dependencies = [MemoryDep('buf284', c0 + 1024*c1, {c0: 1024, c1: 16})]
buf285_buf286.met_dependencies = []
buf285_buf286.users = None
    buf285_buf286.snodes[0] =
    buf285: SchedulerNode(ComputedBuffer)
    buf285.writes = [MemoryDep('buf285', c0, {c0: 1024})]
    buf285.unmet_dependencies = [MemoryDep('buf284', c0 + 1024*c1, {c0: 1024, c1: 16})]
    buf285.met_dependencies = []
    buf285.users = [NodeUser(node=SchedulerNode(name='buf289'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf291'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf285.group.device = cpu
    buf285.group.iteration = ((1024,), (16,))
    buf285.sizes = ([1024], [16])
    class buf285_loop_body:
        var_ranges = {z0: 1024, z1: 16}
        index0 = z0 + 1024*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf284', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf285', get_index_1, getitem)
            return store_reduction
    buf285_buf286.snodes[1] =
    buf286: SchedulerNode(ComputedBuffer)
    buf286.writes = [MemoryDep('buf286', c0, {c0: 1024})]
    buf286.unmet_dependencies = [MemoryDep('buf284', c0 + 1024*c1, {c0: 1024, c1: 16})]
    buf286.met_dependencies = []
    buf286.users = [NodeUser(node=SchedulerNode(name='buf288'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf290'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf291'), can_inplace=False, is_weak=False)]
    buf286.group.device = cpu
    buf286.group.iteration = ((1024,), (16,))
    buf286.sizes = ([1024], [16])
    class buf286_loop_body:
        var_ranges = {z0: 1024, z1: 16}
        index0 = z0 + 1024*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf284', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf286', get_index_1, getitem_1)
            return store_reduction


buf288_buf290: FusedSchedulerNode(NoneType)
buf288_buf290.writes = [MemoryDep('buf288', c0, {c0: 1024}), MemoryDep('buf290', c0, {c0: 1024})]
buf288_buf290.unmet_dependencies = [MemoryDep('buf286', c0, {c0: 1024})]
buf288_buf290.met_dependencies = [MemoryDep('primals_262', c0, {c0: 1024})]
buf288_buf290.users = None
    buf288_buf290.snodes[0] =
    buf288: SchedulerNode(ComputedBuffer)
    buf288.writes = [MemoryDep('buf288', c0, {c0: 1024})]
    buf288.unmet_dependencies = [MemoryDep('buf286', c0, {c0: 1024})]
    buf288.met_dependencies = []
    buf288.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf288.group.device = cpu
    buf288.group.iteration = ((1024,), ())
    buf288.sizes = ([1024], [])
    class buf288_loop_body:
        var_ranges = {z0: 1024}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf286', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf288', get_index_1, rsqrt, None)
            return store
    buf288_buf290.snodes[1] =
    buf290: SchedulerNode(ComputedBuffer)
    buf290.writes = [MemoryDep('buf290', c0, {c0: 1024})]
    buf290.unmet_dependencies = [MemoryDep('buf286', c0, {c0: 1024})]
    buf290.met_dependencies = [MemoryDep('primals_262', c0, {c0: 1024})]
    buf290.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf290.group.device = cpu
    buf290.group.iteration = ((1024,), ())
    buf290.sizes = ([1024], [])
    class buf290_loop_body:
        var_ranges = {z0: 1024}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf286', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0666666666666667, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_262', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf290', get_index_2, add, None)
            return store


buf289: SchedulerNode(ComputedBuffer)
buf289.writes = [MemoryDep('buf289', c0, {c0: 1024})]
buf289.unmet_dependencies = [MemoryDep('buf285', c0, {c0: 1024})]
buf289.met_dependencies = [MemoryDep('primals_261', c0, {c0: 1024})]
buf289.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf289.group.device = cpu
buf289.group.iteration = ((1024,), ())
buf289.sizes = ([1024], [])
class buf289_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_261', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf289', get_index_2, add, None)
        return store


buf291: SchedulerNode(ComputedBuffer)
buf291.writes = [MemoryDep('buf291', c0, {c0: 16384})]
buf291.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 16384}),
        MemoryDep('buf284', c0, {c0: 16384}),
        MemoryDep('buf285', c1, {c0: 16, c1: 1024}),
        MemoryDep('buf286', c1, {c0: 16, c1: 1024})]
buf291.met_dependencies = 
    [   MemoryDep('primals_101', c1, {c0: 16, c1: 1024}),
        MemoryDep('primals_102', c1, {c0: 16, c1: 1024})]
buf291.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf292'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf315'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf291.group.device = cpu
buf291.group.iteration = ((16, 1024), ())
buf291.sizes = ([16, 1024], [])
class buf291_loop_body:
    var_ranges = {z0: 16, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf285', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf286', get_index_2)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_101', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_102', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf267', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf291', get_index_6, relu, None)
        return store


buf292: ExternKernelSchedulerNode(ExternKernelAlloc)
buf292.writes = [StarDep(name='buf292')]
buf292.unmet_dependencies = [StarDep(name='buf291')]
buf292.met_dependencies = [StarDep(name='primals_103')]
buf292.users = [NodeUser(node=SchedulerNode(name='buf293'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf294'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf295'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf299'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf292.node.kernel = extern_kernels.convolution


buf293_buf294: FusedSchedulerNode(NoneType)
buf293_buf294.writes = [MemoryDep('buf293', c0, {c0: 256}), MemoryDep('buf294', c0, {c0: 256})]
buf293_buf294.unmet_dependencies = [MemoryDep('buf292', c0 + 256*c1, {c0: 256, c1: 16})]
buf293_buf294.met_dependencies = []
buf293_buf294.users = None
    buf293_buf294.snodes[0] =
    buf293: SchedulerNode(ComputedBuffer)
    buf293.writes = [MemoryDep('buf293', c0, {c0: 256})]
    buf293.unmet_dependencies = [MemoryDep('buf292', c0 + 256*c1, {c0: 256, c1: 16})]
    buf293.met_dependencies = []
    buf293.users = [NodeUser(node=SchedulerNode(name='buf297'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf299'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf293.group.device = cpu
    buf293.group.iteration = ((256,), (16,))
    buf293.sizes = ([256], [16])
    class buf293_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf292', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf293', get_index_1, getitem)
            return store_reduction
    buf293_buf294.snodes[1] =
    buf294: SchedulerNode(ComputedBuffer)
    buf294.writes = [MemoryDep('buf294', c0, {c0: 256})]
    buf294.unmet_dependencies = [MemoryDep('buf292', c0 + 256*c1, {c0: 256, c1: 16})]
    buf294.met_dependencies = []
    buf294.users = [NodeUser(node=SchedulerNode(name='buf296'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf298'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf299'), can_inplace=False, is_weak=False)]
    buf294.group.device = cpu
    buf294.group.iteration = ((256,), (16,))
    buf294.sizes = ([256], [16])
    class buf294_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf292', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf294', get_index_1, getitem_1)
            return store_reduction


buf296_buf298: FusedSchedulerNode(NoneType)
buf296_buf298.writes = [MemoryDep('buf296', c0, {c0: 256}), MemoryDep('buf298', c0, {c0: 256})]
buf296_buf298.unmet_dependencies = [MemoryDep('buf294', c0, {c0: 256})]
buf296_buf298.met_dependencies = [MemoryDep('primals_265', c0, {c0: 256})]
buf296_buf298.users = None
    buf296_buf298.snodes[0] =
    buf296: SchedulerNode(ComputedBuffer)
    buf296.writes = [MemoryDep('buf296', c0, {c0: 256})]
    buf296.unmet_dependencies = [MemoryDep('buf294', c0, {c0: 256})]
    buf296.met_dependencies = []
    buf296.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf296.group.device = cpu
    buf296.group.iteration = ((256,), ())
    buf296.sizes = ([256], [])
    class buf296_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf294', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf296', get_index_1, rsqrt, None)
            return store
    buf296_buf298.snodes[1] =
    buf298: SchedulerNode(ComputedBuffer)
    buf298.writes = [MemoryDep('buf298', c0, {c0: 256})]
    buf298.unmet_dependencies = [MemoryDep('buf294', c0, {c0: 256})]
    buf298.met_dependencies = [MemoryDep('primals_265', c0, {c0: 256})]
    buf298.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf298.group.device = cpu
    buf298.group.iteration = ((256,), ())
    buf298.sizes = ([256], [])
    class buf298_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf294', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0666666666666667, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_265', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf298', get_index_2, add, None)
            return store


buf297: SchedulerNode(ComputedBuffer)
buf297.writes = [MemoryDep('buf297', c0, {c0: 256})]
buf297.unmet_dependencies = [MemoryDep('buf293', c0, {c0: 256})]
buf297.met_dependencies = [MemoryDep('primals_264', c0, {c0: 256})]
buf297.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf297.group.device = cpu
buf297.group.iteration = ((256,), ())
buf297.sizes = ([256], [])
class buf297_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_264', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf297', get_index_2, add, None)
        return store


buf299: SchedulerNode(ComputedBuffer)
buf299.writes = [MemoryDep('buf299', c0, {c0: 4096})]
buf299.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 4096}),
        MemoryDep('buf293', c1, {c0: 16, c1: 256}),
        MemoryDep('buf294', c1, {c0: 16, c1: 256})]
buf299.met_dependencies = 
    [   MemoryDep('primals_104', c1, {c0: 16, c1: 256}),
        MemoryDep('primals_105', c1, {c0: 16, c1: 256})]
buf299.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf300'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf299.group.device = cpu
buf299.group.iteration = ((16, 256), ())
buf299.sizes = ([16, 256], [])
class buf299_loop_body:
    var_ranges = {z0: 16, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf293', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf294', get_index_2)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_104', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_105', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf299', get_index_5, relu, None)
        return store


buf300: ExternKernelSchedulerNode(ExternKernelAlloc)
buf300.writes = [StarDep(name='buf300')]
buf300.unmet_dependencies = [StarDep(name='buf11'), StarDep(name='buf299')]
buf300.met_dependencies = []
buf300.users = [NodeUser(node=SchedulerNode(name='buf301'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf302'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf303'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf307'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf300.node.kernel = extern_kernels.convolution


buf301_buf302: FusedSchedulerNode(NoneType)
buf301_buf302.writes = [MemoryDep('buf301', c0, {c0: 256}), MemoryDep('buf302', c0, {c0: 256})]
buf301_buf302.unmet_dependencies = [MemoryDep('buf300', c0 + 256*c1, {c0: 256, c1: 16})]
buf301_buf302.met_dependencies = []
buf301_buf302.users = None
    buf301_buf302.snodes[0] =
    buf301: SchedulerNode(ComputedBuffer)
    buf301.writes = [MemoryDep('buf301', c0, {c0: 256})]
    buf301.unmet_dependencies = [MemoryDep('buf300', c0 + 256*c1, {c0: 256, c1: 16})]
    buf301.met_dependencies = []
    buf301.users = [NodeUser(node=SchedulerNode(name='buf305'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf307'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf301.group.device = cpu
    buf301.group.iteration = ((256,), (16,))
    buf301.sizes = ([256], [16])
    class buf301_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf300', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf301', get_index_1, getitem)
            return store_reduction
    buf301_buf302.snodes[1] =
    buf302: SchedulerNode(ComputedBuffer)
    buf302.writes = [MemoryDep('buf302', c0, {c0: 256})]
    buf302.unmet_dependencies = [MemoryDep('buf300', c0 + 256*c1, {c0: 256, c1: 16})]
    buf302.met_dependencies = []
    buf302.users = [NodeUser(node=SchedulerNode(name='buf304'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf306'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf307'), can_inplace=False, is_weak=False)]
    buf302.group.device = cpu
    buf302.group.iteration = ((256,), (16,))
    buf302.sizes = ([256], [16])
    class buf302_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf300', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf302', get_index_1, getitem_1)
            return store_reduction


buf304_buf306: FusedSchedulerNode(NoneType)
buf304_buf306.writes = [MemoryDep('buf304', c0, {c0: 256}), MemoryDep('buf306', c0, {c0: 256})]
buf304_buf306.unmet_dependencies = [MemoryDep('buf302', c0, {c0: 256})]
buf304_buf306.met_dependencies = [MemoryDep('primals_268', c0, {c0: 256})]
buf304_buf306.users = None
    buf304_buf306.snodes[0] =
    buf304: SchedulerNode(ComputedBuffer)
    buf304.writes = [MemoryDep('buf304', c0, {c0: 256})]
    buf304.unmet_dependencies = [MemoryDep('buf302', c0, {c0: 256})]
    buf304.met_dependencies = []
    buf304.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf304.group.device = cpu
    buf304.group.iteration = ((256,), ())
    buf304.sizes = ([256], [])
    class buf304_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf302', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf304', get_index_1, rsqrt, None)
            return store
    buf304_buf306.snodes[1] =
    buf306: SchedulerNode(ComputedBuffer)
    buf306.writes = [MemoryDep('buf306', c0, {c0: 256})]
    buf306.unmet_dependencies = [MemoryDep('buf302', c0, {c0: 256})]
    buf306.met_dependencies = [MemoryDep('primals_268', c0, {c0: 256})]
    buf306.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf306.group.device = cpu
    buf306.group.iteration = ((256,), ())
    buf306.sizes = ([256], [])
    class buf306_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf302', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0666666666666667, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_268', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf306', get_index_2, add, None)
            return store


buf305: SchedulerNode(ComputedBuffer)
buf305.writes = [MemoryDep('buf305', c0, {c0: 256})]
buf305.unmet_dependencies = [MemoryDep('buf301', c0, {c0: 256})]
buf305.met_dependencies = [MemoryDep('primals_267', c0, {c0: 256})]
buf305.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf305.group.device = cpu
buf305.group.iteration = ((256,), ())
buf305.sizes = ([256], [])
class buf305_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf301', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_267', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf305', get_index_2, add, None)
        return store


buf307: SchedulerNode(ComputedBuffer)
buf307.writes = [MemoryDep('buf307', c0, {c0: 4096})]
buf307.unmet_dependencies = 
    [   MemoryDep('buf300', c0, {c0: 4096}),
        MemoryDep('buf301', c1, {c0: 16, c1: 256}),
        MemoryDep('buf302', c1, {c0: 16, c1: 256})]
buf307.met_dependencies = 
    [   MemoryDep('primals_107', c1, {c0: 16, c1: 256}),
        MemoryDep('primals_108', c1, {c0: 16, c1: 256})]
buf307.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf308'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf307.group.device = cpu
buf307.group.iteration = ((16, 256), ())
buf307.sizes = ([16, 256], [])
class buf307_loop_body:
    var_ranges = {z0: 16, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf301', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf302', get_index_2)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_107', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_108', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf307', get_index_5, relu, None)
        return store


buf308: ExternKernelSchedulerNode(ExternKernelAlloc)
buf308.writes = [StarDep(name='buf308')]
buf308.unmet_dependencies = [StarDep(name='buf307')]
buf308.met_dependencies = [StarDep(name='primals_109')]
buf308.users = [NodeUser(node=SchedulerNode(name='buf309'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf310'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf311'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf315'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf308.node.kernel = extern_kernels.convolution


buf309_buf310: FusedSchedulerNode(NoneType)
buf309_buf310.writes = [MemoryDep('buf309', c0, {c0: 1024}), MemoryDep('buf310', c0, {c0: 1024})]
buf309_buf310.unmet_dependencies = [MemoryDep('buf308', c0 + 1024*c1, {c0: 1024, c1: 16})]
buf309_buf310.met_dependencies = []
buf309_buf310.users = None
    buf309_buf310.snodes[0] =
    buf309: SchedulerNode(ComputedBuffer)
    buf309.writes = [MemoryDep('buf309', c0, {c0: 1024})]
    buf309.unmet_dependencies = [MemoryDep('buf308', c0 + 1024*c1, {c0: 1024, c1: 16})]
    buf309.met_dependencies = []
    buf309.users = [NodeUser(node=SchedulerNode(name='buf313'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf315'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf309.group.device = cpu
    buf309.group.iteration = ((1024,), (16,))
    buf309.sizes = ([1024], [16])
    class buf309_loop_body:
        var_ranges = {z0: 1024, z1: 16}
        index0 = z0 + 1024*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf308', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf309', get_index_1, getitem)
            return store_reduction
    buf309_buf310.snodes[1] =
    buf310: SchedulerNode(ComputedBuffer)
    buf310.writes = [MemoryDep('buf310', c0, {c0: 1024})]
    buf310.unmet_dependencies = [MemoryDep('buf308', c0 + 1024*c1, {c0: 1024, c1: 16})]
    buf310.met_dependencies = []
    buf310.users = [NodeUser(node=SchedulerNode(name='buf312'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf314'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf315'), can_inplace=False, is_weak=False)]
    buf310.group.device = cpu
    buf310.group.iteration = ((1024,), (16,))
    buf310.sizes = ([1024], [16])
    class buf310_loop_body:
        var_ranges = {z0: 1024, z1: 16}
        index0 = z0 + 1024*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf308', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf310', get_index_1, getitem_1)
            return store_reduction


buf312_buf314: FusedSchedulerNode(NoneType)
buf312_buf314.writes = [MemoryDep('buf312', c0, {c0: 1024}), MemoryDep('buf314', c0, {c0: 1024})]
buf312_buf314.unmet_dependencies = [MemoryDep('buf310', c0, {c0: 1024})]
buf312_buf314.met_dependencies = [MemoryDep('primals_271', c0, {c0: 1024})]
buf312_buf314.users = None
    buf312_buf314.snodes[0] =
    buf312: SchedulerNode(ComputedBuffer)
    buf312.writes = [MemoryDep('buf312', c0, {c0: 1024})]
    buf312.unmet_dependencies = [MemoryDep('buf310', c0, {c0: 1024})]
    buf312.met_dependencies = []
    buf312.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf312.group.device = cpu
    buf312.group.iteration = ((1024,), ())
    buf312.sizes = ([1024], [])
    class buf312_loop_body:
        var_ranges = {z0: 1024}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf310', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf312', get_index_1, rsqrt, None)
            return store
    buf312_buf314.snodes[1] =
    buf314: SchedulerNode(ComputedBuffer)
    buf314.writes = [MemoryDep('buf314', c0, {c0: 1024})]
    buf314.unmet_dependencies = [MemoryDep('buf310', c0, {c0: 1024})]
    buf314.met_dependencies = [MemoryDep('primals_271', c0, {c0: 1024})]
    buf314.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf314.group.device = cpu
    buf314.group.iteration = ((1024,), ())
    buf314.sizes = ([1024], [])
    class buf314_loop_body:
        var_ranges = {z0: 1024}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf310', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0666666666666667, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_271', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf314', get_index_2, add, None)
            return store


buf313: SchedulerNode(ComputedBuffer)
buf313.writes = [MemoryDep('buf313', c0, {c0: 1024})]
buf313.unmet_dependencies = [MemoryDep('buf309', c0, {c0: 1024})]
buf313.met_dependencies = [MemoryDep('primals_270', c0, {c0: 1024})]
buf313.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf313.group.device = cpu
buf313.group.iteration = ((1024,), ())
buf313.sizes = ([1024], [])
class buf313_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_270', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf313', get_index_2, add, None)
        return store


buf315: SchedulerNode(ComputedBuffer)
buf315.writes = [MemoryDep('buf315', c0, {c0: 16384})]
buf315.unmet_dependencies = 
    [   MemoryDep('buf291', c0, {c0: 16384}),
        MemoryDep('buf308', c0, {c0: 16384}),
        MemoryDep('buf309', c1, {c0: 16, c1: 1024}),
        MemoryDep('buf310', c1, {c0: 16, c1: 1024})]
buf315.met_dependencies = 
    [   MemoryDep('primals_110', c1, {c0: 16, c1: 1024}),
        MemoryDep('primals_111', c1, {c0: 16, c1: 1024})]
buf315.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf316'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf339'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf315.group.device = cpu
buf315.group.iteration = ((16, 1024), ())
buf315.sizes = ([16, 1024], [])
class buf315_loop_body:
    var_ranges = {z0: 16, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf309', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf310', get_index_2)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_110', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_111', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf291', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf315', get_index_6, relu, None)
        return store


buf316: ExternKernelSchedulerNode(ExternKernelAlloc)
buf316.writes = [StarDep(name='buf316')]
buf316.unmet_dependencies = [StarDep(name='buf315')]
buf316.met_dependencies = [StarDep(name='primals_112')]
buf316.users = [NodeUser(node=SchedulerNode(name='buf317'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf318'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf319'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf323'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf316.node.kernel = extern_kernels.convolution


buf317_buf318: FusedSchedulerNode(NoneType)
buf317_buf318.writes = [MemoryDep('buf317', c0, {c0: 256}), MemoryDep('buf318', c0, {c0: 256})]
buf317_buf318.unmet_dependencies = [MemoryDep('buf316', c0 + 256*c1, {c0: 256, c1: 16})]
buf317_buf318.met_dependencies = []
buf317_buf318.users = None
    buf317_buf318.snodes[0] =
    buf317: SchedulerNode(ComputedBuffer)
    buf317.writes = [MemoryDep('buf317', c0, {c0: 256})]
    buf317.unmet_dependencies = [MemoryDep('buf316', c0 + 256*c1, {c0: 256, c1: 16})]
    buf317.met_dependencies = []
    buf317.users = [NodeUser(node=SchedulerNode(name='buf321'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf323'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf317.group.device = cpu
    buf317.group.iteration = ((256,), (16,))
    buf317.sizes = ([256], [16])
    class buf317_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf316', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf317', get_index_1, getitem)
            return store_reduction
    buf317_buf318.snodes[1] =
    buf318: SchedulerNode(ComputedBuffer)
    buf318.writes = [MemoryDep('buf318', c0, {c0: 256})]
    buf318.unmet_dependencies = [MemoryDep('buf316', c0 + 256*c1, {c0: 256, c1: 16})]
    buf318.met_dependencies = []
    buf318.users = [NodeUser(node=SchedulerNode(name='buf320'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf322'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf323'), can_inplace=False, is_weak=False)]
    buf318.group.device = cpu
    buf318.group.iteration = ((256,), (16,))
    buf318.sizes = ([256], [16])
    class buf318_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf316', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf318', get_index_1, getitem_1)
            return store_reduction


buf320_buf322: FusedSchedulerNode(NoneType)
buf320_buf322.writes = [MemoryDep('buf320', c0, {c0: 256}), MemoryDep('buf322', c0, {c0: 256})]
buf320_buf322.unmet_dependencies = [MemoryDep('buf318', c0, {c0: 256})]
buf320_buf322.met_dependencies = [MemoryDep('primals_274', c0, {c0: 256})]
buf320_buf322.users = None
    buf320_buf322.snodes[0] =
    buf320: SchedulerNode(ComputedBuffer)
    buf320.writes = [MemoryDep('buf320', c0, {c0: 256})]
    buf320.unmet_dependencies = [MemoryDep('buf318', c0, {c0: 256})]
    buf320.met_dependencies = []
    buf320.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf320.group.device = cpu
    buf320.group.iteration = ((256,), ())
    buf320.sizes = ([256], [])
    class buf320_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf318', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf320', get_index_1, rsqrt, None)
            return store
    buf320_buf322.snodes[1] =
    buf322: SchedulerNode(ComputedBuffer)
    buf322.writes = [MemoryDep('buf322', c0, {c0: 256})]
    buf322.unmet_dependencies = [MemoryDep('buf318', c0, {c0: 256})]
    buf322.met_dependencies = [MemoryDep('primals_274', c0, {c0: 256})]
    buf322.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf322.group.device = cpu
    buf322.group.iteration = ((256,), ())
    buf322.sizes = ([256], [])
    class buf322_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf318', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0666666666666667, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_274', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf322', get_index_2, add, None)
            return store


buf321: SchedulerNode(ComputedBuffer)
buf321.writes = [MemoryDep('buf321', c0, {c0: 256})]
buf321.unmet_dependencies = [MemoryDep('buf317', c0, {c0: 256})]
buf321.met_dependencies = [MemoryDep('primals_273', c0, {c0: 256})]
buf321.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf321.group.device = cpu
buf321.group.iteration = ((256,), ())
buf321.sizes = ([256], [])
class buf321_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_273', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf321', get_index_2, add, None)
        return store


buf323: SchedulerNode(ComputedBuffer)
buf323.writes = [MemoryDep('buf323', c0, {c0: 4096})]
buf323.unmet_dependencies = 
    [   MemoryDep('buf316', c0, {c0: 4096}),
        MemoryDep('buf317', c1, {c0: 16, c1: 256}),
        MemoryDep('buf318', c1, {c0: 16, c1: 256})]
buf323.met_dependencies = 
    [   MemoryDep('primals_113', c1, {c0: 16, c1: 256}),
        MemoryDep('primals_114', c1, {c0: 16, c1: 256})]
buf323.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf324'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf323.group.device = cpu
buf323.group.iteration = ((16, 256), ())
buf323.sizes = ([16, 256], [])
class buf323_loop_body:
    var_ranges = {z0: 16, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf316', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf317', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf318', get_index_2)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_113', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_114', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf323', get_index_5, relu, None)
        return store


buf324: ExternKernelSchedulerNode(ExternKernelAlloc)
buf324.writes = [StarDep(name='buf324')]
buf324.unmet_dependencies = [StarDep(name='buf12'), StarDep(name='buf323')]
buf324.met_dependencies = []
buf324.users = [NodeUser(node=SchedulerNode(name='buf325'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf326'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf327'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf331'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf324.node.kernel = extern_kernels.convolution


buf325_buf326: FusedSchedulerNode(NoneType)
buf325_buf326.writes = [MemoryDep('buf325', c0, {c0: 256}), MemoryDep('buf326', c0, {c0: 256})]
buf325_buf326.unmet_dependencies = [MemoryDep('buf324', c0 + 256*c1, {c0: 256, c1: 16})]
buf325_buf326.met_dependencies = []
buf325_buf326.users = None
    buf325_buf326.snodes[0] =
    buf325: SchedulerNode(ComputedBuffer)
    buf325.writes = [MemoryDep('buf325', c0, {c0: 256})]
    buf325.unmet_dependencies = [MemoryDep('buf324', c0 + 256*c1, {c0: 256, c1: 16})]
    buf325.met_dependencies = []
    buf325.users = [NodeUser(node=SchedulerNode(name='buf329'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf331'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf325.group.device = cpu
    buf325.group.iteration = ((256,), (16,))
    buf325.sizes = ([256], [16])
    class buf325_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf324', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf325', get_index_1, getitem)
            return store_reduction
    buf325_buf326.snodes[1] =
    buf326: SchedulerNode(ComputedBuffer)
    buf326.writes = [MemoryDep('buf326', c0, {c0: 256})]
    buf326.unmet_dependencies = [MemoryDep('buf324', c0 + 256*c1, {c0: 256, c1: 16})]
    buf326.met_dependencies = []
    buf326.users = [NodeUser(node=SchedulerNode(name='buf328'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf330'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf331'), can_inplace=False, is_weak=False)]
    buf326.group.device = cpu
    buf326.group.iteration = ((256,), (16,))
    buf326.sizes = ([256], [16])
    class buf326_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf324', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf326', get_index_1, getitem_1)
            return store_reduction


buf328_buf330: FusedSchedulerNode(NoneType)
buf328_buf330.writes = [MemoryDep('buf328', c0, {c0: 256}), MemoryDep('buf330', c0, {c0: 256})]
buf328_buf330.unmet_dependencies = [MemoryDep('buf326', c0, {c0: 256})]
buf328_buf330.met_dependencies = [MemoryDep('primals_277', c0, {c0: 256})]
buf328_buf330.users = None
    buf328_buf330.snodes[0] =
    buf328: SchedulerNode(ComputedBuffer)
    buf328.writes = [MemoryDep('buf328', c0, {c0: 256})]
    buf328.unmet_dependencies = [MemoryDep('buf326', c0, {c0: 256})]
    buf328.met_dependencies = []
    buf328.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf328.group.device = cpu
    buf328.group.iteration = ((256,), ())
    buf328.sizes = ([256], [])
    class buf328_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf326', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf328', get_index_1, rsqrt, None)
            return store
    buf328_buf330.snodes[1] =
    buf330: SchedulerNode(ComputedBuffer)
    buf330.writes = [MemoryDep('buf330', c0, {c0: 256})]
    buf330.unmet_dependencies = [MemoryDep('buf326', c0, {c0: 256})]
    buf330.met_dependencies = [MemoryDep('primals_277', c0, {c0: 256})]
    buf330.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf330.group.device = cpu
    buf330.group.iteration = ((256,), ())
    buf330.sizes = ([256], [])
    class buf330_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf326', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0666666666666667, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_277', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf330', get_index_2, add, None)
            return store


buf329: SchedulerNode(ComputedBuffer)
buf329.writes = [MemoryDep('buf329', c0, {c0: 256})]
buf329.unmet_dependencies = [MemoryDep('buf325', c0, {c0: 256})]
buf329.met_dependencies = [MemoryDep('primals_276', c0, {c0: 256})]
buf329.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf329.group.device = cpu
buf329.group.iteration = ((256,), ())
buf329.sizes = ([256], [])
class buf329_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf325', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_276', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf329', get_index_2, add, None)
        return store


buf331: SchedulerNode(ComputedBuffer)
buf331.writes = [MemoryDep('buf331', c0, {c0: 4096})]
buf331.unmet_dependencies = 
    [   MemoryDep('buf324', c0, {c0: 4096}),
        MemoryDep('buf325', c1, {c0: 16, c1: 256}),
        MemoryDep('buf326', c1, {c0: 16, c1: 256})]
buf331.met_dependencies = 
    [   MemoryDep('primals_116', c1, {c0: 16, c1: 256}),
        MemoryDep('primals_117', c1, {c0: 16, c1: 256})]
buf331.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf332'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf331.group.device = cpu
buf331.group.iteration = ((16, 256), ())
buf331.sizes = ([16, 256], [])
class buf331_loop_body:
    var_ranges = {z0: 16, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf324', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf325', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf326', get_index_2)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_116', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_117', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf331', get_index_5, relu, None)
        return store


buf332: ExternKernelSchedulerNode(ExternKernelAlloc)
buf332.writes = [StarDep(name='buf332')]
buf332.unmet_dependencies = [StarDep(name='buf331')]
buf332.met_dependencies = [StarDep(name='primals_118')]
buf332.users = [NodeUser(node=SchedulerNode(name='buf333'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf334'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf335'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf339'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf332.node.kernel = extern_kernels.convolution


buf333_buf334: FusedSchedulerNode(NoneType)
buf333_buf334.writes = [MemoryDep('buf333', c0, {c0: 1024}), MemoryDep('buf334', c0, {c0: 1024})]
buf333_buf334.unmet_dependencies = [MemoryDep('buf332', c0 + 1024*c1, {c0: 1024, c1: 16})]
buf333_buf334.met_dependencies = []
buf333_buf334.users = None
    buf333_buf334.snodes[0] =
    buf333: SchedulerNode(ComputedBuffer)
    buf333.writes = [MemoryDep('buf333', c0, {c0: 1024})]
    buf333.unmet_dependencies = [MemoryDep('buf332', c0 + 1024*c1, {c0: 1024, c1: 16})]
    buf333.met_dependencies = []
    buf333.users = [NodeUser(node=SchedulerNode(name='buf337'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf339'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf333.group.device = cpu
    buf333.group.iteration = ((1024,), (16,))
    buf333.sizes = ([1024], [16])
    class buf333_loop_body:
        var_ranges = {z0: 1024, z1: 16}
        index0 = z0 + 1024*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf332', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf333', get_index_1, getitem)
            return store_reduction
    buf333_buf334.snodes[1] =
    buf334: SchedulerNode(ComputedBuffer)
    buf334.writes = [MemoryDep('buf334', c0, {c0: 1024})]
    buf334.unmet_dependencies = [MemoryDep('buf332', c0 + 1024*c1, {c0: 1024, c1: 16})]
    buf334.met_dependencies = []
    buf334.users = [NodeUser(node=SchedulerNode(name='buf336'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf338'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf339'), can_inplace=False, is_weak=False)]
    buf334.group.device = cpu
    buf334.group.iteration = ((1024,), (16,))
    buf334.sizes = ([1024], [16])
    class buf334_loop_body:
        var_ranges = {z0: 1024, z1: 16}
        index0 = z0 + 1024*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf332', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf334', get_index_1, getitem_1)
            return store_reduction


buf336_buf338: FusedSchedulerNode(NoneType)
buf336_buf338.writes = [MemoryDep('buf336', c0, {c0: 1024}), MemoryDep('buf338', c0, {c0: 1024})]
buf336_buf338.unmet_dependencies = [MemoryDep('buf334', c0, {c0: 1024})]
buf336_buf338.met_dependencies = [MemoryDep('primals_280', c0, {c0: 1024})]
buf336_buf338.users = None
    buf336_buf338.snodes[0] =
    buf336: SchedulerNode(ComputedBuffer)
    buf336.writes = [MemoryDep('buf336', c0, {c0: 1024})]
    buf336.unmet_dependencies = [MemoryDep('buf334', c0, {c0: 1024})]
    buf336.met_dependencies = []
    buf336.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf336.group.device = cpu
    buf336.group.iteration = ((1024,), ())
    buf336.sizes = ([1024], [])
    class buf336_loop_body:
        var_ranges = {z0: 1024}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf334', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf336', get_index_1, rsqrt, None)
            return store
    buf336_buf338.snodes[1] =
    buf338: SchedulerNode(ComputedBuffer)
    buf338.writes = [MemoryDep('buf338', c0, {c0: 1024})]
    buf338.unmet_dependencies = [MemoryDep('buf334', c0, {c0: 1024})]
    buf338.met_dependencies = [MemoryDep('primals_280', c0, {c0: 1024})]
    buf338.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf338.group.device = cpu
    buf338.group.iteration = ((1024,), ())
    buf338.sizes = ([1024], [])
    class buf338_loop_body:
        var_ranges = {z0: 1024}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf334', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0666666666666667, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_280', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf338', get_index_2, add, None)
            return store


buf337: SchedulerNode(ComputedBuffer)
buf337.writes = [MemoryDep('buf337', c0, {c0: 1024})]
buf337.unmet_dependencies = [MemoryDep('buf333', c0, {c0: 1024})]
buf337.met_dependencies = [MemoryDep('primals_279', c0, {c0: 1024})]
buf337.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf337.group.device = cpu
buf337.group.iteration = ((1024,), ())
buf337.sizes = ([1024], [])
class buf337_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_279', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf337', get_index_2, add, None)
        return store


buf339: SchedulerNode(ComputedBuffer)
buf339.writes = [MemoryDep('buf339', c0, {c0: 16384})]
buf339.unmet_dependencies = 
    [   MemoryDep('buf315', c0, {c0: 16384}),
        MemoryDep('buf332', c0, {c0: 16384}),
        MemoryDep('buf333', c1, {c0: 16, c1: 1024}),
        MemoryDep('buf334', c1, {c0: 16, c1: 1024})]
buf339.met_dependencies = 
    [   MemoryDep('primals_119', c1, {c0: 16, c1: 1024}),
        MemoryDep('primals_120', c1, {c0: 16, c1: 1024})]
buf339.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf340'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf363'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf339.group.device = cpu
buf339.group.iteration = ((16, 1024), ())
buf339.sizes = ([16, 1024], [])
class buf339_loop_body:
    var_ranges = {z0: 16, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf333', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf334', get_index_2)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_119', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_120', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf315', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf339', get_index_6, relu, None)
        return store


buf340: ExternKernelSchedulerNode(ExternKernelAlloc)
buf340.writes = [StarDep(name='buf340')]
buf340.unmet_dependencies = [StarDep(name='buf339')]
buf340.met_dependencies = [StarDep(name='primals_121')]
buf340.users = [NodeUser(node=SchedulerNode(name='buf341'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf342'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf343'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf347'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf340.node.kernel = extern_kernels.convolution


buf341_buf342: FusedSchedulerNode(NoneType)
buf341_buf342.writes = [MemoryDep('buf341', c0, {c0: 256}), MemoryDep('buf342', c0, {c0: 256})]
buf341_buf342.unmet_dependencies = [MemoryDep('buf340', c0 + 256*c1, {c0: 256, c1: 16})]
buf341_buf342.met_dependencies = []
buf341_buf342.users = None
    buf341_buf342.snodes[0] =
    buf341: SchedulerNode(ComputedBuffer)
    buf341.writes = [MemoryDep('buf341', c0, {c0: 256})]
    buf341.unmet_dependencies = [MemoryDep('buf340', c0 + 256*c1, {c0: 256, c1: 16})]
    buf341.met_dependencies = []
    buf341.users = [NodeUser(node=SchedulerNode(name='buf345'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf347'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf341.group.device = cpu
    buf341.group.iteration = ((256,), (16,))
    buf341.sizes = ([256], [16])
    class buf341_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf340', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf341', get_index_1, getitem)
            return store_reduction
    buf341_buf342.snodes[1] =
    buf342: SchedulerNode(ComputedBuffer)
    buf342.writes = [MemoryDep('buf342', c0, {c0: 256})]
    buf342.unmet_dependencies = [MemoryDep('buf340', c0 + 256*c1, {c0: 256, c1: 16})]
    buf342.met_dependencies = []
    buf342.users = [NodeUser(node=SchedulerNode(name='buf344'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf346'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf347'), can_inplace=False, is_weak=False)]
    buf342.group.device = cpu
    buf342.group.iteration = ((256,), (16,))
    buf342.sizes = ([256], [16])
    class buf342_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf340', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf342', get_index_1, getitem_1)
            return store_reduction


buf344_buf346: FusedSchedulerNode(NoneType)
buf344_buf346.writes = [MemoryDep('buf344', c0, {c0: 256}), MemoryDep('buf346', c0, {c0: 256})]
buf344_buf346.unmet_dependencies = [MemoryDep('buf342', c0, {c0: 256})]
buf344_buf346.met_dependencies = [MemoryDep('primals_283', c0, {c0: 256})]
buf344_buf346.users = None
    buf344_buf346.snodes[0] =
    buf344: SchedulerNode(ComputedBuffer)
    buf344.writes = [MemoryDep('buf344', c0, {c0: 256})]
    buf344.unmet_dependencies = [MemoryDep('buf342', c0, {c0: 256})]
    buf344.met_dependencies = []
    buf344.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf344.group.device = cpu
    buf344.group.iteration = ((256,), ())
    buf344.sizes = ([256], [])
    class buf344_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf342', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf344', get_index_1, rsqrt, None)
            return store
    buf344_buf346.snodes[1] =
    buf346: SchedulerNode(ComputedBuffer)
    buf346.writes = [MemoryDep('buf346', c0, {c0: 256})]
    buf346.unmet_dependencies = [MemoryDep('buf342', c0, {c0: 256})]
    buf346.met_dependencies = [MemoryDep('primals_283', c0, {c0: 256})]
    buf346.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf346.group.device = cpu
    buf346.group.iteration = ((256,), ())
    buf346.sizes = ([256], [])
    class buf346_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf342', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0666666666666667, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_283', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf346', get_index_2, add, None)
            return store


buf345: SchedulerNode(ComputedBuffer)
buf345.writes = [MemoryDep('buf345', c0, {c0: 256})]
buf345.unmet_dependencies = [MemoryDep('buf341', c0, {c0: 256})]
buf345.met_dependencies = [MemoryDep('primals_282', c0, {c0: 256})]
buf345.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf345.group.device = cpu
buf345.group.iteration = ((256,), ())
buf345.sizes = ([256], [])
class buf345_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf341', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_282', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf345', get_index_2, add, None)
        return store


buf347: SchedulerNode(ComputedBuffer)
buf347.writes = [MemoryDep('buf347', c0, {c0: 4096})]
buf347.unmet_dependencies = 
    [   MemoryDep('buf340', c0, {c0: 4096}),
        MemoryDep('buf341', c1, {c0: 16, c1: 256}),
        MemoryDep('buf342', c1, {c0: 16, c1: 256})]
buf347.met_dependencies = 
    [   MemoryDep('primals_122', c1, {c0: 16, c1: 256}),
        MemoryDep('primals_123', c1, {c0: 16, c1: 256})]
buf347.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf348'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf347.group.device = cpu
buf347.group.iteration = ((16, 256), ())
buf347.sizes = ([16, 256], [])
class buf347_loop_body:
    var_ranges = {z0: 16, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf341', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf342', get_index_2)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_122', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_123', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf347', get_index_5, relu, None)
        return store


buf348: ExternKernelSchedulerNode(ExternKernelAlloc)
buf348.writes = [StarDep(name='buf348')]
buf348.unmet_dependencies = [StarDep(name='buf13'), StarDep(name='buf347')]
buf348.met_dependencies = []
buf348.users = [NodeUser(node=SchedulerNode(name='buf349'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf350'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf351'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf355'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf348.node.kernel = extern_kernels.convolution


buf349_buf350: FusedSchedulerNode(NoneType)
buf349_buf350.writes = [MemoryDep('buf349', c0, {c0: 256}), MemoryDep('buf350', c0, {c0: 256})]
buf349_buf350.unmet_dependencies = [MemoryDep('buf348', c0 + 256*c1, {c0: 256, c1: 16})]
buf349_buf350.met_dependencies = []
buf349_buf350.users = None
    buf349_buf350.snodes[0] =
    buf349: SchedulerNode(ComputedBuffer)
    buf349.writes = [MemoryDep('buf349', c0, {c0: 256})]
    buf349.unmet_dependencies = [MemoryDep('buf348', c0 + 256*c1, {c0: 256, c1: 16})]
    buf349.met_dependencies = []
    buf349.users = [NodeUser(node=SchedulerNode(name='buf353'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf355'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf349.group.device = cpu
    buf349.group.iteration = ((256,), (16,))
    buf349.sizes = ([256], [16])
    class buf349_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf348', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf349', get_index_1, getitem)
            return store_reduction
    buf349_buf350.snodes[1] =
    buf350: SchedulerNode(ComputedBuffer)
    buf350.writes = [MemoryDep('buf350', c0, {c0: 256})]
    buf350.unmet_dependencies = [MemoryDep('buf348', c0 + 256*c1, {c0: 256, c1: 16})]
    buf350.met_dependencies = []
    buf350.users = [NodeUser(node=SchedulerNode(name='buf352'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf354'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf355'), can_inplace=False, is_weak=False)]
    buf350.group.device = cpu
    buf350.group.iteration = ((256,), (16,))
    buf350.sizes = ([256], [16])
    class buf350_loop_body:
        var_ranges = {z0: 256, z1: 16}
        index0 = z0 + 256*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf348', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf350', get_index_1, getitem_1)
            return store_reduction


buf352_buf354: FusedSchedulerNode(NoneType)
buf352_buf354.writes = [MemoryDep('buf352', c0, {c0: 256}), MemoryDep('buf354', c0, {c0: 256})]
buf352_buf354.unmet_dependencies = [MemoryDep('buf350', c0, {c0: 256})]
buf352_buf354.met_dependencies = [MemoryDep('primals_286', c0, {c0: 256})]
buf352_buf354.users = None
    buf352_buf354.snodes[0] =
    buf352: SchedulerNode(ComputedBuffer)
    buf352.writes = [MemoryDep('buf352', c0, {c0: 256})]
    buf352.unmet_dependencies = [MemoryDep('buf350', c0, {c0: 256})]
    buf352.met_dependencies = []
    buf352.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf352.group.device = cpu
    buf352.group.iteration = ((256,), ())
    buf352.sizes = ([256], [])
    class buf352_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf350', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf352', get_index_1, rsqrt, None)
            return store
    buf352_buf354.snodes[1] =
    buf354: SchedulerNode(ComputedBuffer)
    buf354.writes = [MemoryDep('buf354', c0, {c0: 256})]
    buf354.unmet_dependencies = [MemoryDep('buf350', c0, {c0: 256})]
    buf354.met_dependencies = [MemoryDep('primals_286', c0, {c0: 256})]
    buf354.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf354.group.device = cpu
    buf354.group.iteration = ((256,), ())
    buf354.sizes = ([256], [])
    class buf354_loop_body:
        var_ranges = {z0: 256}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf350', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0666666666666667, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_286', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf354', get_index_2, add, None)
            return store


buf353: SchedulerNode(ComputedBuffer)
buf353.writes = [MemoryDep('buf353', c0, {c0: 256})]
buf353.unmet_dependencies = [MemoryDep('buf349', c0, {c0: 256})]
buf353.met_dependencies = [MemoryDep('primals_285', c0, {c0: 256})]
buf353.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf353.group.device = cpu
buf353.group.iteration = ((256,), ())
buf353.sizes = ([256], [])
class buf353_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf349', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_285', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf353', get_index_2, add, None)
        return store


buf355: SchedulerNode(ComputedBuffer)
buf355.writes = [MemoryDep('buf355', c0, {c0: 4096})]
buf355.unmet_dependencies = 
    [   MemoryDep('buf348', c0, {c0: 4096}),
        MemoryDep('buf349', c1, {c0: 16, c1: 256}),
        MemoryDep('buf350', c1, {c0: 16, c1: 256})]
buf355.met_dependencies = 
    [   MemoryDep('primals_125', c1, {c0: 16, c1: 256}),
        MemoryDep('primals_126', c1, {c0: 16, c1: 256})]
buf355.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf356'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf355.group.device = cpu
buf355.group.iteration = ((16, 256), ())
buf355.sizes = ([16, 256], [])
class buf355_loop_body:
    var_ranges = {z0: 16, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf349', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf350', get_index_2)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_125', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_126', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf355', get_index_5, relu, None)
        return store


buf356: ExternKernelSchedulerNode(ExternKernelAlloc)
buf356.writes = [StarDep(name='buf356')]
buf356.unmet_dependencies = [StarDep(name='buf355')]
buf356.met_dependencies = [StarDep(name='primals_127')]
buf356.users = [NodeUser(node=SchedulerNode(name='buf357'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf358'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf359'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf363'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf356.node.kernel = extern_kernels.convolution


buf357_buf358: FusedSchedulerNode(NoneType)
buf357_buf358.writes = [MemoryDep('buf357', c0, {c0: 1024}), MemoryDep('buf358', c0, {c0: 1024})]
buf357_buf358.unmet_dependencies = [MemoryDep('buf356', c0 + 1024*c1, {c0: 1024, c1: 16})]
buf357_buf358.met_dependencies = []
buf357_buf358.users = None
    buf357_buf358.snodes[0] =
    buf357: SchedulerNode(ComputedBuffer)
    buf357.writes = [MemoryDep('buf357', c0, {c0: 1024})]
    buf357.unmet_dependencies = [MemoryDep('buf356', c0 + 1024*c1, {c0: 1024, c1: 16})]
    buf357.met_dependencies = []
    buf357.users = [NodeUser(node=SchedulerNode(name='buf361'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf363'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf357.group.device = cpu
    buf357.group.iteration = ((1024,), (16,))
    buf357.sizes = ([1024], [16])
    class buf357_loop_body:
        var_ranges = {z0: 1024, z1: 16}
        index0 = z0 + 1024*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf356', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf357', get_index_1, getitem)
            return store_reduction
    buf357_buf358.snodes[1] =
    buf358: SchedulerNode(ComputedBuffer)
    buf358.writes = [MemoryDep('buf358', c0, {c0: 1024})]
    buf358.unmet_dependencies = [MemoryDep('buf356', c0 + 1024*c1, {c0: 1024, c1: 16})]
    buf358.met_dependencies = []
    buf358.users = [NodeUser(node=SchedulerNode(name='buf360'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf362'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf363'), can_inplace=False, is_weak=False)]
    buf358.group.device = cpu
    buf358.group.iteration = ((1024,), (16,))
    buf358.sizes = ([1024], [16])
    class buf358_loop_body:
        var_ranges = {z0: 1024, z1: 16}
        index0 = z0 + 1024*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf356', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf358', get_index_1, getitem_1)
            return store_reduction


buf360_buf362: FusedSchedulerNode(NoneType)
buf360_buf362.writes = [MemoryDep('buf360', c0, {c0: 1024}), MemoryDep('buf362', c0, {c0: 1024})]
buf360_buf362.unmet_dependencies = [MemoryDep('buf358', c0, {c0: 1024})]
buf360_buf362.met_dependencies = [MemoryDep('primals_289', c0, {c0: 1024})]
buf360_buf362.users = None
    buf360_buf362.snodes[0] =
    buf360: SchedulerNode(ComputedBuffer)
    buf360.writes = [MemoryDep('buf360', c0, {c0: 1024})]
    buf360.unmet_dependencies = [MemoryDep('buf358', c0, {c0: 1024})]
    buf360.met_dependencies = []
    buf360.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf360.group.device = cpu
    buf360.group.iteration = ((1024,), ())
    buf360.sizes = ([1024], [])
    class buf360_loop_body:
        var_ranges = {z0: 1024}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf358', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf360', get_index_1, rsqrt, None)
            return store
    buf360_buf362.snodes[1] =
    buf362: SchedulerNode(ComputedBuffer)
    buf362.writes = [MemoryDep('buf362', c0, {c0: 1024})]
    buf362.unmet_dependencies = [MemoryDep('buf358', c0, {c0: 1024})]
    buf362.met_dependencies = [MemoryDep('primals_289', c0, {c0: 1024})]
    buf362.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf362.group.device = cpu
    buf362.group.iteration = ((1024,), ())
    buf362.sizes = ([1024], [])
    class buf362_loop_body:
        var_ranges = {z0: 1024}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf358', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0666666666666667, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_289', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf362', get_index_2, add, None)
            return store


buf361: SchedulerNode(ComputedBuffer)
buf361.writes = [MemoryDep('buf361', c0, {c0: 1024})]
buf361.unmet_dependencies = [MemoryDep('buf357', c0, {c0: 1024})]
buf361.met_dependencies = [MemoryDep('primals_288', c0, {c0: 1024})]
buf361.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf361.group.device = cpu
buf361.group.iteration = ((1024,), ())
buf361.sizes = ([1024], [])
class buf361_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_288', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf361', get_index_2, add, None)
        return store


buf363: SchedulerNode(ComputedBuffer)
buf363.writes = [MemoryDep('buf363', c0, {c0: 16384})]
buf363.unmet_dependencies = 
    [   MemoryDep('buf339', c0, {c0: 16384}),
        MemoryDep('buf356', c0, {c0: 16384}),
        MemoryDep('buf357', c1, {c0: 16, c1: 1024}),
        MemoryDep('buf358', c1, {c0: 16, c1: 1024})]
buf363.met_dependencies = 
    [   MemoryDep('primals_128', c1, {c0: 16, c1: 1024}),
        MemoryDep('primals_129', c1, {c0: 16, c1: 1024})]
buf363.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf364'), can_inplace=False, is_weak=False), NodeUser(node=ExternKernelSchedulerNode(name='buf383'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf363.group.device = cpu
buf363.group.iteration = ((16, 1024), ())
buf363.sizes = ([16, 1024], [])
class buf363_loop_body:
    var_ranges = {z0: 16, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf356', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf357', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf358', get_index_2)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_128', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_129', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf339', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf363', get_index_6, relu, None)
        return store


buf364: ExternKernelSchedulerNode(ExternKernelAlloc)
buf364.writes = [StarDep(name='buf364')]
buf364.unmet_dependencies = [StarDep(name='buf363')]
buf364.met_dependencies = [StarDep(name='primals_130')]
buf364.users = [NodeUser(node=SchedulerNode(name='buf365'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf366'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf367'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf371'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf364.node.kernel = extern_kernels.convolution


buf365_buf366: FusedSchedulerNode(NoneType)
buf365_buf366.writes = [MemoryDep('buf365', c0, {c0: 512}), MemoryDep('buf366', c0, {c0: 512})]
buf365_buf366.unmet_dependencies = [MemoryDep('buf364', c0 + 512*c1, {c0: 512, c1: 16})]
buf365_buf366.met_dependencies = []
buf365_buf366.users = None
    buf365_buf366.snodes[0] =
    buf365: SchedulerNode(ComputedBuffer)
    buf365.writes = [MemoryDep('buf365', c0, {c0: 512})]
    buf365.unmet_dependencies = [MemoryDep('buf364', c0 + 512*c1, {c0: 512, c1: 16})]
    buf365.met_dependencies = []
    buf365.users = [NodeUser(node=SchedulerNode(name='buf369'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf371'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf365.group.device = cpu
    buf365.group.iteration = ((512,), (16,))
    buf365.sizes = ([512], [16])
    class buf365_loop_body:
        var_ranges = {z0: 512, z1: 16}
        index0 = z0 + 512*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf364', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf365', get_index_1, getitem)
            return store_reduction
    buf365_buf366.snodes[1] =
    buf366: SchedulerNode(ComputedBuffer)
    buf366.writes = [MemoryDep('buf366', c0, {c0: 512})]
    buf366.unmet_dependencies = [MemoryDep('buf364', c0 + 512*c1, {c0: 512, c1: 16})]
    buf366.met_dependencies = []
    buf366.users = [NodeUser(node=SchedulerNode(name='buf368'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf370'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf371'), can_inplace=False, is_weak=False)]
    buf366.group.device = cpu
    buf366.group.iteration = ((512,), (16,))
    buf366.sizes = ([512], [16])
    class buf366_loop_body:
        var_ranges = {z0: 512, z1: 16}
        index0 = z0 + 512*z1
        index1 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf364', get_index)
            reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
            getitem = reduction[0]
            getitem_1 = reduction[1]
            getitem_2 = reduction[2]
            get_index_1 = self.get_index('index1')
            store_reduction = ops.store_reduction('buf366', get_index_1, getitem_1)
            return store_reduction


buf368_buf370: FusedSchedulerNode(NoneType)
buf368_buf370.writes = [MemoryDep('buf368', c0, {c0: 512}), MemoryDep('buf370', c0, {c0: 512})]
buf368_buf370.unmet_dependencies = [MemoryDep('buf366', c0, {c0: 512})]
buf368_buf370.met_dependencies = [MemoryDep('primals_292', c0, {c0: 512})]
buf368_buf370.users = None
    buf368_buf370.snodes[0] =
    buf368: SchedulerNode(ComputedBuffer)
    buf368.writes = [MemoryDep('buf368', c0, {c0: 512})]
    buf368.unmet_dependencies = [MemoryDep('buf366', c0, {c0: 512})]
    buf368.met_dependencies = []
    buf368.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf368.group.device = cpu
    buf368.group.iteration = ((512,), ())
    buf368.sizes = ([512], [])
    class buf368_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf366', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1e-05, torch.float32)
            add = ops.add(truediv, constant_1)
            rsqrt = ops.rsqrt(add)
            get_index_1 = self.get_index('index0')
            store = ops.store('buf368', get_index_1, rsqrt, None)
            return store
    buf368_buf370.snodes[1] =
    buf370: SchedulerNode(ComputedBuffer)
    buf370.writes = [MemoryDep('buf370', c0, {c0: 512})]
    buf370.unmet_dependencies = [MemoryDep('buf366', c0, {c0: 512})]
    buf370.met_dependencies = [MemoryDep('primals_292', c0, {c0: 512})]
    buf370.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf370.group.device = cpu
    buf370.group.iteration = ((512,), ())
    buf370.sizes = ([512], [])
    class buf370_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf366', get_index)
            constant = ops.constant(16.0, torch.float32)
            truediv = ops.truediv(load, constant)
            constant_1 = ops.constant(1.0666666666666667, torch.float32)
            mul = ops.mul(truediv, constant_1)
            constant_2 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_2)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_292', get_index_1)
            constant_3 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_3)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf370', get_index_2, add, None)
            return store


buf369: SchedulerNode(ComputedBuffer)
buf369.writes = [MemoryDep('buf369', c0, {c0: 512})]
buf369.unmet_dependencies = [MemoryDep('buf365', c0, {c0: 512})]
buf369.met_dependencies = [MemoryDep('primals_291', c0, {c0: 512})]
buf369.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf369.group.device = cpu
buf369.group.iteration = ((512,), ())
buf369.sizes = ([512], [])
class buf369_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf365', get_index)
        constant = ops.constant(0.1, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_291', get_index_1)
        constant_1 = ops.constant(0.9, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        add = ops.add(mul, mul_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf369', get_index_2, add, None)
        return store


buf371: SchedulerNode(ComputedBuffer)
buf371.writes = [MemoryDep('buf371', c0, {c0: 8192})]
buf371.unmet_dependencies = 
    [   MemoryDep('buf364', c0, {c0: 8192}),
        MemoryDep('buf365', c1, {c0: 16, c1: 512}),
        MemoryDep('buf366', c1, {c0: 16, c1: 512})]
buf371.met_dependencies = 
    [   MemoryDep('primals_131', c1, {c0: 16, c1: 512}),
        MemoryDep('primals_132', c1, {c0: 16, c1: 512})]
buf371.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf372'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf371.group.device = cpu
buf371.group.iteration = ((16, 512), ())
buf371.sizes = ([16, 512], [])
class buf371_loop_body:
    var_ranges = {z0: 16, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf364', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf365', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf366', get_index_2)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_131', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_132', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf371', get_index_5, relu, None)
        return store


buf372: ExternKernelSchedulerNode(ExternKernelAlloc)
buf372.writes = [StarDep(name='buf372')]
buf372.unmet_dependencies = [StarDep(name='buf14'), StarDep(name='buf371')]
buf372.met_dependencies = []
buf372.users = [NodeUser(node=SchedulerNode(name='buf373'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf374'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf377'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf372.node.kernel = extern_kernels.convolution


buf373_buf374_buf375_buf376: FusedSchedulerNode(NoneType)
buf373_buf374_buf375_buf376.writes = 
    [   MemoryDep('buf373', c0, {c0: 512}),
        MemoryDep('buf374', c0, {c0: 512}),
        MemoryDep('buf375', c0, {c0: 512}),
        MemoryDep('buf376', c0, {c0: 512})]
buf373_buf374_buf375_buf376.unmet_dependencies = 
    [   MemoryDep('buf372', c0 + 1024, {c0: 512}),
        MemoryDep('buf372', c0 + 1536, {c0: 512}),
        MemoryDep('buf372', c0 + 512, {c0: 512}),
        MemoryDep('buf372', c0, {c0: 512})]
buf373_buf374_buf375_buf376.met_dependencies = 
    [   MemoryDep('primals_294', c0, {c0: 512}),
        MemoryDep('primals_295', c0, {c0: 512})]
buf373_buf374_buf375_buf376.users = None
    buf373_buf374_buf375_buf376.snodes[0] =
    buf373: SchedulerNode(ComputedBuffer)
    buf373.writes = [MemoryDep('buf373', c0, {c0: 512})]
    buf373.unmet_dependencies = 
        [   MemoryDep('buf372', c0 + 1024, {c0: 512}),
            MemoryDep('buf372', c0 + 1536, {c0: 512}),
            MemoryDep('buf372', c0 + 512, {c0: 512}),
            MemoryDep('buf372', c0, {c0: 512})]
    buf373.met_dependencies = []
    buf373.users = [NodeUser(node=SchedulerNode(name='buf374'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf375'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf377'), can_inplace=False, is_weak=False)]
    buf373.group.device = cpu
    buf373.group.iteration = ((512,), ())
    buf373.sizes = ([512], [])
    class buf373_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        index1 = z0 + 512
        index2 = z0 + 1024
        index3 = z0 + 1536
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf372', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('buf372', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index2')
            load_2 = ops.load('buf372', get_index_2)
            add_1 = ops.add(add, load_2)
            get_index_3 = self.get_index('index3')
            load_3 = ops.load('buf372', get_index_3)
            add_2 = ops.add(add_1, load_3)
            constant = ops.constant(4.0, torch.float32)
            div = ops.div(add_2, constant)
            get_index_4 = self.get_index('index0')
            store = ops.store('buf373', get_index_4, div, None)
            return store
    buf373_buf374_buf375_buf376.snodes[1] =
    buf374: SchedulerNode(ComputedBuffer)
    buf374.writes = [MemoryDep('buf374', c0, {c0: 512})]
    buf374.unmet_dependencies = 
        [   MemoryDep('buf372', c0 + 1024, {c0: 512}),
            MemoryDep('buf372', c0 + 1536, {c0: 512}),
            MemoryDep('buf372', c0 + 512, {c0: 512}),
            MemoryDep('buf372', c0, {c0: 512}),
            MemoryDep('buf373', c0, {c0: 512})]
    buf374.met_dependencies = []
    buf374.users = [NodeUser(node=SchedulerNode(name='buf376'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf377'), can_inplace=False, is_weak=False)]
    buf374.group.device = cpu
    buf374.group.iteration = ((512,), ())
    buf374.sizes = ([512], [])
    class buf374_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        index1 = z0 + 512
        index2 = z0 + 1024
        index3 = z0 + 1536
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf372', get_index)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('buf373', get_index_1)
            sub = ops.sub(load, load_1)
            square = ops.square(sub)
            get_index_2 = self.get_index('index1')
            load_2 = ops.load('buf372', get_index_2)
            get_index_3 = self.get_index('index0')
            load_3 = ops.load('buf373', get_index_3)
            sub_1 = ops.sub(load_2, load_3)
            square_1 = ops.square(sub_1)
            add = ops.add(square, square_1)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf372', get_index_4)
            get_index_5 = self.get_index('index0')
            load_5 = ops.load('buf373', get_index_5)
            sub_2 = ops.sub(load_4, load_5)
            square_2 = ops.square(sub_2)
            add_1 = ops.add(add, square_2)
            get_index_6 = self.get_index('index3')
            load_6 = ops.load('buf372', get_index_6)
            get_index_7 = self.get_index('index0')
            load_7 = ops.load('buf373', get_index_7)
            sub_3 = ops.sub(load_6, load_7)
            square_3 = ops.square(sub_3)
            add_2 = ops.add(add_1, square_3)
            constant = ops.constant(4.0, torch.float32)
            div = ops.div(add_2, constant)
            get_index_8 = self.get_index('index0')
            store = ops.store('buf374', get_index_8, div, None)
            return store
    buf373_buf374_buf375_buf376.snodes[2] =
    buf375: SchedulerNode(ComputedBuffer)
    buf375.writes = [MemoryDep('buf375', c0, {c0: 512})]
    buf375.unmet_dependencies = [MemoryDep('buf373', c0, {c0: 512})]
    buf375.met_dependencies = [MemoryDep('primals_294', c0, {c0: 512})]
    buf375.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf375.group.device = cpu
    buf375.group.iteration = ((512,), ())
    buf375.sizes = ([512], [])
    class buf375_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf373', get_index)
            constant = ops.constant(0.1, torch.float32)
            mul = ops.mul(load, constant)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_294', get_index_1)
            constant_1 = ops.constant(0.9, torch.float32)
            mul_1 = ops.mul(load_1, constant_1)
            add = ops.add(mul, mul_1)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf375', get_index_2, add, None)
            return store
    buf373_buf374_buf375_buf376.snodes[3] =
    buf376: SchedulerNode(ComputedBuffer)
    buf376.writes = [MemoryDep('buf376', c0, {c0: 512})]
    buf376.unmet_dependencies = [MemoryDep('buf374', c0, {c0: 512})]
    buf376.met_dependencies = [MemoryDep('primals_295', c0, {c0: 512})]
    buf376.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf376.group.device = cpu
    buf376.group.iteration = ((512,), ())
    buf376.sizes = ([512], [])
    class buf376_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf374', get_index)
            constant = ops.constant(1.3333333333333333, torch.float32)
            mul = ops.mul(load, constant)
            constant_1 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_1)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_295', get_index_1)
            constant_2 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_2)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf376', get_index_2, add, None)
            return store


buf377: SchedulerNode(ComputedBuffer)
buf377.writes = [MemoryDep('buf377', c0, {c0: 2048})]
buf377.unmet_dependencies = 
    [   MemoryDep('buf372', c0, {c0: 2048}),
        MemoryDep('buf373', c1, {c0: 4, c1: 512}),
        MemoryDep('buf374', c1, {c0: 4, c1: 512})]
buf377.met_dependencies = 
    [   MemoryDep('primals_134', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_135', c1, {c0: 4, c1: 512})]
buf377.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf378'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf377.group.device = cpu
buf377.group.iteration = ((4, 512), ())
buf377.sizes = ([4, 512], [])
class buf377_loop_body:
    var_ranges = {z0: 4, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf373', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf374', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_134', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_135', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf377', get_index_5, relu, None)
        return store


buf378: ExternKernelSchedulerNode(ExternKernelAlloc)
buf378.writes = [StarDep(name='buf378')]
buf378.unmet_dependencies = [StarDep(name='buf377')]
buf378.met_dependencies = [StarDep(name='primals_136')]
buf378.users = [NodeUser(node=SchedulerNode(name='buf379'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf380'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf388'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf378.node.kernel = extern_kernels.convolution


buf379_buf380_buf381_buf382: FusedSchedulerNode(NoneType)
buf379_buf380_buf381_buf382.writes = 
    [   MemoryDep('buf379', c0, {c0: 2048}),
        MemoryDep('buf380', c0, {c0: 2048}),
        MemoryDep('buf381', c0, {c0: 2048}),
        MemoryDep('buf382', c0, {c0: 2048})]
buf379_buf380_buf381_buf382.unmet_dependencies = 
    [   MemoryDep('buf378', c0 + 2048, {c0: 2048}),
        MemoryDep('buf378', c0 + 4096, {c0: 2048}),
        MemoryDep('buf378', c0 + 6144, {c0: 2048}),
        MemoryDep('buf378', c0, {c0: 2048})]
buf379_buf380_buf381_buf382.met_dependencies = 
    [   MemoryDep('primals_297', c0, {c0: 2048}),
        MemoryDep('primals_298', c0, {c0: 2048})]
buf379_buf380_buf381_buf382.users = None
    buf379_buf380_buf381_buf382.snodes[0] =
    buf379: SchedulerNode(ComputedBuffer)
    buf379.writes = [MemoryDep('buf379', c0, {c0: 2048})]
    buf379.unmet_dependencies = 
        [   MemoryDep('buf378', c0 + 2048, {c0: 2048}),
            MemoryDep('buf378', c0 + 4096, {c0: 2048}),
            MemoryDep('buf378', c0 + 6144, {c0: 2048}),
            MemoryDep('buf378', c0, {c0: 2048})]
    buf379.met_dependencies = []
    buf379.users = [NodeUser(node=SchedulerNode(name='buf380'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf381'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf388'), can_inplace=False, is_weak=False)]
    buf379.group.device = cpu
    buf379.group.iteration = ((2048,), ())
    buf379.sizes = ([2048], [])
    class buf379_loop_body:
        var_ranges = {z0: 2048}
        index0 = z0
        index1 = z0 + 2048
        index2 = z0 + 4096
        index3 = z0 + 6144
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf378', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('buf378', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index2')
            load_2 = ops.load('buf378', get_index_2)
            add_1 = ops.add(add, load_2)
            get_index_3 = self.get_index('index3')
            load_3 = ops.load('buf378', get_index_3)
            add_2 = ops.add(add_1, load_3)
            constant = ops.constant(4.0, torch.float32)
            div = ops.div(add_2, constant)
            get_index_4 = self.get_index('index0')
            store = ops.store('buf379', get_index_4, div, None)
            return store
    buf379_buf380_buf381_buf382.snodes[1] =
    buf380: SchedulerNode(ComputedBuffer)
    buf380.writes = [MemoryDep('buf380', c0, {c0: 2048})]
    buf380.unmet_dependencies = 
        [   MemoryDep('buf378', c0 + 2048, {c0: 2048}),
            MemoryDep('buf378', c0 + 4096, {c0: 2048}),
            MemoryDep('buf378', c0 + 6144, {c0: 2048}),
            MemoryDep('buf378', c0, {c0: 2048}),
            MemoryDep('buf379', c0, {c0: 2048})]
    buf380.met_dependencies = []
    buf380.users = [NodeUser(node=SchedulerNode(name='buf382'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf388'), can_inplace=False, is_weak=False)]
    buf380.group.device = cpu
    buf380.group.iteration = ((2048,), ())
    buf380.sizes = ([2048], [])
    class buf380_loop_body:
        var_ranges = {z0: 2048}
        index0 = z0
        index1 = z0 + 2048
        index2 = z0 + 4096
        index3 = z0 + 6144
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf378', get_index)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('buf379', get_index_1)
            sub = ops.sub(load, load_1)
            square = ops.square(sub)
            get_index_2 = self.get_index('index1')
            load_2 = ops.load('buf378', get_index_2)
            get_index_3 = self.get_index('index0')
            load_3 = ops.load('buf379', get_index_3)
            sub_1 = ops.sub(load_2, load_3)
            square_1 = ops.square(sub_1)
            add = ops.add(square, square_1)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf378', get_index_4)
            get_index_5 = self.get_index('index0')
            load_5 = ops.load('buf379', get_index_5)
            sub_2 = ops.sub(load_4, load_5)
            square_2 = ops.square(sub_2)
            add_1 = ops.add(add, square_2)
            get_index_6 = self.get_index('index3')
            load_6 = ops.load('buf378', get_index_6)
            get_index_7 = self.get_index('index0')
            load_7 = ops.load('buf379', get_index_7)
            sub_3 = ops.sub(load_6, load_7)
            square_3 = ops.square(sub_3)
            add_2 = ops.add(add_1, square_3)
            constant = ops.constant(4.0, torch.float32)
            div = ops.div(add_2, constant)
            get_index_8 = self.get_index('index0')
            store = ops.store('buf380', get_index_8, div, None)
            return store
    buf379_buf380_buf381_buf382.snodes[2] =
    buf381: SchedulerNode(ComputedBuffer)
    buf381.writes = [MemoryDep('buf381', c0, {c0: 2048})]
    buf381.unmet_dependencies = [MemoryDep('buf379', c0, {c0: 2048})]
    buf381.met_dependencies = [MemoryDep('primals_297', c0, {c0: 2048})]
    buf381.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf381.group.device = cpu
    buf381.group.iteration = ((2048,), ())
    buf381.sizes = ([2048], [])
    class buf381_loop_body:
        var_ranges = {z0: 2048}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf379', get_index)
            constant = ops.constant(0.1, torch.float32)
            mul = ops.mul(load, constant)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_297', get_index_1)
            constant_1 = ops.constant(0.9, torch.float32)
            mul_1 = ops.mul(load_1, constant_1)
            add = ops.add(mul, mul_1)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf381', get_index_2, add, None)
            return store
    buf379_buf380_buf381_buf382.snodes[3] =
    buf382: SchedulerNode(ComputedBuffer)
    buf382.writes = [MemoryDep('buf382', c0, {c0: 2048})]
    buf382.unmet_dependencies = [MemoryDep('buf380', c0, {c0: 2048})]
    buf382.met_dependencies = [MemoryDep('primals_298', c0, {c0: 2048})]
    buf382.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf382.group.device = cpu
    buf382.group.iteration = ((2048,), ())
    buf382.sizes = ([2048], [])
    class buf382_loop_body:
        var_ranges = {z0: 2048}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf380', get_index)
            constant = ops.constant(1.3333333333333333, torch.float32)
            mul = ops.mul(load, constant)
            constant_1 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_1)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_298', get_index_1)
            constant_2 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_2)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf382', get_index_2, add, None)
            return store


buf383: ExternKernelSchedulerNode(ExternKernelAlloc)
buf383.writes = [StarDep(name='buf383')]
buf383.unmet_dependencies = [StarDep(name='buf363')]
buf383.met_dependencies = [StarDep(name='primals_139')]
buf383.users = [NodeUser(node=SchedulerNode(name='buf384'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf385'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf388'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf383.node.kernel = extern_kernels.convolution


buf384_buf385_buf386_buf387: FusedSchedulerNode(NoneType)
buf384_buf385_buf386_buf387.writes = 
    [   MemoryDep('buf384', c0, {c0: 2048}),
        MemoryDep('buf385', c0, {c0: 2048}),
        MemoryDep('buf386', c0, {c0: 2048}),
        MemoryDep('buf387', c0, {c0: 2048})]
buf384_buf385_buf386_buf387.unmet_dependencies = 
    [   MemoryDep('buf383', c0 + 2048, {c0: 2048}),
        MemoryDep('buf383', c0 + 4096, {c0: 2048}),
        MemoryDep('buf383', c0 + 6144, {c0: 2048}),
        MemoryDep('buf383', c0, {c0: 2048})]
buf384_buf385_buf386_buf387.met_dependencies = 
    [   MemoryDep('primals_300', c0, {c0: 2048}),
        MemoryDep('primals_301', c0, {c0: 2048})]
buf384_buf385_buf386_buf387.users = None
    buf384_buf385_buf386_buf387.snodes[0] =
    buf384: SchedulerNode(ComputedBuffer)
    buf384.writes = [MemoryDep('buf384', c0, {c0: 2048})]
    buf384.unmet_dependencies = 
        [   MemoryDep('buf383', c0 + 2048, {c0: 2048}),
            MemoryDep('buf383', c0 + 4096, {c0: 2048}),
            MemoryDep('buf383', c0 + 6144, {c0: 2048}),
            MemoryDep('buf383', c0, {c0: 2048})]
    buf384.met_dependencies = []
    buf384.users = [NodeUser(node=SchedulerNode(name='buf385'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf386'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf388'), can_inplace=False, is_weak=False)]
    buf384.group.device = cpu
    buf384.group.iteration = ((2048,), ())
    buf384.sizes = ([2048], [])
    class buf384_loop_body:
        var_ranges = {z0: 2048}
        index0 = z0
        index1 = z0 + 2048
        index2 = z0 + 4096
        index3 = z0 + 6144
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf383', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('buf383', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index2')
            load_2 = ops.load('buf383', get_index_2)
            add_1 = ops.add(add, load_2)
            get_index_3 = self.get_index('index3')
            load_3 = ops.load('buf383', get_index_3)
            add_2 = ops.add(add_1, load_3)
            constant = ops.constant(4.0, torch.float32)
            div = ops.div(add_2, constant)
            get_index_4 = self.get_index('index0')
            store = ops.store('buf384', get_index_4, div, None)
            return store
    buf384_buf385_buf386_buf387.snodes[1] =
    buf385: SchedulerNode(ComputedBuffer)
    buf385.writes = [MemoryDep('buf385', c0, {c0: 2048})]
    buf385.unmet_dependencies = 
        [   MemoryDep('buf383', c0 + 2048, {c0: 2048}),
            MemoryDep('buf383', c0 + 4096, {c0: 2048}),
            MemoryDep('buf383', c0 + 6144, {c0: 2048}),
            MemoryDep('buf383', c0, {c0: 2048}),
            MemoryDep('buf384', c0, {c0: 2048})]
    buf385.met_dependencies = []
    buf385.users = [NodeUser(node=SchedulerNode(name='buf387'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf388'), can_inplace=False, is_weak=False)]
    buf385.group.device = cpu
    buf385.group.iteration = ((2048,), ())
    buf385.sizes = ([2048], [])
    class buf385_loop_body:
        var_ranges = {z0: 2048}
        index0 = z0
        index1 = z0 + 2048
        index2 = z0 + 4096
        index3 = z0 + 6144
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf383', get_index)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('buf384', get_index_1)
            sub = ops.sub(load, load_1)
            square = ops.square(sub)
            get_index_2 = self.get_index('index1')
            load_2 = ops.load('buf383', get_index_2)
            get_index_3 = self.get_index('index0')
            load_3 = ops.load('buf384', get_index_3)
            sub_1 = ops.sub(load_2, load_3)
            square_1 = ops.square(sub_1)
            add = ops.add(square, square_1)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf383', get_index_4)
            get_index_5 = self.get_index('index0')
            load_5 = ops.load('buf384', get_index_5)
            sub_2 = ops.sub(load_4, load_5)
            square_2 = ops.square(sub_2)
            add_1 = ops.add(add, square_2)
            get_index_6 = self.get_index('index3')
            load_6 = ops.load('buf383', get_index_6)
            get_index_7 = self.get_index('index0')
            load_7 = ops.load('buf384', get_index_7)
            sub_3 = ops.sub(load_6, load_7)
            square_3 = ops.square(sub_3)
            add_2 = ops.add(add_1, square_3)
            constant = ops.constant(4.0, torch.float32)
            div = ops.div(add_2, constant)
            get_index_8 = self.get_index('index0')
            store = ops.store('buf385', get_index_8, div, None)
            return store
    buf384_buf385_buf386_buf387.snodes[2] =
    buf386: SchedulerNode(ComputedBuffer)
    buf386.writes = [MemoryDep('buf386', c0, {c0: 2048})]
    buf386.unmet_dependencies = [MemoryDep('buf384', c0, {c0: 2048})]
    buf386.met_dependencies = [MemoryDep('primals_300', c0, {c0: 2048})]
    buf386.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf386.group.device = cpu
    buf386.group.iteration = ((2048,), ())
    buf386.sizes = ([2048], [])
    class buf386_loop_body:
        var_ranges = {z0: 2048}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf384', get_index)
            constant = ops.constant(0.1, torch.float32)
            mul = ops.mul(load, constant)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_300', get_index_1)
            constant_1 = ops.constant(0.9, torch.float32)
            mul_1 = ops.mul(load_1, constant_1)
            add = ops.add(mul, mul_1)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf386', get_index_2, add, None)
            return store
    buf384_buf385_buf386_buf387.snodes[3] =
    buf387: SchedulerNode(ComputedBuffer)
    buf387.writes = [MemoryDep('buf387', c0, {c0: 2048})]
    buf387.unmet_dependencies = [MemoryDep('buf385', c0, {c0: 2048})]
    buf387.met_dependencies = [MemoryDep('primals_301', c0, {c0: 2048})]
    buf387.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf387.group.device = cpu
    buf387.group.iteration = ((2048,), ())
    buf387.sizes = ([2048], [])
    class buf387_loop_body:
        var_ranges = {z0: 2048}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf385', get_index)
            constant = ops.constant(1.3333333333333333, torch.float32)
            mul = ops.mul(load, constant)
            constant_1 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_1)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_301', get_index_1)
            constant_2 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_2)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf387', get_index_2, add, None)
            return store


buf388: SchedulerNode(ComputedBuffer)
buf388.writes = [MemoryDep('buf388', c0, {c0: 8192})]
buf388.unmet_dependencies = 
    [   MemoryDep('buf378', c0, {c0: 8192}),
        MemoryDep('buf379', c1, {c0: 4, c1: 2048}),
        MemoryDep('buf380', c1, {c0: 4, c1: 2048}),
        MemoryDep('buf383', c0, {c0: 8192}),
        MemoryDep('buf384', c1, {c0: 4, c1: 2048}),
        MemoryDep('buf385', c1, {c0: 4, c1: 2048})]
buf388.met_dependencies = 
    [   MemoryDep('primals_137', c1, {c0: 4, c1: 2048}),
        MemoryDep('primals_138', c1, {c0: 4, c1: 2048}),
        MemoryDep('primals_140', c1, {c0: 4, c1: 2048}),
        MemoryDep('primals_141', c1, {c0: 4, c1: 2048})]
buf388.users = [NodeUser(node=SchedulerNode(name='buf389'), can_inplace=True, is_weak=False)]
buf388.group.device = cpu
buf388.group.iteration = ((4, 2048), ())
buf388.sizes = ([4, 2048], [])
class buf388_loop_body:
    var_ranges = {z0: 4, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf379', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf380', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_137', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_138', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf383', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf384', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf385', get_index_7)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_1)
        rsqrt_1 = ops.rsqrt(add_2)
        mul_2 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_140', get_index_8)
        mul_3 = ops.mul(mul_2, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('primals_141', get_index_9)
        add_3 = ops.add(mul_3, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf388', get_index_10, add_4, None)
        return store


buf389: SchedulerNode(ComputedBuffer)
buf389.writes = [MemoryDep('buf389', c0, {c0: 8192})]
buf389.unmet_dependencies = [MemoryDep('buf388', c0, {c0: 8192})]
buf389.met_dependencies = []
buf389.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf390'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf407'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf389.group.device = cpu
buf389.group.iteration = ((8192,), ())
buf389.sizes = ([8192], [])
class buf389_loop_body:
    var_ranges = {z0: 8192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf388', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf389', get_index_1, relu, None)
        return store


buf390: ExternKernelSchedulerNode(ExternKernelAlloc)
buf390.writes = [StarDep(name='buf390')]
buf390.unmet_dependencies = [StarDep(name='buf389')]
buf390.met_dependencies = [StarDep(name='primals_142')]
buf390.users = [NodeUser(node=SchedulerNode(name='buf391'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf392'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf395'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf390.node.kernel = extern_kernels.convolution


buf391_buf392_buf393_buf394: FusedSchedulerNode(NoneType)
buf391_buf392_buf393_buf394.writes = 
    [   MemoryDep('buf391', c0, {c0: 512}),
        MemoryDep('buf392', c0, {c0: 512}),
        MemoryDep('buf393', c0, {c0: 512}),
        MemoryDep('buf394', c0, {c0: 512})]
buf391_buf392_buf393_buf394.unmet_dependencies = 
    [   MemoryDep('buf390', c0 + 1024, {c0: 512}),
        MemoryDep('buf390', c0 + 1536, {c0: 512}),
        MemoryDep('buf390', c0 + 512, {c0: 512}),
        MemoryDep('buf390', c0, {c0: 512})]
buf391_buf392_buf393_buf394.met_dependencies = 
    [   MemoryDep('primals_303', c0, {c0: 512}),
        MemoryDep('primals_304', c0, {c0: 512})]
buf391_buf392_buf393_buf394.users = None
    buf391_buf392_buf393_buf394.snodes[0] =
    buf391: SchedulerNode(ComputedBuffer)
    buf391.writes = [MemoryDep('buf391', c0, {c0: 512})]
    buf391.unmet_dependencies = 
        [   MemoryDep('buf390', c0 + 1024, {c0: 512}),
            MemoryDep('buf390', c0 + 1536, {c0: 512}),
            MemoryDep('buf390', c0 + 512, {c0: 512}),
            MemoryDep('buf390', c0, {c0: 512})]
    buf391.met_dependencies = []
    buf391.users = [NodeUser(node=SchedulerNode(name='buf392'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf393'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf395'), can_inplace=False, is_weak=False)]
    buf391.group.device = cpu
    buf391.group.iteration = ((512,), ())
    buf391.sizes = ([512], [])
    class buf391_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        index1 = z0 + 512
        index2 = z0 + 1024
        index3 = z0 + 1536
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf390', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('buf390', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index2')
            load_2 = ops.load('buf390', get_index_2)
            add_1 = ops.add(add, load_2)
            get_index_3 = self.get_index('index3')
            load_3 = ops.load('buf390', get_index_3)
            add_2 = ops.add(add_1, load_3)
            constant = ops.constant(4.0, torch.float32)
            div = ops.div(add_2, constant)
            get_index_4 = self.get_index('index0')
            store = ops.store('buf391', get_index_4, div, None)
            return store
    buf391_buf392_buf393_buf394.snodes[1] =
    buf392: SchedulerNode(ComputedBuffer)
    buf392.writes = [MemoryDep('buf392', c0, {c0: 512})]
    buf392.unmet_dependencies = 
        [   MemoryDep('buf390', c0 + 1024, {c0: 512}),
            MemoryDep('buf390', c0 + 1536, {c0: 512}),
            MemoryDep('buf390', c0 + 512, {c0: 512}),
            MemoryDep('buf390', c0, {c0: 512}),
            MemoryDep('buf391', c0, {c0: 512})]
    buf392.met_dependencies = []
    buf392.users = [NodeUser(node=SchedulerNode(name='buf394'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf395'), can_inplace=False, is_weak=False)]
    buf392.group.device = cpu
    buf392.group.iteration = ((512,), ())
    buf392.sizes = ([512], [])
    class buf392_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        index1 = z0 + 512
        index2 = z0 + 1024
        index3 = z0 + 1536
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf390', get_index)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('buf391', get_index_1)
            sub = ops.sub(load, load_1)
            square = ops.square(sub)
            get_index_2 = self.get_index('index1')
            load_2 = ops.load('buf390', get_index_2)
            get_index_3 = self.get_index('index0')
            load_3 = ops.load('buf391', get_index_3)
            sub_1 = ops.sub(load_2, load_3)
            square_1 = ops.square(sub_1)
            add = ops.add(square, square_1)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf390', get_index_4)
            get_index_5 = self.get_index('index0')
            load_5 = ops.load('buf391', get_index_5)
            sub_2 = ops.sub(load_4, load_5)
            square_2 = ops.square(sub_2)
            add_1 = ops.add(add, square_2)
            get_index_6 = self.get_index('index3')
            load_6 = ops.load('buf390', get_index_6)
            get_index_7 = self.get_index('index0')
            load_7 = ops.load('buf391', get_index_7)
            sub_3 = ops.sub(load_6, load_7)
            square_3 = ops.square(sub_3)
            add_2 = ops.add(add_1, square_3)
            constant = ops.constant(4.0, torch.float32)
            div = ops.div(add_2, constant)
            get_index_8 = self.get_index('index0')
            store = ops.store('buf392', get_index_8, div, None)
            return store
    buf391_buf392_buf393_buf394.snodes[2] =
    buf393: SchedulerNode(ComputedBuffer)
    buf393.writes = [MemoryDep('buf393', c0, {c0: 512})]
    buf393.unmet_dependencies = [MemoryDep('buf391', c0, {c0: 512})]
    buf393.met_dependencies = [MemoryDep('primals_303', c0, {c0: 512})]
    buf393.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf393.group.device = cpu
    buf393.group.iteration = ((512,), ())
    buf393.sizes = ([512], [])
    class buf393_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf391', get_index)
            constant = ops.constant(0.1, torch.float32)
            mul = ops.mul(load, constant)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_303', get_index_1)
            constant_1 = ops.constant(0.9, torch.float32)
            mul_1 = ops.mul(load_1, constant_1)
            add = ops.add(mul, mul_1)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf393', get_index_2, add, None)
            return store
    buf391_buf392_buf393_buf394.snodes[3] =
    buf394: SchedulerNode(ComputedBuffer)
    buf394.writes = [MemoryDep('buf394', c0, {c0: 512})]
    buf394.unmet_dependencies = [MemoryDep('buf392', c0, {c0: 512})]
    buf394.met_dependencies = [MemoryDep('primals_304', c0, {c0: 512})]
    buf394.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf394.group.device = cpu
    buf394.group.iteration = ((512,), ())
    buf394.sizes = ([512], [])
    class buf394_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf392', get_index)
            constant = ops.constant(1.3333333333333333, torch.float32)
            mul = ops.mul(load, constant)
            constant_1 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_1)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_304', get_index_1)
            constant_2 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_2)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf394', get_index_2, add, None)
            return store


buf395: SchedulerNode(ComputedBuffer)
buf395.writes = [MemoryDep('buf395', c0, {c0: 2048})]
buf395.unmet_dependencies = 
    [   MemoryDep('buf390', c0, {c0: 2048}),
        MemoryDep('buf391', c1, {c0: 4, c1: 512}),
        MemoryDep('buf392', c1, {c0: 4, c1: 512})]
buf395.met_dependencies = 
    [   MemoryDep('primals_143', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_144', c1, {c0: 4, c1: 512})]
buf395.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf396'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf395.group.device = cpu
buf395.group.iteration = ((4, 512), ())
buf395.sizes = ([4, 512], [])
class buf395_loop_body:
    var_ranges = {z0: 4, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf390', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf391', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf392', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_143', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_144', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf395', get_index_5, relu, None)
        return store


buf396: ExternKernelSchedulerNode(ExternKernelAlloc)
buf396.writes = [StarDep(name='buf396')]
buf396.unmet_dependencies = [StarDep(name='buf15'), StarDep(name='buf395')]
buf396.met_dependencies = []
buf396.users = [NodeUser(node=SchedulerNode(name='buf397'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf398'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf401'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf396.node.kernel = extern_kernels.convolution


buf397_buf398_buf399_buf400: FusedSchedulerNode(NoneType)
buf397_buf398_buf399_buf400.writes = 
    [   MemoryDep('buf397', c0, {c0: 512}),
        MemoryDep('buf398', c0, {c0: 512}),
        MemoryDep('buf399', c0, {c0: 512}),
        MemoryDep('buf400', c0, {c0: 512})]
buf397_buf398_buf399_buf400.unmet_dependencies = 
    [   MemoryDep('buf396', c0 + 1024, {c0: 512}),
        MemoryDep('buf396', c0 + 1536, {c0: 512}),
        MemoryDep('buf396', c0 + 512, {c0: 512}),
        MemoryDep('buf396', c0, {c0: 512})]
buf397_buf398_buf399_buf400.met_dependencies = 
    [   MemoryDep('primals_306', c0, {c0: 512}),
        MemoryDep('primals_307', c0, {c0: 512})]
buf397_buf398_buf399_buf400.users = None
    buf397_buf398_buf399_buf400.snodes[0] =
    buf397: SchedulerNode(ComputedBuffer)
    buf397.writes = [MemoryDep('buf397', c0, {c0: 512})]
    buf397.unmet_dependencies = 
        [   MemoryDep('buf396', c0 + 1024, {c0: 512}),
            MemoryDep('buf396', c0 + 1536, {c0: 512}),
            MemoryDep('buf396', c0 + 512, {c0: 512}),
            MemoryDep('buf396', c0, {c0: 512})]
    buf397.met_dependencies = []
    buf397.users = [NodeUser(node=SchedulerNode(name='buf398'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf399'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf401'), can_inplace=False, is_weak=False)]
    buf397.group.device = cpu
    buf397.group.iteration = ((512,), ())
    buf397.sizes = ([512], [])
    class buf397_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        index1 = z0 + 512
        index2 = z0 + 1024
        index3 = z0 + 1536
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf396', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('buf396', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index2')
            load_2 = ops.load('buf396', get_index_2)
            add_1 = ops.add(add, load_2)
            get_index_3 = self.get_index('index3')
            load_3 = ops.load('buf396', get_index_3)
            add_2 = ops.add(add_1, load_3)
            constant = ops.constant(4.0, torch.float32)
            div = ops.div(add_2, constant)
            get_index_4 = self.get_index('index0')
            store = ops.store('buf397', get_index_4, div, None)
            return store
    buf397_buf398_buf399_buf400.snodes[1] =
    buf398: SchedulerNode(ComputedBuffer)
    buf398.writes = [MemoryDep('buf398', c0, {c0: 512})]
    buf398.unmet_dependencies = 
        [   MemoryDep('buf396', c0 + 1024, {c0: 512}),
            MemoryDep('buf396', c0 + 1536, {c0: 512}),
            MemoryDep('buf396', c0 + 512, {c0: 512}),
            MemoryDep('buf396', c0, {c0: 512}),
            MemoryDep('buf397', c0, {c0: 512})]
    buf398.met_dependencies = []
    buf398.users = [NodeUser(node=SchedulerNode(name='buf400'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf401'), can_inplace=False, is_weak=False)]
    buf398.group.device = cpu
    buf398.group.iteration = ((512,), ())
    buf398.sizes = ([512], [])
    class buf398_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        index1 = z0 + 512
        index2 = z0 + 1024
        index3 = z0 + 1536
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf396', get_index)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('buf397', get_index_1)
            sub = ops.sub(load, load_1)
            square = ops.square(sub)
            get_index_2 = self.get_index('index1')
            load_2 = ops.load('buf396', get_index_2)
            get_index_3 = self.get_index('index0')
            load_3 = ops.load('buf397', get_index_3)
            sub_1 = ops.sub(load_2, load_3)
            square_1 = ops.square(sub_1)
            add = ops.add(square, square_1)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf396', get_index_4)
            get_index_5 = self.get_index('index0')
            load_5 = ops.load('buf397', get_index_5)
            sub_2 = ops.sub(load_4, load_5)
            square_2 = ops.square(sub_2)
            add_1 = ops.add(add, square_2)
            get_index_6 = self.get_index('index3')
            load_6 = ops.load('buf396', get_index_6)
            get_index_7 = self.get_index('index0')
            load_7 = ops.load('buf397', get_index_7)
            sub_3 = ops.sub(load_6, load_7)
            square_3 = ops.square(sub_3)
            add_2 = ops.add(add_1, square_3)
            constant = ops.constant(4.0, torch.float32)
            div = ops.div(add_2, constant)
            get_index_8 = self.get_index('index0')
            store = ops.store('buf398', get_index_8, div, None)
            return store
    buf397_buf398_buf399_buf400.snodes[2] =
    buf399: SchedulerNode(ComputedBuffer)
    buf399.writes = [MemoryDep('buf399', c0, {c0: 512})]
    buf399.unmet_dependencies = [MemoryDep('buf397', c0, {c0: 512})]
    buf399.met_dependencies = [MemoryDep('primals_306', c0, {c0: 512})]
    buf399.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf399.group.device = cpu
    buf399.group.iteration = ((512,), ())
    buf399.sizes = ([512], [])
    class buf399_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf397', get_index)
            constant = ops.constant(0.1, torch.float32)
            mul = ops.mul(load, constant)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_306', get_index_1)
            constant_1 = ops.constant(0.9, torch.float32)
            mul_1 = ops.mul(load_1, constant_1)
            add = ops.add(mul, mul_1)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf399', get_index_2, add, None)
            return store
    buf397_buf398_buf399_buf400.snodes[3] =
    buf400: SchedulerNode(ComputedBuffer)
    buf400.writes = [MemoryDep('buf400', c0, {c0: 512})]
    buf400.unmet_dependencies = [MemoryDep('buf398', c0, {c0: 512})]
    buf400.met_dependencies = [MemoryDep('primals_307', c0, {c0: 512})]
    buf400.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf400.group.device = cpu
    buf400.group.iteration = ((512,), ())
    buf400.sizes = ([512], [])
    class buf400_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf398', get_index)
            constant = ops.constant(1.3333333333333333, torch.float32)
            mul = ops.mul(load, constant)
            constant_1 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_1)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_307', get_index_1)
            constant_2 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_2)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf400', get_index_2, add, None)
            return store


buf401: SchedulerNode(ComputedBuffer)
buf401.writes = [MemoryDep('buf401', c0, {c0: 2048})]
buf401.unmet_dependencies = 
    [   MemoryDep('buf396', c0, {c0: 2048}),
        MemoryDep('buf397', c1, {c0: 4, c1: 512}),
        MemoryDep('buf398', c1, {c0: 4, c1: 512})]
buf401.met_dependencies = 
    [   MemoryDep('primals_146', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_147', c1, {c0: 4, c1: 512})]
buf401.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf402'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf401.group.device = cpu
buf401.group.iteration = ((4, 512), ())
buf401.sizes = ([4, 512], [])
class buf401_loop_body:
    var_ranges = {z0: 4, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf396', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf397', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf398', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_146', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_147', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf401', get_index_5, relu, None)
        return store


buf402: ExternKernelSchedulerNode(ExternKernelAlloc)
buf402.writes = [StarDep(name='buf402')]
buf402.unmet_dependencies = [StarDep(name='buf401')]
buf402.met_dependencies = [StarDep(name='primals_148')]
buf402.users = [NodeUser(node=SchedulerNode(name='buf403'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf404'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf407'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf402.node.kernel = extern_kernels.convolution


buf403_buf404_buf405_buf406: FusedSchedulerNode(NoneType)
buf403_buf404_buf405_buf406.writes = 
    [   MemoryDep('buf403', c0, {c0: 2048}),
        MemoryDep('buf404', c0, {c0: 2048}),
        MemoryDep('buf405', c0, {c0: 2048}),
        MemoryDep('buf406', c0, {c0: 2048})]
buf403_buf404_buf405_buf406.unmet_dependencies = 
    [   MemoryDep('buf402', c0 + 2048, {c0: 2048}),
        MemoryDep('buf402', c0 + 4096, {c0: 2048}),
        MemoryDep('buf402', c0 + 6144, {c0: 2048}),
        MemoryDep('buf402', c0, {c0: 2048})]
buf403_buf404_buf405_buf406.met_dependencies = 
    [   MemoryDep('primals_309', c0, {c0: 2048}),
        MemoryDep('primals_310', c0, {c0: 2048})]
buf403_buf404_buf405_buf406.users = None
    buf403_buf404_buf405_buf406.snodes[0] =
    buf403: SchedulerNode(ComputedBuffer)
    buf403.writes = [MemoryDep('buf403', c0, {c0: 2048})]
    buf403.unmet_dependencies = 
        [   MemoryDep('buf402', c0 + 2048, {c0: 2048}),
            MemoryDep('buf402', c0 + 4096, {c0: 2048}),
            MemoryDep('buf402', c0 + 6144, {c0: 2048}),
            MemoryDep('buf402', c0, {c0: 2048})]
    buf403.met_dependencies = []
    buf403.users = [NodeUser(node=SchedulerNode(name='buf404'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf405'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf407'), can_inplace=False, is_weak=False)]
    buf403.group.device = cpu
    buf403.group.iteration = ((2048,), ())
    buf403.sizes = ([2048], [])
    class buf403_loop_body:
        var_ranges = {z0: 2048}
        index0 = z0
        index1 = z0 + 2048
        index2 = z0 + 4096
        index3 = z0 + 6144
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf402', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('buf402', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index2')
            load_2 = ops.load('buf402', get_index_2)
            add_1 = ops.add(add, load_2)
            get_index_3 = self.get_index('index3')
            load_3 = ops.load('buf402', get_index_3)
            add_2 = ops.add(add_1, load_3)
            constant = ops.constant(4.0, torch.float32)
            div = ops.div(add_2, constant)
            get_index_4 = self.get_index('index0')
            store = ops.store('buf403', get_index_4, div, None)
            return store
    buf403_buf404_buf405_buf406.snodes[1] =
    buf404: SchedulerNode(ComputedBuffer)
    buf404.writes = [MemoryDep('buf404', c0, {c0: 2048})]
    buf404.unmet_dependencies = 
        [   MemoryDep('buf402', c0 + 2048, {c0: 2048}),
            MemoryDep('buf402', c0 + 4096, {c0: 2048}),
            MemoryDep('buf402', c0 + 6144, {c0: 2048}),
            MemoryDep('buf402', c0, {c0: 2048}),
            MemoryDep('buf403', c0, {c0: 2048})]
    buf404.met_dependencies = []
    buf404.users = [NodeUser(node=SchedulerNode(name='buf406'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf407'), can_inplace=False, is_weak=False)]
    buf404.group.device = cpu
    buf404.group.iteration = ((2048,), ())
    buf404.sizes = ([2048], [])
    class buf404_loop_body:
        var_ranges = {z0: 2048}
        index0 = z0
        index1 = z0 + 2048
        index2 = z0 + 4096
        index3 = z0 + 6144
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf402', get_index)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('buf403', get_index_1)
            sub = ops.sub(load, load_1)
            square = ops.square(sub)
            get_index_2 = self.get_index('index1')
            load_2 = ops.load('buf402', get_index_2)
            get_index_3 = self.get_index('index0')
            load_3 = ops.load('buf403', get_index_3)
            sub_1 = ops.sub(load_2, load_3)
            square_1 = ops.square(sub_1)
            add = ops.add(square, square_1)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf402', get_index_4)
            get_index_5 = self.get_index('index0')
            load_5 = ops.load('buf403', get_index_5)
            sub_2 = ops.sub(load_4, load_5)
            square_2 = ops.square(sub_2)
            add_1 = ops.add(add, square_2)
            get_index_6 = self.get_index('index3')
            load_6 = ops.load('buf402', get_index_6)
            get_index_7 = self.get_index('index0')
            load_7 = ops.load('buf403', get_index_7)
            sub_3 = ops.sub(load_6, load_7)
            square_3 = ops.square(sub_3)
            add_2 = ops.add(add_1, square_3)
            constant = ops.constant(4.0, torch.float32)
            div = ops.div(add_2, constant)
            get_index_8 = self.get_index('index0')
            store = ops.store('buf404', get_index_8, div, None)
            return store
    buf403_buf404_buf405_buf406.snodes[2] =
    buf405: SchedulerNode(ComputedBuffer)
    buf405.writes = [MemoryDep('buf405', c0, {c0: 2048})]
    buf405.unmet_dependencies = [MemoryDep('buf403', c0, {c0: 2048})]
    buf405.met_dependencies = [MemoryDep('primals_309', c0, {c0: 2048})]
    buf405.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf405.group.device = cpu
    buf405.group.iteration = ((2048,), ())
    buf405.sizes = ([2048], [])
    class buf405_loop_body:
        var_ranges = {z0: 2048}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf403', get_index)
            constant = ops.constant(0.1, torch.float32)
            mul = ops.mul(load, constant)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_309', get_index_1)
            constant_1 = ops.constant(0.9, torch.float32)
            mul_1 = ops.mul(load_1, constant_1)
            add = ops.add(mul, mul_1)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf405', get_index_2, add, None)
            return store
    buf403_buf404_buf405_buf406.snodes[3] =
    buf406: SchedulerNode(ComputedBuffer)
    buf406.writes = [MemoryDep('buf406', c0, {c0: 2048})]
    buf406.unmet_dependencies = [MemoryDep('buf404', c0, {c0: 2048})]
    buf406.met_dependencies = [MemoryDep('primals_310', c0, {c0: 2048})]
    buf406.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf406.group.device = cpu
    buf406.group.iteration = ((2048,), ())
    buf406.sizes = ([2048], [])
    class buf406_loop_body:
        var_ranges = {z0: 2048}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf404', get_index)
            constant = ops.constant(1.3333333333333333, torch.float32)
            mul = ops.mul(load, constant)
            constant_1 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_1)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_310', get_index_1)
            constant_2 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_2)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf406', get_index_2, add, None)
            return store


buf407: SchedulerNode(ComputedBuffer)
buf407.writes = [MemoryDep('buf407', c0, {c0: 8192})]
buf407.unmet_dependencies = 
    [   MemoryDep('buf389', c0, {c0: 8192}),
        MemoryDep('buf402', c0, {c0: 8192}),
        MemoryDep('buf403', c1, {c0: 4, c1: 2048}),
        MemoryDep('buf404', c1, {c0: 4, c1: 2048})]
buf407.met_dependencies = 
    [   MemoryDep('primals_149', c1, {c0: 4, c1: 2048}),
        MemoryDep('primals_150', c1, {c0: 4, c1: 2048})]
buf407.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf408'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf425'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf407.group.device = cpu
buf407.group.iteration = ((4, 2048), ())
buf407.sizes = ([4, 2048], [])
class buf407_loop_body:
    var_ranges = {z0: 4, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf402', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf403', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf404', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_149', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_150', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf389', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf407', get_index_6, relu, None)
        return store


buf408: ExternKernelSchedulerNode(ExternKernelAlloc)
buf408.writes = [StarDep(name='buf408')]
buf408.unmet_dependencies = [StarDep(name='buf407')]
buf408.met_dependencies = [StarDep(name='primals_151')]
buf408.users = [NodeUser(node=SchedulerNode(name='buf409'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf410'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf413'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf408.node.kernel = extern_kernels.convolution


buf409_buf410_buf411_buf412: FusedSchedulerNode(NoneType)
buf409_buf410_buf411_buf412.writes = 
    [   MemoryDep('buf409', c0, {c0: 512}),
        MemoryDep('buf410', c0, {c0: 512}),
        MemoryDep('buf411', c0, {c0: 512}),
        MemoryDep('buf412', c0, {c0: 512})]
buf409_buf410_buf411_buf412.unmet_dependencies = 
    [   MemoryDep('buf408', c0 + 1024, {c0: 512}),
        MemoryDep('buf408', c0 + 1536, {c0: 512}),
        MemoryDep('buf408', c0 + 512, {c0: 512}),
        MemoryDep('buf408', c0, {c0: 512})]
buf409_buf410_buf411_buf412.met_dependencies = 
    [   MemoryDep('primals_312', c0, {c0: 512}),
        MemoryDep('primals_313', c0, {c0: 512})]
buf409_buf410_buf411_buf412.users = None
    buf409_buf410_buf411_buf412.snodes[0] =
    buf409: SchedulerNode(ComputedBuffer)
    buf409.writes = [MemoryDep('buf409', c0, {c0: 512})]
    buf409.unmet_dependencies = 
        [   MemoryDep('buf408', c0 + 1024, {c0: 512}),
            MemoryDep('buf408', c0 + 1536, {c0: 512}),
            MemoryDep('buf408', c0 + 512, {c0: 512}),
            MemoryDep('buf408', c0, {c0: 512})]
    buf409.met_dependencies = []
    buf409.users = [NodeUser(node=SchedulerNode(name='buf410'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf411'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf413'), can_inplace=False, is_weak=False)]
    buf409.group.device = cpu
    buf409.group.iteration = ((512,), ())
    buf409.sizes = ([512], [])
    class buf409_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        index1 = z0 + 512
        index2 = z0 + 1024
        index3 = z0 + 1536
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf408', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('buf408', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index2')
            load_2 = ops.load('buf408', get_index_2)
            add_1 = ops.add(add, load_2)
            get_index_3 = self.get_index('index3')
            load_3 = ops.load('buf408', get_index_3)
            add_2 = ops.add(add_1, load_3)
            constant = ops.constant(4.0, torch.float32)
            div = ops.div(add_2, constant)
            get_index_4 = self.get_index('index0')
            store = ops.store('buf409', get_index_4, div, None)
            return store
    buf409_buf410_buf411_buf412.snodes[1] =
    buf410: SchedulerNode(ComputedBuffer)
    buf410.writes = [MemoryDep('buf410', c0, {c0: 512})]
    buf410.unmet_dependencies = 
        [   MemoryDep('buf408', c0 + 1024, {c0: 512}),
            MemoryDep('buf408', c0 + 1536, {c0: 512}),
            MemoryDep('buf408', c0 + 512, {c0: 512}),
            MemoryDep('buf408', c0, {c0: 512}),
            MemoryDep('buf409', c0, {c0: 512})]
    buf410.met_dependencies = []
    buf410.users = [NodeUser(node=SchedulerNode(name='buf412'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf413'), can_inplace=False, is_weak=False)]
    buf410.group.device = cpu
    buf410.group.iteration = ((512,), ())
    buf410.sizes = ([512], [])
    class buf410_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        index1 = z0 + 512
        index2 = z0 + 1024
        index3 = z0 + 1536
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf408', get_index)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('buf409', get_index_1)
            sub = ops.sub(load, load_1)
            square = ops.square(sub)
            get_index_2 = self.get_index('index1')
            load_2 = ops.load('buf408', get_index_2)
            get_index_3 = self.get_index('index0')
            load_3 = ops.load('buf409', get_index_3)
            sub_1 = ops.sub(load_2, load_3)
            square_1 = ops.square(sub_1)
            add = ops.add(square, square_1)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf408', get_index_4)
            get_index_5 = self.get_index('index0')
            load_5 = ops.load('buf409', get_index_5)
            sub_2 = ops.sub(load_4, load_5)
            square_2 = ops.square(sub_2)
            add_1 = ops.add(add, square_2)
            get_index_6 = self.get_index('index3')
            load_6 = ops.load('buf408', get_index_6)
            get_index_7 = self.get_index('index0')
            load_7 = ops.load('buf409', get_index_7)
            sub_3 = ops.sub(load_6, load_7)
            square_3 = ops.square(sub_3)
            add_2 = ops.add(add_1, square_3)
            constant = ops.constant(4.0, torch.float32)
            div = ops.div(add_2, constant)
            get_index_8 = self.get_index('index0')
            store = ops.store('buf410', get_index_8, div, None)
            return store
    buf409_buf410_buf411_buf412.snodes[2] =
    buf411: SchedulerNode(ComputedBuffer)
    buf411.writes = [MemoryDep('buf411', c0, {c0: 512})]
    buf411.unmet_dependencies = [MemoryDep('buf409', c0, {c0: 512})]
    buf411.met_dependencies = [MemoryDep('primals_312', c0, {c0: 512})]
    buf411.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf411.group.device = cpu
    buf411.group.iteration = ((512,), ())
    buf411.sizes = ([512], [])
    class buf411_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf409', get_index)
            constant = ops.constant(0.1, torch.float32)
            mul = ops.mul(load, constant)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_312', get_index_1)
            constant_1 = ops.constant(0.9, torch.float32)
            mul_1 = ops.mul(load_1, constant_1)
            add = ops.add(mul, mul_1)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf411', get_index_2, add, None)
            return store
    buf409_buf410_buf411_buf412.snodes[3] =
    buf412: SchedulerNode(ComputedBuffer)
    buf412.writes = [MemoryDep('buf412', c0, {c0: 512})]
    buf412.unmet_dependencies = [MemoryDep('buf410', c0, {c0: 512})]
    buf412.met_dependencies = [MemoryDep('primals_313', c0, {c0: 512})]
    buf412.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf412.group.device = cpu
    buf412.group.iteration = ((512,), ())
    buf412.sizes = ([512], [])
    class buf412_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf410', get_index)
            constant = ops.constant(1.3333333333333333, torch.float32)
            mul = ops.mul(load, constant)
            constant_1 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_1)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_313', get_index_1)
            constant_2 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_2)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf412', get_index_2, add, None)
            return store


buf413: SchedulerNode(ComputedBuffer)
buf413.writes = [MemoryDep('buf413', c0, {c0: 2048})]
buf413.unmet_dependencies = 
    [   MemoryDep('buf408', c0, {c0: 2048}),
        MemoryDep('buf409', c1, {c0: 4, c1: 512}),
        MemoryDep('buf410', c1, {c0: 4, c1: 512})]
buf413.met_dependencies = 
    [   MemoryDep('primals_152', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_153', c1, {c0: 4, c1: 512})]
buf413.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf414'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf413.group.device = cpu
buf413.group.iteration = ((4, 512), ())
buf413.sizes = ([4, 512], [])
class buf413_loop_body:
    var_ranges = {z0: 4, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf409', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf410', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_152', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_153', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf413', get_index_5, relu, None)
        return store


buf414: ExternKernelSchedulerNode(ExternKernelAlloc)
buf414.writes = [StarDep(name='buf414')]
buf414.unmet_dependencies = [StarDep(name='buf16'), StarDep(name='buf413')]
buf414.met_dependencies = []
buf414.users = [NodeUser(node=SchedulerNode(name='buf415'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf416'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf419'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf414.node.kernel = extern_kernels.convolution


buf415_buf416_buf417_buf418: FusedSchedulerNode(NoneType)
buf415_buf416_buf417_buf418.writes = 
    [   MemoryDep('buf415', c0, {c0: 512}),
        MemoryDep('buf416', c0, {c0: 512}),
        MemoryDep('buf417', c0, {c0: 512}),
        MemoryDep('buf418', c0, {c0: 512})]
buf415_buf416_buf417_buf418.unmet_dependencies = 
    [   MemoryDep('buf414', c0 + 1024, {c0: 512}),
        MemoryDep('buf414', c0 + 1536, {c0: 512}),
        MemoryDep('buf414', c0 + 512, {c0: 512}),
        MemoryDep('buf414', c0, {c0: 512})]
buf415_buf416_buf417_buf418.met_dependencies = 
    [   MemoryDep('primals_315', c0, {c0: 512}),
        MemoryDep('primals_316', c0, {c0: 512})]
buf415_buf416_buf417_buf418.users = None
    buf415_buf416_buf417_buf418.snodes[0] =
    buf415: SchedulerNode(ComputedBuffer)
    buf415.writes = [MemoryDep('buf415', c0, {c0: 512})]
    buf415.unmet_dependencies = 
        [   MemoryDep('buf414', c0 + 1024, {c0: 512}),
            MemoryDep('buf414', c0 + 1536, {c0: 512}),
            MemoryDep('buf414', c0 + 512, {c0: 512}),
            MemoryDep('buf414', c0, {c0: 512})]
    buf415.met_dependencies = []
    buf415.users = [NodeUser(node=SchedulerNode(name='buf416'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf417'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf419'), can_inplace=False, is_weak=False)]
    buf415.group.device = cpu
    buf415.group.iteration = ((512,), ())
    buf415.sizes = ([512], [])
    class buf415_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        index1 = z0 + 512
        index2 = z0 + 1024
        index3 = z0 + 1536
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf414', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('buf414', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index2')
            load_2 = ops.load('buf414', get_index_2)
            add_1 = ops.add(add, load_2)
            get_index_3 = self.get_index('index3')
            load_3 = ops.load('buf414', get_index_3)
            add_2 = ops.add(add_1, load_3)
            constant = ops.constant(4.0, torch.float32)
            div = ops.div(add_2, constant)
            get_index_4 = self.get_index('index0')
            store = ops.store('buf415', get_index_4, div, None)
            return store
    buf415_buf416_buf417_buf418.snodes[1] =
    buf416: SchedulerNode(ComputedBuffer)
    buf416.writes = [MemoryDep('buf416', c0, {c0: 512})]
    buf416.unmet_dependencies = 
        [   MemoryDep('buf414', c0 + 1024, {c0: 512}),
            MemoryDep('buf414', c0 + 1536, {c0: 512}),
            MemoryDep('buf414', c0 + 512, {c0: 512}),
            MemoryDep('buf414', c0, {c0: 512}),
            MemoryDep('buf415', c0, {c0: 512})]
    buf416.met_dependencies = []
    buf416.users = [NodeUser(node=SchedulerNode(name='buf418'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf419'), can_inplace=False, is_weak=False)]
    buf416.group.device = cpu
    buf416.group.iteration = ((512,), ())
    buf416.sizes = ([512], [])
    class buf416_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        index1 = z0 + 512
        index2 = z0 + 1024
        index3 = z0 + 1536
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf414', get_index)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('buf415', get_index_1)
            sub = ops.sub(load, load_1)
            square = ops.square(sub)
            get_index_2 = self.get_index('index1')
            load_2 = ops.load('buf414', get_index_2)
            get_index_3 = self.get_index('index0')
            load_3 = ops.load('buf415', get_index_3)
            sub_1 = ops.sub(load_2, load_3)
            square_1 = ops.square(sub_1)
            add = ops.add(square, square_1)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf414', get_index_4)
            get_index_5 = self.get_index('index0')
            load_5 = ops.load('buf415', get_index_5)
            sub_2 = ops.sub(load_4, load_5)
            square_2 = ops.square(sub_2)
            add_1 = ops.add(add, square_2)
            get_index_6 = self.get_index('index3')
            load_6 = ops.load('buf414', get_index_6)
            get_index_7 = self.get_index('index0')
            load_7 = ops.load('buf415', get_index_7)
            sub_3 = ops.sub(load_6, load_7)
            square_3 = ops.square(sub_3)
            add_2 = ops.add(add_1, square_3)
            constant = ops.constant(4.0, torch.float32)
            div = ops.div(add_2, constant)
            get_index_8 = self.get_index('index0')
            store = ops.store('buf416', get_index_8, div, None)
            return store
    buf415_buf416_buf417_buf418.snodes[2] =
    buf417: SchedulerNode(ComputedBuffer)
    buf417.writes = [MemoryDep('buf417', c0, {c0: 512})]
    buf417.unmet_dependencies = [MemoryDep('buf415', c0, {c0: 512})]
    buf417.met_dependencies = [MemoryDep('primals_315', c0, {c0: 512})]
    buf417.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf417.group.device = cpu
    buf417.group.iteration = ((512,), ())
    buf417.sizes = ([512], [])
    class buf417_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf415', get_index)
            constant = ops.constant(0.1, torch.float32)
            mul = ops.mul(load, constant)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_315', get_index_1)
            constant_1 = ops.constant(0.9, torch.float32)
            mul_1 = ops.mul(load_1, constant_1)
            add = ops.add(mul, mul_1)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf417', get_index_2, add, None)
            return store
    buf415_buf416_buf417_buf418.snodes[3] =
    buf418: SchedulerNode(ComputedBuffer)
    buf418.writes = [MemoryDep('buf418', c0, {c0: 512})]
    buf418.unmet_dependencies = [MemoryDep('buf416', c0, {c0: 512})]
    buf418.met_dependencies = [MemoryDep('primals_316', c0, {c0: 512})]
    buf418.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf418.group.device = cpu
    buf418.group.iteration = ((512,), ())
    buf418.sizes = ([512], [])
    class buf418_loop_body:
        var_ranges = {z0: 512}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf416', get_index)
            constant = ops.constant(1.3333333333333333, torch.float32)
            mul = ops.mul(load, constant)
            constant_1 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_1)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_316', get_index_1)
            constant_2 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_2)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf418', get_index_2, add, None)
            return store


buf419: SchedulerNode(ComputedBuffer)
buf419.writes = [MemoryDep('buf419', c0, {c0: 2048})]
buf419.unmet_dependencies = 
    [   MemoryDep('buf414', c0, {c0: 2048}),
        MemoryDep('buf415', c1, {c0: 4, c1: 512}),
        MemoryDep('buf416', c1, {c0: 4, c1: 512})]
buf419.met_dependencies = 
    [   MemoryDep('primals_155', c1, {c0: 4, c1: 512}),
        MemoryDep('primals_156', c1, {c0: 4, c1: 512})]
buf419.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf420'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf419.group.device = cpu
buf419.group.iteration = ((4, 512), ())
buf419.sizes = ([4, 512], [])
class buf419_loop_body:
    var_ranges = {z0: 4, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf414', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf415', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf416', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_155', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_156', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf419', get_index_5, relu, None)
        return store


buf420: ExternKernelSchedulerNode(ExternKernelAlloc)
buf420.writes = [StarDep(name='buf420')]
buf420.unmet_dependencies = [StarDep(name='buf419')]
buf420.met_dependencies = [StarDep(name='primals_157')]
buf420.users = [NodeUser(node=SchedulerNode(name='buf421'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf422'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf425'), can_inplace=True, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf420.node.kernel = extern_kernels.convolution


buf421_buf422_buf423_buf424: FusedSchedulerNode(NoneType)
buf421_buf422_buf423_buf424.writes = 
    [   MemoryDep('buf421', c0, {c0: 2048}),
        MemoryDep('buf422', c0, {c0: 2048}),
        MemoryDep('buf423', c0, {c0: 2048}),
        MemoryDep('buf424', c0, {c0: 2048})]
buf421_buf422_buf423_buf424.unmet_dependencies = 
    [   MemoryDep('buf420', c0 + 2048, {c0: 2048}),
        MemoryDep('buf420', c0 + 4096, {c0: 2048}),
        MemoryDep('buf420', c0 + 6144, {c0: 2048}),
        MemoryDep('buf420', c0, {c0: 2048})]
buf421_buf422_buf423_buf424.met_dependencies = 
    [   MemoryDep('primals_318', c0, {c0: 2048}),
        MemoryDep('primals_319', c0, {c0: 2048})]
buf421_buf422_buf423_buf424.users = None
    buf421_buf422_buf423_buf424.snodes[0] =
    buf421: SchedulerNode(ComputedBuffer)
    buf421.writes = [MemoryDep('buf421', c0, {c0: 2048})]
    buf421.unmet_dependencies = 
        [   MemoryDep('buf420', c0 + 2048, {c0: 2048}),
            MemoryDep('buf420', c0 + 4096, {c0: 2048}),
            MemoryDep('buf420', c0 + 6144, {c0: 2048}),
            MemoryDep('buf420', c0, {c0: 2048})]
    buf421.met_dependencies = []
    buf421.users = [NodeUser(node=SchedulerNode(name='buf422'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf423'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf425'), can_inplace=False, is_weak=False)]
    buf421.group.device = cpu
    buf421.group.iteration = ((2048,), ())
    buf421.sizes = ([2048], [])
    class buf421_loop_body:
        var_ranges = {z0: 2048}
        index0 = z0
        index1 = z0 + 2048
        index2 = z0 + 4096
        index3 = z0 + 6144
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf420', get_index)
            get_index_1 = self.get_index('index1')
            load_1 = ops.load('buf420', get_index_1)
            add = ops.add(load, load_1)
            get_index_2 = self.get_index('index2')
            load_2 = ops.load('buf420', get_index_2)
            add_1 = ops.add(add, load_2)
            get_index_3 = self.get_index('index3')
            load_3 = ops.load('buf420', get_index_3)
            add_2 = ops.add(add_1, load_3)
            constant = ops.constant(4.0, torch.float32)
            div = ops.div(add_2, constant)
            get_index_4 = self.get_index('index0')
            store = ops.store('buf421', get_index_4, div, None)
            return store
    buf421_buf422_buf423_buf424.snodes[1] =
    buf422: SchedulerNode(ComputedBuffer)
    buf422.writes = [MemoryDep('buf422', c0, {c0: 2048})]
    buf422.unmet_dependencies = 
        [   MemoryDep('buf420', c0 + 2048, {c0: 2048}),
            MemoryDep('buf420', c0 + 4096, {c0: 2048}),
            MemoryDep('buf420', c0 + 6144, {c0: 2048}),
            MemoryDep('buf420', c0, {c0: 2048}),
            MemoryDep('buf421', c0, {c0: 2048})]
    buf422.met_dependencies = []
    buf422.users = [NodeUser(node=SchedulerNode(name='buf424'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf425'), can_inplace=False, is_weak=False)]
    buf422.group.device = cpu
    buf422.group.iteration = ((2048,), ())
    buf422.sizes = ([2048], [])
    class buf422_loop_body:
        var_ranges = {z0: 2048}
        index0 = z0
        index1 = z0 + 2048
        index2 = z0 + 4096
        index3 = z0 + 6144
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf420', get_index)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('buf421', get_index_1)
            sub = ops.sub(load, load_1)
            square = ops.square(sub)
            get_index_2 = self.get_index('index1')
            load_2 = ops.load('buf420', get_index_2)
            get_index_3 = self.get_index('index0')
            load_3 = ops.load('buf421', get_index_3)
            sub_1 = ops.sub(load_2, load_3)
            square_1 = ops.square(sub_1)
            add = ops.add(square, square_1)
            get_index_4 = self.get_index('index2')
            load_4 = ops.load('buf420', get_index_4)
            get_index_5 = self.get_index('index0')
            load_5 = ops.load('buf421', get_index_5)
            sub_2 = ops.sub(load_4, load_5)
            square_2 = ops.square(sub_2)
            add_1 = ops.add(add, square_2)
            get_index_6 = self.get_index('index3')
            load_6 = ops.load('buf420', get_index_6)
            get_index_7 = self.get_index('index0')
            load_7 = ops.load('buf421', get_index_7)
            sub_3 = ops.sub(load_6, load_7)
            square_3 = ops.square(sub_3)
            add_2 = ops.add(add_1, square_3)
            constant = ops.constant(4.0, torch.float32)
            div = ops.div(add_2, constant)
            get_index_8 = self.get_index('index0')
            store = ops.store('buf422', get_index_8, div, None)
            return store
    buf421_buf422_buf423_buf424.snodes[2] =
    buf423: SchedulerNode(ComputedBuffer)
    buf423.writes = [MemoryDep('buf423', c0, {c0: 2048})]
    buf423.unmet_dependencies = [MemoryDep('buf421', c0, {c0: 2048})]
    buf423.met_dependencies = [MemoryDep('primals_318', c0, {c0: 2048})]
    buf423.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf423.group.device = cpu
    buf423.group.iteration = ((2048,), ())
    buf423.sizes = ([2048], [])
    class buf423_loop_body:
        var_ranges = {z0: 2048}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf421', get_index)
            constant = ops.constant(0.1, torch.float32)
            mul = ops.mul(load, constant)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_318', get_index_1)
            constant_1 = ops.constant(0.9, torch.float32)
            mul_1 = ops.mul(load_1, constant_1)
            add = ops.add(mul, mul_1)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf423', get_index_2, add, None)
            return store
    buf421_buf422_buf423_buf424.snodes[3] =
    buf424: SchedulerNode(ComputedBuffer)
    buf424.writes = [MemoryDep('buf424', c0, {c0: 2048})]
    buf424.unmet_dependencies = [MemoryDep('buf422', c0, {c0: 2048})]
    buf424.met_dependencies = [MemoryDep('primals_319', c0, {c0: 2048})]
    buf424.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf424.group.device = cpu
    buf424.group.iteration = ((2048,), ())
    buf424.sizes = ([2048], [])
    class buf424_loop_body:
        var_ranges = {z0: 2048}
        index0 = z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf422', get_index)
            constant = ops.constant(1.3333333333333333, torch.float32)
            mul = ops.mul(load, constant)
            constant_1 = ops.constant(0.1, torch.float32)
            mul_1 = ops.mul(mul, constant_1)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('primals_319', get_index_1)
            constant_2 = ops.constant(0.9, torch.float32)
            mul_2 = ops.mul(load_1, constant_2)
            add = ops.add(mul_1, mul_2)
            get_index_2 = self.get_index('index0')
            store = ops.store('buf424', get_index_2, add, None)
            return store


buf425: SchedulerNode(ComputedBuffer)
buf425.writes = [MemoryDep('buf425', c0, {c0: 8192})]
buf425.unmet_dependencies = 
    [   MemoryDep('buf407', c0, {c0: 8192}),
        MemoryDep('buf420', c0, {c0: 8192}),
        MemoryDep('buf421', c1, {c0: 4, c1: 2048}),
        MemoryDep('buf422', c1, {c0: 4, c1: 2048})]
buf425.met_dependencies = 
    [   MemoryDep('primals_158', c1, {c0: 4, c1: 2048}),
        MemoryDep('primals_159', c1, {c0: 4, c1: 2048})]
buf425.users = [NodeUser(node=SchedulerNode(name='buf426'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf428'), can_inplace=True, is_weak=False)]
buf425.group.device = cpu
buf425.group.iteration = ((4, 2048), ())
buf425.sizes = ([4, 2048], [])
class buf425_loop_body:
    var_ranges = {z0: 4, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf421', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf422', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_158', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_159', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf407', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf425', get_index_6, relu, None)
        return store


buf426: SchedulerNode(ComputedBuffer)
buf426.writes = [MemoryDep('buf426', c0, {c0: 2048})]
buf426.unmet_dependencies = 
    [   MemoryDep('buf425', c0 + 2048, {c0: 2048}),
        MemoryDep('buf425', c0 + 4096, {c0: 2048}),
        MemoryDep('buf425', c0 + 6144, {c0: 2048}),
        MemoryDep('buf425', c0, {c0: 2048})]
buf426.met_dependencies = []
buf426.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf427'), can_inplace=False, is_weak=False), NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf426.group.device = cpu
buf426.group.iteration = ((2048,), ())
buf426.sizes = ([2048], [])
class buf426_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    index1 = z0 + 2048
    index2 = z0 + 4096
    index3 = z0 + 6144
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf425', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf425', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf425', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf425', get_index_3)
        add_2 = ops.add(add_1, load_3)
        constant = ops.constant(4.0, torch.float32)
        div = ops.div(add_2, constant)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf426', get_index_4, div, None)
        return store


buf427: ExternKernelSchedulerNode(ExternKernelOut)
buf427.writes = [StarDep(name='buf427')]
buf427.unmet_dependencies = [StarDep(name='buf426')]
buf427.met_dependencies = [StarDep(name='primals_160'), StarDep(name='primals_161')]
buf427.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf427.node.kernel = extern_kernels.addmm


buf428: SchedulerNode(ComputedBuffer)
buf428.writes = [MemoryDep('buf428', c0, {c0: 8192})]
buf428.unmet_dependencies = [MemoryDep('buf425', c0, {c0: 8192})]
buf428.met_dependencies = []
buf428.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf428.group.device = cpu
buf428.group.iteration = ((8192,), ())
buf428.sizes = ([8192], [])
class buf428_loop_body:
    var_ranges = {z0: 8192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf425', get_index)
        constant = ops.constant(0.0, torch.float32)
        le = ops.le(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf428', get_index_1, le, None)
        return store


buf429: SchedulerNode(ComputedBuffer)
buf429.writes = [MemoryDep('buf429', 0, {})]
buf429.unmet_dependencies = []
buf429.met_dependencies = [MemoryDep('primals_164', 0, {})]
buf429.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf429.group.device = cpu
buf429.group.iteration = ((), ())
buf429.sizes = ([], [])
class buf429_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_164', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf429', get_index_1, add, None)
        return store


buf430: SchedulerNode(ComputedBuffer)
buf430.writes = [MemoryDep('buf430', 0, {})]
buf430.unmet_dependencies = []
buf430.met_dependencies = [MemoryDep('primals_167', 0, {})]
buf430.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf430.group.device = cpu
buf430.group.iteration = ((), ())
buf430.sizes = ([], [])
class buf430_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_167', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf430', get_index_1, add, None)
        return store


buf431: SchedulerNode(ComputedBuffer)
buf431.writes = [MemoryDep('buf431', 0, {})]
buf431.unmet_dependencies = []
buf431.met_dependencies = [MemoryDep('primals_170', 0, {})]
buf431.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf431.group.device = cpu
buf431.group.iteration = ((), ())
buf431.sizes = ([], [])
class buf431_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_170', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf431', get_index_1, add, None)
        return store


buf432: SchedulerNode(ComputedBuffer)
buf432.writes = [MemoryDep('buf432', 0, {})]
buf432.unmet_dependencies = []
buf432.met_dependencies = [MemoryDep('primals_173', 0, {})]
buf432.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf432.group.device = cpu
buf432.group.iteration = ((), ())
buf432.sizes = ([], [])
class buf432_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_173', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf432', get_index_1, add, None)
        return store


buf433: SchedulerNode(ComputedBuffer)
buf433.writes = [MemoryDep('buf433', 0, {})]
buf433.unmet_dependencies = []
buf433.met_dependencies = [MemoryDep('primals_176', 0, {})]
buf433.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf433.group.device = cpu
buf433.group.iteration = ((), ())
buf433.sizes = ([], [])
class buf433_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_176', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf433', get_index_1, add, None)
        return store


buf434: SchedulerNode(ComputedBuffer)
buf434.writes = [MemoryDep('buf434', 0, {})]
buf434.unmet_dependencies = []
buf434.met_dependencies = [MemoryDep('primals_179', 0, {})]
buf434.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf434.group.device = cpu
buf434.group.iteration = ((), ())
buf434.sizes = ([], [])
class buf434_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_179', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf434', get_index_1, add, None)
        return store


buf435: SchedulerNode(ComputedBuffer)
buf435.writes = [MemoryDep('buf435', 0, {})]
buf435.unmet_dependencies = []
buf435.met_dependencies = [MemoryDep('primals_182', 0, {})]
buf435.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf435.group.device = cpu
buf435.group.iteration = ((), ())
buf435.sizes = ([], [])
class buf435_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_182', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf435', get_index_1, add, None)
        return store


buf436: SchedulerNode(ComputedBuffer)
buf436.writes = [MemoryDep('buf436', 0, {})]
buf436.unmet_dependencies = []
buf436.met_dependencies = [MemoryDep('primals_185', 0, {})]
buf436.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf436.group.device = cpu
buf436.group.iteration = ((), ())
buf436.sizes = ([], [])
class buf436_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_185', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf436', get_index_1, add, None)
        return store


buf437: SchedulerNode(ComputedBuffer)
buf437.writes = [MemoryDep('buf437', 0, {})]
buf437.unmet_dependencies = []
buf437.met_dependencies = [MemoryDep('primals_188', 0, {})]
buf437.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf437.group.device = cpu
buf437.group.iteration = ((), ())
buf437.sizes = ([], [])
class buf437_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_188', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf437', get_index_1, add, None)
        return store


buf438: SchedulerNode(ComputedBuffer)
buf438.writes = [MemoryDep('buf438', 0, {})]
buf438.unmet_dependencies = []
buf438.met_dependencies = [MemoryDep('primals_191', 0, {})]
buf438.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf438.group.device = cpu
buf438.group.iteration = ((), ())
buf438.sizes = ([], [])
class buf438_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_191', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf438', get_index_1, add, None)
        return store


buf439: SchedulerNode(ComputedBuffer)
buf439.writes = [MemoryDep('buf439', 0, {})]
buf439.unmet_dependencies = []
buf439.met_dependencies = [MemoryDep('primals_194', 0, {})]
buf439.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf439.group.device = cpu
buf439.group.iteration = ((), ())
buf439.sizes = ([], [])
class buf439_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_194', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf439', get_index_1, add, None)
        return store


buf440: SchedulerNode(ComputedBuffer)
buf440.writes = [MemoryDep('buf440', 0, {})]
buf440.unmet_dependencies = []
buf440.met_dependencies = [MemoryDep('primals_197', 0, {})]
buf440.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf440.group.device = cpu
buf440.group.iteration = ((), ())
buf440.sizes = ([], [])
class buf440_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_197', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf440', get_index_1, add, None)
        return store


buf441: SchedulerNode(ComputedBuffer)
buf441.writes = [MemoryDep('buf441', 0, {})]
buf441.unmet_dependencies = []
buf441.met_dependencies = [MemoryDep('primals_200', 0, {})]
buf441.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf441.group.device = cpu
buf441.group.iteration = ((), ())
buf441.sizes = ([], [])
class buf441_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_200', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf441', get_index_1, add, None)
        return store


buf442: SchedulerNode(ComputedBuffer)
buf442.writes = [MemoryDep('buf442', 0, {})]
buf442.unmet_dependencies = []
buf442.met_dependencies = [MemoryDep('primals_203', 0, {})]
buf442.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf442.group.device = cpu
buf442.group.iteration = ((), ())
buf442.sizes = ([], [])
class buf442_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_203', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf442', get_index_1, add, None)
        return store


buf443: SchedulerNode(ComputedBuffer)
buf443.writes = [MemoryDep('buf443', 0, {})]
buf443.unmet_dependencies = []
buf443.met_dependencies = [MemoryDep('primals_206', 0, {})]
buf443.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf443.group.device = cpu
buf443.group.iteration = ((), ())
buf443.sizes = ([], [])
class buf443_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_206', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf443', get_index_1, add, None)
        return store


buf444: SchedulerNode(ComputedBuffer)
buf444.writes = [MemoryDep('buf444', 0, {})]
buf444.unmet_dependencies = []
buf444.met_dependencies = [MemoryDep('primals_209', 0, {})]
buf444.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf444.group.device = cpu
buf444.group.iteration = ((), ())
buf444.sizes = ([], [])
class buf444_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_209', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf444', get_index_1, add, None)
        return store


buf445: SchedulerNode(ComputedBuffer)
buf445.writes = [MemoryDep('buf445', 0, {})]
buf445.unmet_dependencies = []
buf445.met_dependencies = [MemoryDep('primals_212', 0, {})]
buf445.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf445.group.device = cpu
buf445.group.iteration = ((), ())
buf445.sizes = ([], [])
class buf445_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_212', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf445', get_index_1, add, None)
        return store


buf446: SchedulerNode(ComputedBuffer)
buf446.writes = [MemoryDep('buf446', 0, {})]
buf446.unmet_dependencies = []
buf446.met_dependencies = [MemoryDep('primals_215', 0, {})]
buf446.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf446.group.device = cpu
buf446.group.iteration = ((), ())
buf446.sizes = ([], [])
class buf446_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_215', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf446', get_index_1, add, None)
        return store


buf447: SchedulerNode(ComputedBuffer)
buf447.writes = [MemoryDep('buf447', 0, {})]
buf447.unmet_dependencies = []
buf447.met_dependencies = [MemoryDep('primals_218', 0, {})]
buf447.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf447.group.device = cpu
buf447.group.iteration = ((), ())
buf447.sizes = ([], [])
class buf447_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_218', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf447', get_index_1, add, None)
        return store


buf448: SchedulerNode(ComputedBuffer)
buf448.writes = [MemoryDep('buf448', 0, {})]
buf448.unmet_dependencies = []
buf448.met_dependencies = [MemoryDep('primals_221', 0, {})]
buf448.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf448.group.device = cpu
buf448.group.iteration = ((), ())
buf448.sizes = ([], [])
class buf448_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_221', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf448', get_index_1, add, None)
        return store


buf449: SchedulerNode(ComputedBuffer)
buf449.writes = [MemoryDep('buf449', 0, {})]
buf449.unmet_dependencies = []
buf449.met_dependencies = [MemoryDep('primals_224', 0, {})]
buf449.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf449.group.device = cpu
buf449.group.iteration = ((), ())
buf449.sizes = ([], [])
class buf449_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_224', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf449', get_index_1, add, None)
        return store


buf450: SchedulerNode(ComputedBuffer)
buf450.writes = [MemoryDep('buf450', 0, {})]
buf450.unmet_dependencies = []
buf450.met_dependencies = [MemoryDep('primals_227', 0, {})]
buf450.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf450.group.device = cpu
buf450.group.iteration = ((), ())
buf450.sizes = ([], [])
class buf450_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_227', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf450', get_index_1, add, None)
        return store


buf451: SchedulerNode(ComputedBuffer)
buf451.writes = [MemoryDep('buf451', 0, {})]
buf451.unmet_dependencies = []
buf451.met_dependencies = [MemoryDep('primals_230', 0, {})]
buf451.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf451.group.device = cpu
buf451.group.iteration = ((), ())
buf451.sizes = ([], [])
class buf451_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_230', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf451', get_index_1, add, None)
        return store


buf452: SchedulerNode(ComputedBuffer)
buf452.writes = [MemoryDep('buf452', 0, {})]
buf452.unmet_dependencies = []
buf452.met_dependencies = [MemoryDep('primals_233', 0, {})]
buf452.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf452.group.device = cpu
buf452.group.iteration = ((), ())
buf452.sizes = ([], [])
class buf452_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_233', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf452', get_index_1, add, None)
        return store


buf453: SchedulerNode(ComputedBuffer)
buf453.writes = [MemoryDep('buf453', 0, {})]
buf453.unmet_dependencies = []
buf453.met_dependencies = [MemoryDep('primals_236', 0, {})]
buf453.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf453.group.device = cpu
buf453.group.iteration = ((), ())
buf453.sizes = ([], [])
class buf453_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_236', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf453', get_index_1, add, None)
        return store


buf454: SchedulerNode(ComputedBuffer)
buf454.writes = [MemoryDep('buf454', 0, {})]
buf454.unmet_dependencies = []
buf454.met_dependencies = [MemoryDep('primals_239', 0, {})]
buf454.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf454.group.device = cpu
buf454.group.iteration = ((), ())
buf454.sizes = ([], [])
class buf454_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_239', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf454', get_index_1, add, None)
        return store


buf455: SchedulerNode(ComputedBuffer)
buf455.writes = [MemoryDep('buf455', 0, {})]
buf455.unmet_dependencies = []
buf455.met_dependencies = [MemoryDep('primals_242', 0, {})]
buf455.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf455.group.device = cpu
buf455.group.iteration = ((), ())
buf455.sizes = ([], [])
class buf455_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_242', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf455', get_index_1, add, None)
        return store


buf456: SchedulerNode(ComputedBuffer)
buf456.writes = [MemoryDep('buf456', 0, {})]
buf456.unmet_dependencies = []
buf456.met_dependencies = [MemoryDep('primals_245', 0, {})]
buf456.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf456.group.device = cpu
buf456.group.iteration = ((), ())
buf456.sizes = ([], [])
class buf456_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_245', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf456', get_index_1, add, None)
        return store


buf457: SchedulerNode(ComputedBuffer)
buf457.writes = [MemoryDep('buf457', 0, {})]
buf457.unmet_dependencies = []
buf457.met_dependencies = [MemoryDep('primals_248', 0, {})]
buf457.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf457.group.device = cpu
buf457.group.iteration = ((), ())
buf457.sizes = ([], [])
class buf457_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_248', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf457', get_index_1, add, None)
        return store


buf458: SchedulerNode(ComputedBuffer)
buf458.writes = [MemoryDep('buf458', 0, {})]
buf458.unmet_dependencies = []
buf458.met_dependencies = [MemoryDep('primals_251', 0, {})]
buf458.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf458.group.device = cpu
buf458.group.iteration = ((), ())
buf458.sizes = ([], [])
class buf458_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_251', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf458', get_index_1, add, None)
        return store


buf459: SchedulerNode(ComputedBuffer)
buf459.writes = [MemoryDep('buf459', 0, {})]
buf459.unmet_dependencies = []
buf459.met_dependencies = [MemoryDep('primals_254', 0, {})]
buf459.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf459.group.device = cpu
buf459.group.iteration = ((), ())
buf459.sizes = ([], [])
class buf459_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_254', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf459', get_index_1, add, None)
        return store


buf460: SchedulerNode(ComputedBuffer)
buf460.writes = [MemoryDep('buf460', 0, {})]
buf460.unmet_dependencies = []
buf460.met_dependencies = [MemoryDep('primals_257', 0, {})]
buf460.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf460.group.device = cpu
buf460.group.iteration = ((), ())
buf460.sizes = ([], [])
class buf460_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_257', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf460', get_index_1, add, None)
        return store


buf461: SchedulerNode(ComputedBuffer)
buf461.writes = [MemoryDep('buf461', 0, {})]
buf461.unmet_dependencies = []
buf461.met_dependencies = [MemoryDep('primals_260', 0, {})]
buf461.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf461.group.device = cpu
buf461.group.iteration = ((), ())
buf461.sizes = ([], [])
class buf461_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_260', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf461', get_index_1, add, None)
        return store


buf462: SchedulerNode(ComputedBuffer)
buf462.writes = [MemoryDep('buf462', 0, {})]
buf462.unmet_dependencies = []
buf462.met_dependencies = [MemoryDep('primals_263', 0, {})]
buf462.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf462.group.device = cpu
buf462.group.iteration = ((), ())
buf462.sizes = ([], [])
class buf462_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_263', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf462', get_index_1, add, None)
        return store


buf463: SchedulerNode(ComputedBuffer)
buf463.writes = [MemoryDep('buf463', 0, {})]
buf463.unmet_dependencies = []
buf463.met_dependencies = [MemoryDep('primals_266', 0, {})]
buf463.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf463.group.device = cpu
buf463.group.iteration = ((), ())
buf463.sizes = ([], [])
class buf463_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_266', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf463', get_index_1, add, None)
        return store


buf464: SchedulerNode(ComputedBuffer)
buf464.writes = [MemoryDep('buf464', 0, {})]
buf464.unmet_dependencies = []
buf464.met_dependencies = [MemoryDep('primals_269', 0, {})]
buf464.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf464.group.device = cpu
buf464.group.iteration = ((), ())
buf464.sizes = ([], [])
class buf464_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_269', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf464', get_index_1, add, None)
        return store


buf465: SchedulerNode(ComputedBuffer)
buf465.writes = [MemoryDep('buf465', 0, {})]
buf465.unmet_dependencies = []
buf465.met_dependencies = [MemoryDep('primals_272', 0, {})]
buf465.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf465.group.device = cpu
buf465.group.iteration = ((), ())
buf465.sizes = ([], [])
class buf465_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_272', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf465', get_index_1, add, None)
        return store


buf466: SchedulerNode(ComputedBuffer)
buf466.writes = [MemoryDep('buf466', 0, {})]
buf466.unmet_dependencies = []
buf466.met_dependencies = [MemoryDep('primals_275', 0, {})]
buf466.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf466.group.device = cpu
buf466.group.iteration = ((), ())
buf466.sizes = ([], [])
class buf466_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_275', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf466', get_index_1, add, None)
        return store


buf467: SchedulerNode(ComputedBuffer)
buf467.writes = [MemoryDep('buf467', 0, {})]
buf467.unmet_dependencies = []
buf467.met_dependencies = [MemoryDep('primals_278', 0, {})]
buf467.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf467.group.device = cpu
buf467.group.iteration = ((), ())
buf467.sizes = ([], [])
class buf467_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_278', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf467', get_index_1, add, None)
        return store


buf468: SchedulerNode(ComputedBuffer)
buf468.writes = [MemoryDep('buf468', 0, {})]
buf468.unmet_dependencies = []
buf468.met_dependencies = [MemoryDep('primals_281', 0, {})]
buf468.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf468.group.device = cpu
buf468.group.iteration = ((), ())
buf468.sizes = ([], [])
class buf468_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_281', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf468', get_index_1, add, None)
        return store


buf469: SchedulerNode(ComputedBuffer)
buf469.writes = [MemoryDep('buf469', 0, {})]
buf469.unmet_dependencies = []
buf469.met_dependencies = [MemoryDep('primals_284', 0, {})]
buf469.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf469.group.device = cpu
buf469.group.iteration = ((), ())
buf469.sizes = ([], [])
class buf469_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_284', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf469', get_index_1, add, None)
        return store


buf470: SchedulerNode(ComputedBuffer)
buf470.writes = [MemoryDep('buf470', 0, {})]
buf470.unmet_dependencies = []
buf470.met_dependencies = [MemoryDep('primals_287', 0, {})]
buf470.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf470.group.device = cpu
buf470.group.iteration = ((), ())
buf470.sizes = ([], [])
class buf470_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_287', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf470', get_index_1, add, None)
        return store


buf471: SchedulerNode(ComputedBuffer)
buf471.writes = [MemoryDep('buf471', 0, {})]
buf471.unmet_dependencies = []
buf471.met_dependencies = [MemoryDep('primals_290', 0, {})]
buf471.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf471.group.device = cpu
buf471.group.iteration = ((), ())
buf471.sizes = ([], [])
class buf471_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_290', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf471', get_index_1, add, None)
        return store


buf472: SchedulerNode(ComputedBuffer)
buf472.writes = [MemoryDep('buf472', 0, {})]
buf472.unmet_dependencies = []
buf472.met_dependencies = [MemoryDep('primals_293', 0, {})]
buf472.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf472.group.device = cpu
buf472.group.iteration = ((), ())
buf472.sizes = ([], [])
class buf472_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_293', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf472', get_index_1, add, None)
        return store


buf473: SchedulerNode(ComputedBuffer)
buf473.writes = [MemoryDep('buf473', 0, {})]
buf473.unmet_dependencies = []
buf473.met_dependencies = [MemoryDep('primals_296', 0, {})]
buf473.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf473.group.device = cpu
buf473.group.iteration = ((), ())
buf473.sizes = ([], [])
class buf473_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_296', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf473', get_index_1, add, None)
        return store


buf474: SchedulerNode(ComputedBuffer)
buf474.writes = [MemoryDep('buf474', 0, {})]
buf474.unmet_dependencies = []
buf474.met_dependencies = [MemoryDep('primals_299', 0, {})]
buf474.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf474.group.device = cpu
buf474.group.iteration = ((), ())
buf474.sizes = ([], [])
class buf474_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_299', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf474', get_index_1, add, None)
        return store


buf475: SchedulerNode(ComputedBuffer)
buf475.writes = [MemoryDep('buf475', 0, {})]
buf475.unmet_dependencies = []
buf475.met_dependencies = [MemoryDep('primals_302', 0, {})]
buf475.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf475.group.device = cpu
buf475.group.iteration = ((), ())
buf475.sizes = ([], [])
class buf475_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_302', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf475', get_index_1, add, None)
        return store


buf476: SchedulerNode(ComputedBuffer)
buf476.writes = [MemoryDep('buf476', 0, {})]
buf476.unmet_dependencies = []
buf476.met_dependencies = [MemoryDep('primals_305', 0, {})]
buf476.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf476.group.device = cpu
buf476.group.iteration = ((), ())
buf476.sizes = ([], [])
class buf476_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_305', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf476', get_index_1, add, None)
        return store


buf477: SchedulerNode(ComputedBuffer)
buf477.writes = [MemoryDep('buf477', 0, {})]
buf477.unmet_dependencies = []
buf477.met_dependencies = [MemoryDep('primals_308', 0, {})]
buf477.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf477.group.device = cpu
buf477.group.iteration = ((), ())
buf477.sizes = ([], [])
class buf477_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_308', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf477', get_index_1, add, None)
        return store


buf478: SchedulerNode(ComputedBuffer)
buf478.writes = [MemoryDep('buf478', 0, {})]
buf478.unmet_dependencies = []
buf478.met_dependencies = [MemoryDep('primals_311', 0, {})]
buf478.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf478.group.device = cpu
buf478.group.iteration = ((), ())
buf478.sizes = ([], [])
class buf478_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_311', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf478', get_index_1, add, None)
        return store


buf479: SchedulerNode(ComputedBuffer)
buf479.writes = [MemoryDep('buf479', 0, {})]
buf479.unmet_dependencies = []
buf479.met_dependencies = [MemoryDep('primals_314', 0, {})]
buf479.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf479.group.device = cpu
buf479.group.iteration = ((), ())
buf479.sizes = ([], [])
class buf479_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_314', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf479', get_index_1, add, None)
        return store


buf480: SchedulerNode(ComputedBuffer)
buf480.writes = [MemoryDep('buf480', 0, {})]
buf480.unmet_dependencies = []
buf480.met_dependencies = [MemoryDep('primals_317', 0, {})]
buf480.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf480.group.device = cpu
buf480.group.iteration = ((), ())
buf480.sizes = ([], [])
class buf480_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_317', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf480', get_index_1, add, None)
        return store


buf481: SchedulerNode(ComputedBuffer)
buf481.writes = [MemoryDep('buf481', 0, {})]
buf481.unmet_dependencies = []
buf481.met_dependencies = [MemoryDep('primals_320', 0, {})]
buf481.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf481.group.device = cpu
buf481.group.iteration = ((), ())
buf481.sizes = ([], [])
class buf481_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_320', get_index)
        constant = ops.constant(1, torch.int64)
        add = ops.add(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf481', get_index_1, add, None)
        return store


