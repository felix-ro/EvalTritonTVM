2023-12-19 14:10:19 [INFO] [task_scheduler.cc:160] Initializing Task #5: "fused_nn_contrib_conv2d_NCHWc_add_3"
2023-12-19 14:10:19 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32), T.int64(64), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
2023-12-19 14:10:19 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2023-12-19 14:10:19 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(8), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)):
                with T.block("T_add"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[2, 1, 2, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 7, 1, 2])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 4, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 8, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[2, 32])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
2023-12-19 14:10:19 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(8), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(4), T.int64(8)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(14) + oh_1 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[2, 1, 2, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 7, 1, 2])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 4, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 8, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[2, 32])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-12-19 14:10:19 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(8), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(28), T.int64(8)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[2, 1, 2, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 7, 1, 2])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 4, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 8, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[2, 32])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-12-19 14:13:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-12-19 14:13:45 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-12-19 14:13:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x131ed318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf530838)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf4ed6d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1360e2d8)]: 0 failure(s)
2023-12-19 14:13:49 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2023-12-19 14:13:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x131ed318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf530838)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf4ed6d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1360e2d8)]: 0 failure(s)
2023-12-19 14:13:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x131ed318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf530838)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf4ed6d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1360e2d8)]: 0 failure(s)
2023-12-19 14:14:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x131ed318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf530838)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf4ed6d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1360e2d8)]: 0 failure(s)
2023-12-19 14:14:06 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x131ed318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf530838)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf4ed6d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1360e2d8)]: 0 failure(s)
2023-12-19 14:14:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9993  0.9992  0.9987  0.9984  0.9984  0.9981  0.9976  0.9971  0.9970  0.9966  0.9955  0.9950  0.9943  0.9943  0.9932
[17 : 32]:	0.9927  0.9924  0.9923  0.9921  0.9913  0.9902  0.9889  0.9882  0.9877  0.9871  0.9867  0.9863  0.9861  0.9859  0.9856  0.9851
[33 : 48]:	0.9822  0.9821  0.9817  0.9816  0.9812  0.9809  0.9808  0.9807  0.9805  0.9796  0.9796  0.9789  0.9785  0.9782  0.9778  0.9778
[49 : 64]:	0.9775  0.9742  0.9738  0.9732  0.9728  0.9724  0.9720  0.9719  0.9716  0.9715  0.9710  0.9709  0.9707  0.9705  0.9704  0.9702
2023-12-19 14:14:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-12-19 14:14:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #1: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(8) + oh_2_init * T.int64(4) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                for oc_block_3_fused in T.vectorized(T.int64(16)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(8) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(56)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 4, 2, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 1, 2, 4])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 4])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 16])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[64, 1])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b66)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #2: GFLOPs: 23.4929. Time: 4408.2847 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #3: GFLOPs: 15.1668. Time: 6828.2731 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #4: GFLOPs: 18.5975. Time: 5568.6678 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #5: GFLOPs: 7.6986. Time: 13452.2500 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #6: GFLOPs: 6.9463. Time: 14909.1670 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #7: GFLOPs: 4.7706. Time: 21708.8467 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #8: GFLOPs: 8.1892. Time: 12646.2952 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #9: GFLOPs: 11.2072. Time: 9240.7785 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #10: GFLOPs: 11.7684. Time: 8800.0900 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #11: GFLOPs: 10.9104. Time: 9492.1874 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #12: GFLOPs: 16.8722. Time: 6138.1120 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #13: GFLOPs: 17.4341. Time: 5940.2657 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #14: GFLOPs: 51.8834. Time: 1996.0771 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #15: GFLOPs: 12.7021. Time: 8153.2235 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #16: GFLOPs: 5.1721. Time: 20023.5448 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #17: GFLOPs: 20.3077. Time: 5099.6999 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #18: GFLOPs: 18.9485. Time: 5465.5210 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #19: GFLOPs: 15.6229. Time: 6628.9541 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #20: GFLOPs: 16.2832. Time: 6360.1434 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #21: GFLOPs: 6.4383. Time: 16085.4091 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #22: GFLOPs: 6.6058. Time: 15677.6071 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #23: GFLOPs: 13.1025. Time: 7904.0946 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #24: GFLOPs: 16.7543. Time: 6181.2975 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #25: GFLOPs: 16.2232. Time: 6383.6643 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #26: GFLOPs: 21.1506. Time: 4896.4780 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #27: GFLOPs: 15.1684. Time: 6827.5839 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #28: GFLOPs: 11.7147. Time: 8840.4572 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #29: GFLOPs: 7.8617. Time: 13173.2220 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #30: GFLOPs: 2.0880. Time: 49600.2490 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #31: GFLOPs: 15.7464. Time: 6576.9437 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #32: GFLOPs: 7.9370. Time: 13048.1271 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #33: GFLOPs: 21.3517. Time: 4850.3498 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #34: GFLOPs: 10.5054. Time: 9858.0747 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #35: GFLOPs: 24.3055. Time: 4260.8980 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #36: GFLOPs: 17.3588. Time: 5966.0229 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #37: GFLOPs: 33.6720. Time: 3075.6502 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #38: GFLOPs: 33.7860. Time: 3065.2725 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #39: GFLOPs: 24.7866. Time: 4178.2017 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #40: GFLOPs: 21.7552. Time: 4760.3939 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #41: GFLOPs: 117.4730. Time: 881.5922 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #42: GFLOPs: 30.9144. Time: 3349.9981 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #43: GFLOPs: 45.2598. Time: 2288.1958 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #44: GFLOPs: 58.2808. Time: 1776.9693 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #45: GFLOPs: 21.7698. Time: 4757.2030 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #46: GFLOPs: 24.6215. Time: 4206.2085 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #47: GFLOPs: 21.6538. Time: 4782.6754 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #48: GFLOPs: 30.1667. Time: 3433.0359 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #49: GFLOPs: 75.9274. Time: 1363.9775 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #50: GFLOPs: 7.3688. Time: 14054.2626 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #51: GFLOPs: 89.5151. Time: 1156.9367 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #52: GFLOPs: 113.5301. Time: 912.2097 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #53: GFLOPs: 38.3305. Time: 2701.8504 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #54: GFLOPs: 58.5745. Time: 1768.0604 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #55: GFLOPs: 8.2870. Time: 12497.0953 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #56: GFLOPs: 44.2776. Time: 2338.9546 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #57: GFLOPs: 28.4688. Time: 3637.7789 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #58: GFLOPs: 20.3414. Time: 5091.2460 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #59: GFLOPs: 104.3284. Time: 992.6664 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #60: GFLOPs: 25.7626. Time: 4019.9150 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #61: GFLOPs: 105.1859. Time: 984.5732 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #62: GFLOPs: 3.8752. Time: 26724.7770 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #63: GFLOPs: 32.7682. Time: 3160.4796 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #64: GFLOPs: 27.0978. Time: 3821.8348 us. Best GFLOPs: 117.4730
2023-12-20 15:07:32 [INFO] [task_scheduler.cc:160] Initializing Task #5: "fused_nn_contrib_conv2d_NCHWc_add_3"
2023-12-20 15:07:32 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32), T.int64(64), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
2023-12-20 15:07:32 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2023-12-20 15:07:32 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + oh_1 * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(28) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)):
                with T.block("T_add"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[4, 2, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 2, 2, 2])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 28, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 8])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[32, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
2023-12-20 15:07:32 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + oh_1 * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(28) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(28), T.int64(8)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(2) + oc_chunk_1 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + oh_1 * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[4, 2, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 2, 2, 2])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 28, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 8])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[32, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-12-20 15:07:32 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + oh_1 * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(28) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(56), T.int64(8)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[4, 2, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 2, 2, 2])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 28, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 8])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[32, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-12-20 15:11:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-12-20 15:11:02 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2023-12-20 15:11:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xef59b58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13bba038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfe37d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb554dc8)]: 0 failure(s)
2023-12-20 15:11:06 [INFO] [evolutionary_search.cc:723] Sampled 449 candidate(s)
2023-12-20 15:11:11 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xef59b58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13bba038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfe37d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb554dc8)]: 0 failure(s)
2023-12-20 15:11:16 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xef59b58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13bba038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfe37d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb554dc8)]: 0 failure(s)
2023-12-20 15:11:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xef59b58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13bba038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfe37d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb554dc8)]: 0 failure(s)
2023-12-20 15:11:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xef59b58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x13bba038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xfe37d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb554dc8)]: 0 failure(s)
2023-12-20 15:11:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9994  0.9993  0.9987  0.9984  0.9983  0.9973  0.9969  0.9961  0.9961  0.9956  0.9952  0.9952  0.9950  0.9940  0.9940
[17 : 32]:	0.9933  0.9926  0.9923  0.9923  0.9918  0.9918  0.9913  0.9912  0.9910  0.9910  0.9893  0.9891  0.9886  0.9884  0.9879  0.9877
[33 : 48]:	0.9857  0.9854  0.9853  0.9846  0.9843  0.9841  0.9835  0.9832  0.9826  0.9825  0.9824  0.9813  0.9812  0.9802  0.9800  0.9796
[49 : 64]:	0.9793  0.9791  0.9780  0.9769  0.9762  0.9760  0.9753  0.9753  0.9751  0.9748  0.9747  0.9746  0.9744  0.9742  0.9742  0.9740
2023-12-20 15:11:29 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-12-20 15:11:29 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #1: GFLOPs: 10.0578. Time: 10296.7679 us. Best GFLOPs: 10.0578
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #2: GFLOPs: 1.2345. Time: 83890.2193 us. Best GFLOPs: 10.0578
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #3: GFLOPs: 41.3529. Time: 2504.3773 us. Best GFLOPs: 41.3529
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #4: GFLOPs: 34.6118. Time: 2992.1352 us. Best GFLOPs: 41.3529
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #5: GFLOPs: 51.2216. Time: 2021.8656 us. Best GFLOPs: 51.2216
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #6: GFLOPs: 33.9869. Time: 3047.1535 us. Best GFLOPs: 51.2216
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #7: GFLOPs: 25.8028. Time: 4013.6470 us. Best GFLOPs: 51.2216
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #8: GFLOPs: 117.0520. Time: 884.7628 us. Best GFLOPs: 117.0520
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #9: GFLOPs: 25.8357. Time: 4008.5306 us. Best GFLOPs: 117.0520
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #10: GFLOPs: 107.0885. Time: 967.0811 us. Best GFLOPs: 117.0520
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #11: GFLOPs: 26.2822. Time: 3940.4308 us. Best GFLOPs: 117.0520
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #12: GFLOPs: 26.9530. Time: 3842.3712 us. Best GFLOPs: 117.0520
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #13: GFLOPs: 33.8298. Time: 3061.3047 us. Best GFLOPs: 117.0520
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #14: GFLOPs: 17.9392. Time: 5773.0054 us. Best GFLOPs: 117.0520
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #15: GFLOPs: 120.8432. Time: 857.0051 us. Best GFLOPs: 120.8432
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #16: GFLOPs: 12.3981. Time: 8353.1246 us. Best GFLOPs: 120.8432
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #17: GFLOPs: 42.5583. Time: 2433.4454 us. Best GFLOPs: 120.8432
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #18: GFLOPs: 56.1615. Time: 1844.0271 us. Best GFLOPs: 120.8432
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #19: GFLOPs: 37.5077. Time: 2761.1218 us. Best GFLOPs: 120.8432
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #20: GFLOPs: 32.2606. Time: 3210.2085 us. Best GFLOPs: 120.8432
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #21: GFLOPs: 204.5663. Time: 506.2577 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #22: GFLOPs: 12.7668. Time: 8111.9364 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #23: GFLOPs: 24.6595. Time: 4199.7308 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #24: GFLOPs: 37.2762. Time: 2778.2645 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #25: GFLOPs: 87.7631. Time: 1180.0324 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #26: GFLOPs: 21.6341. Time: 4787.0361 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #27: GFLOPs: 86.1478. Time: 1202.1581 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #28: GFLOPs: 170.5463. Time: 607.2442 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #29: GFLOPs: 21.0402. Time: 4922.1585 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #30: GFLOPs: 55.0882. Time: 1879.9526 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #31: GFLOPs: 28.8554. Time: 3589.0447 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #32: GFLOPs: 20.9282. Time: 4948.5027 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #33: GFLOPs: 7.4095. Time: 13977.0052 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #34: GFLOPs: 30.7937. Time: 3363.1299 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #35: GFLOPs: 23.5006. Time: 4406.8425 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #36: GFLOPs: 133.4318. Time: 776.1511 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #37: GFLOPs: 2.4771. Time: 41808.1463 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #38: GFLOPs: 0.1126. Time: 919908.7260 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #39: GFLOPs: 42.5762. Time: 2432.4215 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #40: GFLOPs: 11.0474. Time: 9374.4638 us. Best GFLOPs: 204.5663
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #41: GFLOPs: 227.9730. Time: 454.2786 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #42: GFLOPs: 20.5564. Time: 5038.0015 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #43: GFLOPs: 41.3226. Time: 2506.2139 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #44: GFLOPs: 181.3407. Time: 571.0978 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #45: GFLOPs: 66.6515. Time: 1553.8033 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #46: GFLOPs: 45.9808. Time: 2252.3147 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #47: GFLOPs: 43.0363. Time: 2406.4186 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #48: GFLOPs: 22.1772. Time: 4669.8031 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #49: GFLOPs: 31.1380. Time: 3325.9399 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #50: GFLOPs: 1.3147. Time: 78774.2457 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #51: GFLOPs: 17.3209. Time: 5979.0868 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #52: GFLOPs: 180.6383. Time: 573.3184 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #53: GFLOPs: 8.7218. Time: 11874.0084 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #54: GFLOPs: 23.6158. Time: 4385.3438 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #55: GFLOPs: 34.5237. Time: 2999.7708 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #56: GFLOPs: 160.1848. Time: 646.5237 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #57: GFLOPs: 48.9445. Time: 2115.9341 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #58: GFLOPs: 42.3907. Time: 2443.0630 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #59: GFLOPs: 1.7680. Time: 58575.3540 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #60: GFLOPs: 12.9579. Time: 7992.2655 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #61: GFLOPs: 86.4790. Time: 1197.5533 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #62: GFLOPs: 54.5934. Time: 1896.9916 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #63: GFLOPs: 65.1864. Time: 1588.7257 us. Best GFLOPs: 227.9730
2023-12-20 15:12:18 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #64: GFLOPs: 99.5505. Time: 1040.3084 us. Best GFLOPs: 227.9730
2023-12-20 15:27:19 [INFO] [task_scheduler.cc:160] Initializing Task #5: "fused_nn_contrib_conv2d_NCHWc_add_3"
2023-12-20 15:27:19 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32), T.int64(64), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
2023-12-20 15:27:19 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2023-12-20 15:27:19 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(16), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(28) + oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)):
                with T.block("T_add"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[2, 1, 4, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 2, 14])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 14])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 16, 1, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[8, 8])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
2023-12-20 15:27:19 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(16)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(28) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(14), T.int64(2)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_1 * T.int64(28) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[2, 1, 4, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 2, 14])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 14])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 16, 1, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[8, 8])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-12-20 15:27:19 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(16), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(28) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(56), T.int64(28), T.int64(32)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[2, 1, 4, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 2, 14])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 14])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 16, 1, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[8, 8])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-12-20 15:30:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-12-20 15:30:39 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-12-20 15:30:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd734988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10167fc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1078b268)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa48cab8)]: 0 failure(s)
2023-12-20 15:30:43 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2023-12-20 15:30:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd734988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10167fc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1078b268)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa48cab8)]: 0 failure(s)
2023-12-20 15:30:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd734988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10167fc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1078b268)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa48cab8)]: 0 failure(s)
2023-12-20 15:30:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd734988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10167fc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1078b268)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa48cab8)]: 0 failure(s)
2023-12-20 15:31:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd734988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10167fc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1078b268)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa48cab8)]: 0 failure(s)
2023-12-20 15:31:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9986  0.9980  0.9973  0.9971  0.9969  0.9962  0.9962  0.9961  0.9960  0.9958  0.9944  0.9941  0.9936  0.9930  0.9929
[17 : 32]:	0.9926  0.9917  0.9915  0.9913  0.9905  0.9901  0.9901  0.9896  0.9893  0.9889  0.9889  0.9889  0.9887  0.9880  0.9879  0.9877
[33 : 48]:	0.9869  0.9863  0.9844  0.9842  0.9831  0.9823  0.9821  0.9818  0.9817  0.9815  0.9808  0.9806  0.9803  0.9791  0.9791  0.9788
[49 : 64]:	0.9788  0.9780  0.9774  0.9769  0.9767  0.9749  0.9747  0.9738  0.9737  0.9736  0.9722  0.9718  0.9711  0.9706  0.9701  0.9701
2023-12-20 15:31:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-12-20 15:31:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #1: GFLOPs: 226.2449. Time: 457.7486 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #2: GFLOPs: 176.9747. Time: 585.1869 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #3: GFLOPs: 107.1361. Time: 966.6514 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #4: GFLOPs: 173.9869. Time: 595.2361 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #5: GFLOPs: 23.0298. Time: 4496.9278 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #6: GFLOPs: 43.7340. Time: 2368.0285 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #7: GFLOPs: 34.0884. Time: 3038.0791 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #8: GFLOPs: 179.4018. Time: 577.2698 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #9: GFLOPs: 66.9991. Time: 1545.7418 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #10: GFLOPs: 44.4954. Time: 2327.5054 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #11: GFLOPs: 0.6351. Time: 163075.2020 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #12: GFLOPs: 16.0027. Time: 6471.6018 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #13: GFLOPs: 190.1557. Time: 544.6234 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #14: GFLOPs: 40.5765. Time: 2552.2996 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #15: GFLOPs: 82.9075. Time: 1249.1423 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #16: GFLOPs: 50.0774. Time: 2068.0656 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #17: GFLOPs: 115.7063. Time: 895.0530 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #18: GFLOPs: 24.0697. Time: 4302.6460 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #19: GFLOPs: 47.1397. Time: 2196.9421 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #20: GFLOPs: 45.3419. Time: 2284.0542 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #21: GFLOPs: 159.2547. Time: 650.2997 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #22: GFLOPs: 3.8961. Time: 26581.4935 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #23: GFLOPs: 73.3510. Time: 1411.8858 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #24: GFLOPs: 57.1894. Time: 1810.8828 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #25: GFLOPs: 40.8893. Time: 2532.7702 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #26: GFLOPs: 4.9044. Time: 21116.1887 us. Best GFLOPs: 226.2449
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #27: GFLOPs: 256.9859. Time: 402.9921 us. Best GFLOPs: 256.9859
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #28: GFLOPs: 202.0417. Time: 512.5836 us. Best GFLOPs: 256.9859
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #29: GFLOPs: 188.6070. Time: 549.0955 us. Best GFLOPs: 256.9859
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #30: GFLOPs: 68.0937. Time: 1520.8926 us. Best GFLOPs: 256.9859
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #31: GFLOPs: 25.6708. Time: 4034.2822 us. Best GFLOPs: 256.9859
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #32: GFLOPs: 199.3760. Time: 519.4368 us. Best GFLOPs: 256.9859
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #33: GFLOPs: 164.9226. Time: 627.9509 us. Best GFLOPs: 256.9859
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #34: GFLOPs: 10.9940. Time: 9419.9672 us. Best GFLOPs: 256.9859
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #35: GFLOPs: 108.2431. Time: 956.7652 us. Best GFLOPs: 256.9859
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #36: GFLOPs: 112.2303. Time: 922.7742 us. Best GFLOPs: 256.9859
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #37: GFLOPs: 58.3067. Time: 1776.1822 us. Best GFLOPs: 256.9859
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #38: GFLOPs: 30.7024. Time: 3373.1344 us. Best GFLOPs: 256.9859
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #39: GFLOPs: 33.1461. Time: 3124.4501 us. Best GFLOPs: 256.9859
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #40: GFLOPs: 35.0329. Time: 2956.1695 us. Best GFLOPs: 256.9859
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #41: GFLOPs: 114.7966. Time: 902.1455 us. Best GFLOPs: 256.9859
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #42: GFLOPs: 52.6710. Time: 1966.2284 us. Best GFLOPs: 256.9859
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #43: GFLOPs: 36.2847. Time: 2854.1868 us. Best GFLOPs: 256.9859
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #44: GFLOPs: 116.6263. Time: 887.9926 us. Best GFLOPs: 256.9859
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #45: GFLOPs: 158.3696. Time: 653.9341 us. Best GFLOPs: 256.9859
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #46: GFLOPs: 270.4853. Time: 382.8794 us. Best GFLOPs: 270.4853
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #47: GFLOPs: 44.9755. Time: 2302.6582 us. Best GFLOPs: 270.4853
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #48: GFLOPs: 5.4224. Time: 19099.0009 us. Best GFLOPs: 270.4853
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #49: GFLOPs: 122.9368. Time: 842.4108 us. Best GFLOPs: 270.4853
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #50: GFLOPs: 48.1417. Time: 2151.2170 us. Best GFLOPs: 270.4853
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #51: GFLOPs: 240.1144. Time: 431.3079 us. Best GFLOPs: 270.4853
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #52: GFLOPs: 27.4969. Time: 3766.3567 us. Best GFLOPs: 270.4853
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #53: GFLOPs: 37.8742. Time: 2734.4012 us. Best GFLOPs: 270.4853
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #54: GFLOPs: 62.3115. Time: 1662.0260 us. Best GFLOPs: 270.4853
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #55: GFLOPs: 36.5869. Time: 2830.6136 us. Best GFLOPs: 270.4853
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #56: GFLOPs: 28.2868. Time: 3661.1818 us. Best GFLOPs: 270.4853
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #57: GFLOPs: 42.6863. Time: 2426.1488 us. Best GFLOPs: 270.4853
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #58: GFLOPs: 89.6517. Time: 1155.1740 us. Best GFLOPs: 270.4853
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #59: GFLOPs: 220.4102. Time: 469.8661 us. Best GFLOPs: 270.4853
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #60: GFLOPs: 34.5846. Time: 2994.4875 us. Best GFLOPs: 270.4853
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #61: GFLOPs: 67.7454. Time: 1528.7118 us. Best GFLOPs: 270.4853
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #62: GFLOPs: 194.6312. Time: 532.1001 us. Best GFLOPs: 270.4853
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #63: GFLOPs: 113.0959. Time: 915.7119 us. Best GFLOPs: 270.4853
2023-12-20 15:31:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #64: GFLOPs: 26.8976. Time: 3850.2768 us. Best GFLOPs: 270.4853
