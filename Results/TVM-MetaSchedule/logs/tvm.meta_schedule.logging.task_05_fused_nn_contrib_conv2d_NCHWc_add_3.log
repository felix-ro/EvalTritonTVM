2023-12-19 14:10:19 [INFO] [task_scheduler.cc:160] Initializing Task #5: "fused_nn_contrib_conv2d_NCHWc_add_3"
2023-12-19 14:10:19 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32), T.int64(64), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
2023-12-19 14:10:19 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2023-12-19 14:10:19 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(8), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)):
                with T.block("T_add"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[2, 1, 2, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 7, 1, 2])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 4, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 8, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[2, 32])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
2023-12-19 14:10:19 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(8), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(4), T.int64(8)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(14) + oh_1 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[2, 1, 2, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 7, 1, 2])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 4, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 8, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[2, 32])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-12-19 14:10:19 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(8), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(28), T.int64(8)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[2, 1, 2, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 7, 1, 2])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 4, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 8, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[2, 32])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-12-19 14:13:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-12-19 14:13:45 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-12-19 14:13:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x131ed318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf530838)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf4ed6d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1360e2d8)]: 0 failure(s)
2023-12-19 14:13:49 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2023-12-19 14:13:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x131ed318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf530838)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf4ed6d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1360e2d8)]: 0 failure(s)
2023-12-19 14:13:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x131ed318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf530838)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf4ed6d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1360e2d8)]: 0 failure(s)
2023-12-19 14:14:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x131ed318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf530838)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf4ed6d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1360e2d8)]: 0 failure(s)
2023-12-19 14:14:06 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x131ed318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xf530838)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf4ed6d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1360e2d8)]: 0 failure(s)
2023-12-19 14:14:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9993  0.9992  0.9987  0.9984  0.9984  0.9981  0.9976  0.9971  0.9970  0.9966  0.9955  0.9950  0.9943  0.9943  0.9932
[17 : 32]:	0.9927  0.9924  0.9923  0.9921  0.9913  0.9902  0.9889  0.9882  0.9877  0.9871  0.9867  0.9863  0.9861  0.9859  0.9856  0.9851
[33 : 48]:	0.9822  0.9821  0.9817  0.9816  0.9812  0.9809  0.9808  0.9807  0.9805  0.9796  0.9796  0.9789  0.9785  0.9782  0.9778  0.9778
[49 : 64]:	0.9775  0.9742  0.9738  0.9732  0.9728  0.9724  0.9720  0.9719  0.9716  0.9715  0.9710  0.9709  0.9707  0.9705  0.9704  0.9702
2023-12-19 14:14:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-12-19 14:14:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #1: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(4), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(8) + oh_2_init * T.int64(4) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                for oc_block_3_fused in T.vectorized(T.int64(16)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(8) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(56)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 4, 2, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 1, 2, 4])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 4])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 16])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[64, 1])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b66)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #2: GFLOPs: 23.4929. Time: 4408.2847 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #3: GFLOPs: 15.1668. Time: 6828.2731 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #4: GFLOPs: 18.5975. Time: 5568.6678 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #5: GFLOPs: 7.6986. Time: 13452.2500 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #6: GFLOPs: 6.9463. Time: 14909.1670 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #7: GFLOPs: 4.7706. Time: 21708.8467 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #8: GFLOPs: 8.1892. Time: 12646.2952 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #9: GFLOPs: 11.2072. Time: 9240.7785 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #10: GFLOPs: 11.7684. Time: 8800.0900 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #11: GFLOPs: 10.9104. Time: 9492.1874 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #12: GFLOPs: 16.8722. Time: 6138.1120 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #13: GFLOPs: 17.4341. Time: 5940.2657 us. Best GFLOPs: 23.4929
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #14: GFLOPs: 51.8834. Time: 1996.0771 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #15: GFLOPs: 12.7021. Time: 8153.2235 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #16: GFLOPs: 5.1721. Time: 20023.5448 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #17: GFLOPs: 20.3077. Time: 5099.6999 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #18: GFLOPs: 18.9485. Time: 5465.5210 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #19: GFLOPs: 15.6229. Time: 6628.9541 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #20: GFLOPs: 16.2832. Time: 6360.1434 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #21: GFLOPs: 6.4383. Time: 16085.4091 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #22: GFLOPs: 6.6058. Time: 15677.6071 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #23: GFLOPs: 13.1025. Time: 7904.0946 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #24: GFLOPs: 16.7543. Time: 6181.2975 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #25: GFLOPs: 16.2232. Time: 6383.6643 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #26: GFLOPs: 21.1506. Time: 4896.4780 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #27: GFLOPs: 15.1684. Time: 6827.5839 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #28: GFLOPs: 11.7147. Time: 8840.4572 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #29: GFLOPs: 7.8617. Time: 13173.2220 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #30: GFLOPs: 2.0880. Time: 49600.2490 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #31: GFLOPs: 15.7464. Time: 6576.9437 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #32: GFLOPs: 7.9370. Time: 13048.1271 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #33: GFLOPs: 21.3517. Time: 4850.3498 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #34: GFLOPs: 10.5054. Time: 9858.0747 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #35: GFLOPs: 24.3055. Time: 4260.8980 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #36: GFLOPs: 17.3588. Time: 5966.0229 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #37: GFLOPs: 33.6720. Time: 3075.6502 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #38: GFLOPs: 33.7860. Time: 3065.2725 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #39: GFLOPs: 24.7866. Time: 4178.2017 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #40: GFLOPs: 21.7552. Time: 4760.3939 us. Best GFLOPs: 51.8834
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #41: GFLOPs: 117.4730. Time: 881.5922 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #42: GFLOPs: 30.9144. Time: 3349.9981 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #43: GFLOPs: 45.2598. Time: 2288.1958 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #44: GFLOPs: 58.2808. Time: 1776.9693 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #45: GFLOPs: 21.7698. Time: 4757.2030 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #46: GFLOPs: 24.6215. Time: 4206.2085 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #47: GFLOPs: 21.6538. Time: 4782.6754 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #48: GFLOPs: 30.1667. Time: 3433.0359 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #49: GFLOPs: 75.9274. Time: 1363.9775 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #50: GFLOPs: 7.3688. Time: 14054.2626 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #51: GFLOPs: 89.5151. Time: 1156.9367 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #52: GFLOPs: 113.5301. Time: 912.2097 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #53: GFLOPs: 38.3305. Time: 2701.8504 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #54: GFLOPs: 58.5745. Time: 1768.0604 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #55: GFLOPs: 8.2870. Time: 12497.0953 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #56: GFLOPs: 44.2776. Time: 2338.9546 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #57: GFLOPs: 28.4688. Time: 3637.7789 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #58: GFLOPs: 20.3414. Time: 5091.2460 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #59: GFLOPs: 104.3284. Time: 992.6664 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #60: GFLOPs: 25.7626. Time: 4019.9150 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #61: GFLOPs: 105.1859. Time: 984.5732 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #62: GFLOPs: 3.8752. Time: 26724.7770 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #63: GFLOPs: 32.7682. Time: 3160.4796 us. Best GFLOPs: 117.4730
2023-12-19 14:16:44 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_NCHWc_add_3] Trial #64: GFLOPs: 27.0978. Time: 3821.8348 us. Best GFLOPs: 117.4730
