2023-12-20 15:07:36 [INFO] [task_scheduler.cc:160] Initializing Task #49: "fused_layout_transform_reshape_squeeze"
2023-12-20 15:07:36 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_squeeze: T.Buffer((T.int64(1), T.int64(2048)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_layout_trans = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        T_reshape = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1)):
            with T.block("T_layout_trans"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p0[v_ax0, v_ax1 // T.int64(32), v_ax2, v_ax3, v_ax1 % T.int64(32)])
                T.writes(T_layout_trans[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"dst_layout": "NCHW", "input_shape": [1, 64, 1, 1, 32], "schedule_rule": "None", "src_layout": "NCHW32c"})
                T_layout_trans[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(v_ax0 < T.int64(1) and v_ax1 < T.int64(2048) and v_ax2 < T.int64(1) and v_ax3 < T.int64(1), p0[v_ax0, v_ax1 // T.int64(32), v_ax2, v_ax3, v_ax1 % T.int64(32)], T.float32(0))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1)):
            with T.block("T_reshape"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_layout_trans[T.int64(0), (v_ax1 + v_ax2 + v_ax3) % T.int64(2048), T.int64(0), T.int64(0)])
                T.writes(T_reshape[v_ax0, v_ax1, v_ax2, v_ax3])
                T_reshape[v_ax0, v_ax1, v_ax2, v_ax3] = T_layout_trans[T.int64(0), (v_ax1 + v_ax2 + v_ax3) % T.int64(2048), T.int64(0), T.int64(0)]
        for ax0, ax1 in T.grid(T.int64(1), T.int64(2048)):
            with T.block("T_squeeze"):
                v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                T.reads(T_reshape[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_squeeze[v_ax0, v_ax1])
                T_squeeze[v_ax0, v_ax1] = T_reshape[v_ax0, v_ax1, T.int64(0), T.int64(0)]
2023-12-20 15:07:36 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2023-12-20 15:07:36 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_squeeze: T.Buffer((T.int64(1), T.int64(2048)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.vectorize": 64})
            T_layout_trans = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1)):
                with T.block("T_layout_trans"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    T.reads(p0[v_ax0, v_ax1 // T.int64(32), v_ax2, v_ax3, v_ax1 % T.int64(32)])
                    T.writes(T_layout_trans[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.block_attr({"dst_layout": "NCHW", "input_shape": [1, 64, 1, 1, 32], "schedule_rule": "None", "src_layout": "NCHW32c"})
                    T_layout_trans[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(v_ax0 < T.int64(1) and v_ax1 < T.int64(2048) and v_ax2 < T.int64(1) and v_ax3 < T.int64(1), p0[v_ax0, v_ax1 // T.int64(32), v_ax2, v_ax3, v_ax1 % T.int64(32)], T.float32(0))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(2048)):
                with T.block("T_squeeze"):
                    v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                    T.reads(T_layout_trans[T.int64(0), T.Add(T.Add(v_ax1, T.int64(0)), T.int64(0)) % T.int64(2048), T.int64(0), T.int64(0)])
                    T.writes(T_squeeze[v_ax0, v_ax1])
                    T_squeeze[v_ax0, v_ax1] = T_layout_trans[T.int64(0), T.Add(T.Add(v_ax1, T.int64(0)), T.int64(0)) % T.int64(2048), T.int64(0), T.int64(0)]
b0 = sch.get_block(name="T_reshape", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
2023-12-20 15:27:23 [INFO] [task_scheduler.cc:160] Initializing Task #49: "fused_layout_transform_reshape_squeeze"
2023-12-20 15:27:23 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_squeeze: T.Buffer((T.int64(1), T.int64(2048)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_layout_trans = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        T_reshape = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1)):
            with T.block("T_layout_trans"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p0[v_ax0, v_ax1 // T.int64(32), v_ax2, v_ax3, v_ax1 % T.int64(32)])
                T.writes(T_layout_trans[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"dst_layout": "NCHW", "input_shape": [1, 64, 1, 1, 32], "schedule_rule": "None", "src_layout": "NCHW32c"})
                T_layout_trans[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(v_ax0 < T.int64(1) and v_ax1 < T.int64(2048) and v_ax2 < T.int64(1) and v_ax3 < T.int64(1), p0[v_ax0, v_ax1 // T.int64(32), v_ax2, v_ax3, v_ax1 % T.int64(32)], T.float32(0))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1)):
            with T.block("T_reshape"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_layout_trans[T.int64(0), (v_ax1 + v_ax2 + v_ax3) % T.int64(2048), T.int64(0), T.int64(0)])
                T.writes(T_reshape[v_ax0, v_ax1, v_ax2, v_ax3])
                T_reshape[v_ax0, v_ax1, v_ax2, v_ax3] = T_layout_trans[T.int64(0), (v_ax1 + v_ax2 + v_ax3) % T.int64(2048), T.int64(0), T.int64(0)]
        for ax0, ax1 in T.grid(T.int64(1), T.int64(2048)):
            with T.block("T_squeeze"):
                v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                T.reads(T_reshape[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_squeeze[v_ax0, v_ax1])
                T_squeeze[v_ax0, v_ax1] = T_reshape[v_ax0, v_ax1, T.int64(0), T.int64(0)]
2023-12-20 15:27:23 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2023-12-20 15:27:23 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_squeeze: T.Buffer((T.int64(1), T.int64(2048)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.vectorize": 64})
            T_layout_trans = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1)):
                with T.block("T_layout_trans"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    T.reads(p0[v_ax0, v_ax1 // T.int64(32), v_ax2, v_ax3, v_ax1 % T.int64(32)])
                    T.writes(T_layout_trans[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.block_attr({"dst_layout": "NCHW", "input_shape": [1, 64, 1, 1, 32], "schedule_rule": "None", "src_layout": "NCHW32c"})
                    T_layout_trans[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(v_ax0 < T.int64(1) and v_ax1 < T.int64(2048) and v_ax2 < T.int64(1) and v_ax3 < T.int64(1), p0[v_ax0, v_ax1 // T.int64(32), v_ax2, v_ax3, v_ax1 % T.int64(32)], T.float32(0))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(2048)):
                with T.block("T_squeeze"):
                    v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                    T.reads(T_layout_trans[T.int64(0), T.Add(T.Add(v_ax1, T.int64(0)), T.int64(0)) % T.int64(2048), T.int64(0), T.int64(0)])
                    T.writes(T_squeeze[v_ax0, v_ax1])
                    T_squeeze[v_ax0, v_ax1] = T_layout_trans[T.int64(0), T.Add(T.Add(v_ax1, T.int64(0)), T.int64(0)) % T.int64(2048), T.int64(0), T.int64(0)]
b0 = sch.get_block(name="T_reshape", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
