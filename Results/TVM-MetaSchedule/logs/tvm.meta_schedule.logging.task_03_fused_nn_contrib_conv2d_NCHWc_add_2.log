2023-12-19 14:10:19 [INFO] [task_scheduler.cc:160] Initializing Task #3: "fused_nn_contrib_conv2d_NCHWc_add_2"
2023-12-19 14:10:19 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
2023-12-19 14:10:19 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2023-12-19 14:10:19 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(4), T.int64(7), T.int64(8), T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)):
                with T.block("T_add"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 4, 1, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 4, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 2])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 8, 1, 4])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[256, 1])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
2023-12-19 14:10:19 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(4), T.int64(7), T.int64(8)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(4) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 4, 1, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 4, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 2])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 8, 1, 4])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[256, 1])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-12-19 14:10:19 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(7), T.int64(8), T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(4), T.int64(14), T.int64(32)):
                    with T.block("T_add"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(32) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 4, 1, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 4, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 2])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 8, 1, 4])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[256, 1])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-12-19 14:12:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-12-19 14:12:36 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-12-19 14:12:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x135ab968)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10102a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x105aa1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1af31ff8)]: 0 failure(s)
2023-12-19 14:12:40 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2023-12-19 14:12:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x135ab968)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10102a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x105aa1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1af31ff8)]: 0 failure(s)
2023-12-19 14:12:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x135ab968)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10102a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x105aa1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1af31ff8)]: 0 failure(s)
2023-12-19 14:12:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x135ab968)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10102a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x105aa1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1af31ff8)]: 0 failure(s)
2023-12-19 14:12:58 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x135ab968)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10102a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x105aa1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1af31ff8)]: 0 failure(s)
2023-12-19 14:12:58 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9999  0.9996  0.9986  0.9983  0.9979  0.9976  0.9973  0.9971  0.9960  0.9955  0.9952  0.9944  0.9944  0.9938  0.9935
[17 : 32]:	0.9935  0.9932  0.9932  0.9931  0.9929  0.9918  0.9914  0.9914  0.9912  0.9909  0.9906  0.9906  0.9904  0.9903  0.9894  0.9893
[33 : 48]:	0.9889  0.9885  0.9875  0.9874  0.9871  0.9860  0.9845  0.9834  0.9831  0.9828  0.9824  0.9815  0.9812  0.9806  0.9793  0.9793
[49 : 64]:	0.9793  0.9792  0.9790  0.9790  0.9784  0.9783  0.9777  0.9766  0.9758  0.9750  0.9748  0.9747  0.9746  0.9738  0.9737  0.9726
2023-12-19 14:12:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-12-19 14:12:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #1: GFLOPs: 14.1801. Time: 14521.8903 us. Best GFLOPs: 14.1801
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #2: GFLOPs: 17.8277. Time: 11550.7075 us. Best GFLOPs: 17.8277
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #3: GFLOPs: 17.6129. Time: 11691.5376 us. Best GFLOPs: 17.8277
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #4: GFLOPs: 28.9570. Time: 7111.3232 us. Best GFLOPs: 28.9570
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #5: GFLOPs: 26.3589. Time: 7812.2348 us. Best GFLOPs: 28.9570
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #6: GFLOPs: 12.3396. Time: 16687.9872 us. Best GFLOPs: 28.9570
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #7: GFLOPs: 47.1518. Time: 4367.2214 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #8: GFLOPs: 4.5150. Time: 45608.3960 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #9: GFLOPs: 7.5264. Time: 27359.8828 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #10: GFLOPs: 39.9864. Time: 5149.8060 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #11: GFLOPs: 20.1876. Time: 10200.4534 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #12: GFLOPs: 11.4190. Time: 18033.3065 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #13: GFLOPs: 19.5534. Time: 10531.2954 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #14: GFLOPs: 21.3756. Time: 9633.5391 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #15: GFLOPs: 19.6868. Time: 10459.9050 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #16: GFLOPs: 34.1406. Time: 6031.5935 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #17: GFLOPs: 35.0325. Time: 5878.0352 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #18: GFLOPs: 14.6241. Time: 14081.0652 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #19: GFLOPs: 24.8074. Time: 8300.8426 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #20: GFLOPs: 30.2073. Time: 6816.9668 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #21: GFLOPs: 39.4093. Time: 5225.2189 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #22: GFLOPs: 20.0186. Time: 10286.5266 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #23: GFLOPs: 43.3655. Time: 4748.5277 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #24: GFLOPs: 20.4884. Time: 10050.6899 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #25: GFLOPs: 12.2058. Time: 16870.9199 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #26: GFLOPs: 18.1127. Time: 11368.9612 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #27: GFLOPs: 4.6308. Time: 44467.6570 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #28: GFLOPs: 17.8193. Time: 11556.1234 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #29: GFLOPs: 2.5375. Time: 81152.5830 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #30: GFLOPs: 34.9712. Time: 5888.3466 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #31: GFLOPs: 29.3524. Time: 7015.5088 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #32: GFLOPs: 39.0600. Time: 5271.9464 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #33: GFLOPs: 15.2928. Time: 13465.2724 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #34: GFLOPs: 39.8264. Time: 5170.4989 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #35: GFLOPs: 18.1742. Time: 11330.4448 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #36: GFLOPs: 37.4458. Time: 5499.2152 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #37: GFLOPs: 16.2802. Time: 12648.6614 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #38: GFLOPs: 17.2620. Time: 11929.1936 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #39: GFLOPs: 28.9385. Time: 7115.8695 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #40: GFLOPs: 13.7688. Time: 14955.6831 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #41: GFLOPs: 20.5481. Time: 10021.4591 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #42: GFLOPs: 33.8005. Time: 6092.2810 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #43: GFLOPs: 13.3995. Time: 15367.8964 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #44: GFLOPs: 15.8911. Time: 12958.3525 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #45: GFLOPs: 14.1966. Time: 14505.0497 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #46: GFLOPs: 18.3650. Time: 11212.7850 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #47: GFLOPs: 14.8241. Time: 13891.0666 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #48: GFLOPs: 30.3432. Time: 6786.4295 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #49: GFLOPs: 37.2917. Time: 5521.9403 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #50: GFLOPs: 35.0999. Time: 5866.7472 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #51: GFLOPs: 30.0808. Time: 6845.6447 us. Best GFLOPs: 47.1518
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #52: GFLOPs: 72.7797. Time: 2829.3916 us. Best GFLOPs: 72.7797
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #53: GFLOPs: 43.6780. Time: 4714.5555 us. Best GFLOPs: 72.7797
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #54: GFLOPs: 76.7690. Time: 2682.3642 us. Best GFLOPs: 76.7690
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #55: GFLOPs: 9.3445. Time: 22036.7424 us. Best GFLOPs: 76.7690
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #56: GFLOPs: 69.4571. Time: 2964.7407 us. Best GFLOPs: 76.7690
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #57: GFLOPs: 182.9870. Time: 1125.3387 us. Best GFLOPs: 182.9870
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #58: GFLOPs: 18.5289. Time: 11113.5658 us. Best GFLOPs: 182.9870
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #59: GFLOPs: 8.5160. Time: 24180.6562 us. Best GFLOPs: 182.9870
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #60: GFLOPs: 42.1213. Time: 4888.7897 us. Best GFLOPs: 182.9870
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #61: GFLOPs: 48.8622. Time: 4214.3440 us. Best GFLOPs: 182.9870
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #62: GFLOPs: 31.1941. Time: 6601.3131 us. Best GFLOPs: 182.9870
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #63: GFLOPs: 23.6189. Time: 8718.5232 us. Best GFLOPs: 182.9870
2023-12-19 14:16:18 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #64: GFLOPs: 12.7226. Time: 16185.5386 us. Best GFLOPs: 182.9870
2023-12-20 15:07:31 [INFO] [task_scheduler.cc:160] Initializing Task #3: "fused_nn_contrib_conv2d_NCHWc_add_2"
2023-12-20 15:07:31 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
2023-12-20 15:07:31 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2023-12-20 15:07:31 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(7), T.int64(4), T.int64(4), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(7), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)):
                with T.block("T_add"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 2, 2, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 4, 2, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[64, 4])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
2023-12-20 15:07:32 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(7), T.int64(4), T.int64(4)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(7), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(7), T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), oc_chunk_1 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_1 * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_1 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(4) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 2, 2, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 4, 2, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[64, 4])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-12-20 15:07:32 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(4), T.int64(4), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(7), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(16)):
                    with T.block("T_add"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(16) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 2, 2, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 4, 2, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[64, 4])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-12-20 15:09:44 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-12-20 15:09:45 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2023-12-20 15:09:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1dee5138)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1c1b56e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb2ae688)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x14129c68)]: 0 failure(s)
2023-12-20 15:09:50 [INFO] [evolutionary_search.cc:723] Sampled 448 candidate(s)
2023-12-20 15:09:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1dee5138)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1c1b56e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb2ae688)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x14129c68)]: 0 failure(s)
2023-12-20 15:10:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1dee5138)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1c1b56e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb2ae688)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x14129c68)]: 0 failure(s)
2023-12-20 15:10:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1dee5138)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1c1b56e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb2ae688)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x14129c68)]: 0 failure(s)
2023-12-20 15:10:11 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1dee5138)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1c1b56e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb2ae688)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x14129c68)]: 0 failure(s)
2023-12-20 15:10:12 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9984  0.9974  0.9973  0.9973  0.9969  0.9961  0.9959  0.9955  0.9954  0.9948  0.9946  0.9942  0.9935  0.9933  0.9923
[17 : 32]:	0.9917  0.9915  0.9912  0.9908  0.9908  0.9908  0.9906  0.9900  0.9898  0.9897  0.9896  0.9895  0.9890  0.9884  0.9880  0.9875
[33 : 48]:	0.9875  0.9872  0.9870  0.9870  0.9869  0.9868  0.9868  0.9867  0.9861  0.9856  0.9843  0.9840  0.9832  0.9832  0.9829  0.9824
[49 : 64]:	0.9816  0.9807  0.9804  0.9803  0.9801  0.9797  0.9793  0.9786  0.9780  0.9767  0.9765  0.9761  0.9757  0.9756  0.9756  0.9755
2023-12-20 15:10:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-12-20 15:10:13 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #1: GFLOPs: 5.6150. Time: 36673.8137 us. Best GFLOPs: 5.6150
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #2: GFLOPs: 118.5627. Time: 1736.8221 us. Best GFLOPs: 118.5627
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #3: GFLOPs: 233.3194. Time: 882.5769 us. Best GFLOPs: 233.3194
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #4: GFLOPs: 7.6819. Time: 26806.1998 us. Best GFLOPs: 233.3194
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #5: GFLOPs: 15.7580. Time: 13067.7941 us. Best GFLOPs: 233.3194
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #6: GFLOPs: 16.8584. Time: 12214.8453 us. Best GFLOPs: 233.3194
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #7: GFLOPs: 156.0463. Time: 1319.6227 us. Best GFLOPs: 233.3194
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #8: GFLOPs: 105.0907. Time: 1959.4728 us. Best GFLOPs: 233.3194
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #9: GFLOPs: 261.2133. Time: 788.3302 us. Best GFLOPs: 261.2133
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #10: GFLOPs: 33.9061. Time: 6073.3070 us. Best GFLOPs: 261.2133
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #11: GFLOPs: 76.7686. Time: 2682.3770 us. Best GFLOPs: 261.2133
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #12: GFLOPs: 212.6031. Time: 968.5762 us. Best GFLOPs: 261.2133
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #13: GFLOPs: 49.5495. Time: 4155.8946 us. Best GFLOPs: 261.2133
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #14: GFLOPs: 182.4106. Time: 1128.8943 us. Best GFLOPs: 261.2133
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #15: GFLOPs: 168.4504. Time: 1222.4508 us. Best GFLOPs: 261.2133
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #16: GFLOPs: 56.9648. Time: 3614.9035 us. Best GFLOPs: 261.2133
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #17: GFLOPs: 33.5344. Time: 6140.6358 us. Best GFLOPs: 261.2133
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #18: GFLOPs: 14.1798. Time: 14522.2375 us. Best GFLOPs: 261.2133
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #19: GFLOPs: 45.2067. Time: 4555.1291 us. Best GFLOPs: 261.2133
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #20: GFLOPs: 271.5551. Time: 758.3077 us. Best GFLOPs: 271.5551
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #21: GFLOPs: 67.8242. Time: 3036.1205 us. Best GFLOPs: 271.5551
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #22: GFLOPs: 301.0782. Time: 683.9496 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #23: GFLOPs: 4.0387. Time: 50987.7100 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #24: GFLOPs: 125.4010. Time: 1642.1103 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #25: GFLOPs: 33.8205. Time: 6088.6916 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #26: GFLOPs: 54.5561. Time: 3774.5062 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #27: GFLOPs: 174.3160. Time: 1181.3161 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #28: GFLOPs: 16.3412. Time: 12601.4200 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #29: GFLOPs: 49.7221. Time: 4141.4631 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #30: GFLOPs: 72.5073. Time: 2840.0236 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #31: GFLOPs: 24.6216. Time: 8363.4655 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #32: GFLOPs: 29.2655. Time: 7036.3423 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #33: GFLOPs: 243.5383. Time: 845.5438 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #34: GFLOPs: 58.4822. Time: 3521.1135 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #35: GFLOPs: 91.3334. Time: 2254.6209 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #36: GFLOPs: 23.9600. Time: 8594.4371 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #37: GFLOPs: 74.9078. Time: 2749.0085 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #38: GFLOPs: 23.0818. Time: 8921.4318 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #39: GFLOPs: 58.9174. Time: 3495.1013 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #40: GFLOPs: 89.7197. Time: 2295.1735 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #41: GFLOPs: 182.4693. Time: 1128.5312 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #42: GFLOPs: 9.0052. Time: 22867.0711 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #43: GFLOPs: 199.0545. Time: 1034.5021 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #44: GFLOPs: 196.1322. Time: 1049.9159 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #45: GFLOPs: 45.3994. Time: 4535.7894 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #46: GFLOPs: 50.6296. Time: 4067.2350 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #47: GFLOPs: 72.2431. Time: 2850.4072 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #48: GFLOPs: 162.9159. Time: 1263.9795 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #49: GFLOPs: 224.0373. Time: 919.1430 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #50: GFLOPs: 48.4992. Time: 4245.8909 us. Best GFLOPs: 301.0782
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #51: GFLOPs: 503.6527. Time: 408.8578 us. Best GFLOPs: 503.6527
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #52: GFLOPs: 275.1049. Time: 748.5227 us. Best GFLOPs: 503.6527
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #53: GFLOPs: 177.7136. Time: 1158.7310 us. Best GFLOPs: 503.6527
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #54: GFLOPs: 112.7491. Time: 1826.3761 us. Best GFLOPs: 503.6527
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #55: GFLOPs: 9.1719. Time: 22451.5106 us. Best GFLOPs: 503.6527
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #56: GFLOPs: 35.6312. Time: 5779.2742 us. Best GFLOPs: 503.6527
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #57: GFLOPs: 111.7606. Time: 1842.5302 us. Best GFLOPs: 503.6527
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #58: GFLOPs: 104.4092. Time: 1972.2615 us. Best GFLOPs: 503.6527
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #59: GFLOPs: 151.9082. Time: 1355.5703 us. Best GFLOPs: 503.6527
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #60: GFLOPs: 165.7509. Time: 1242.3600 us. Best GFLOPs: 503.6527
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #61: GFLOPs: 0.5368. Time: 383594.7370 us. Best GFLOPs: 503.6527
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #62: GFLOPs: 34.0639. Time: 6045.1831 us. Best GFLOPs: 503.6527
2023-12-20 15:12:17 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #63: GFLOPs: 81.4294. Time: 2528.8443 us. Best GFLOPs: 503.6527
2023-12-20 15:27:19 [INFO] [task_scheduler.cc:160] Initializing Task #3: "fused_nn_contrib_conv2d_NCHWc_add_2"
2023-12-20 15:27:19 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
2023-12-20 15:27:19 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2023-12-20 15:27:19 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(2) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)):
                with T.block("T_add"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 8, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 2, 8, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[128, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
2023-12-20 15:27:19 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(2), T.int64(8)):
                    with T.block("T_add"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 8, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 2, 8, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[128, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-12-20 15:27:19 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(56), T.int64(56), T.int64(256)), "float32"), p1: T.Buffer((T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 256, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(64)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(8), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)], p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(256), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(256)] * p1[v_oc_chunk, v_ic // T.int64(256), v_kh, v_kw, v_ic % T.int64(256), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(4), T.int64(16)):
                    with T.block("T_add"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(64), oc_block_0 * T.int64(16) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 8, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 2, 8, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[128, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=256)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2023-12-20 15:29:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-12-20 15:29:29 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-12-20 15:29:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdb181b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa4bf138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf76d998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10794048)]: 0 failure(s)
2023-12-20 15:29:33 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2023-12-20 15:29:38 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdb181b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa4bf138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf76d998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10794048)]: 0 failure(s)
2023-12-20 15:29:43 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdb181b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa4bf138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf76d998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10794048)]: 0 failure(s)
2023-12-20 15:29:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdb181b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa4bf138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf76d998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10794048)]: 0 failure(s)
2023-12-20 15:29:54 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdb181b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa4bf138)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xf76d998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10794048)]: 0 failure(s)
2023-12-20 15:29:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9995  0.9992  0.9992  0.9985  0.9983  0.9977  0.9956  0.9954  0.9952  0.9951  0.9946  0.9939  0.9933  0.9930  0.9926
[17 : 32]:	0.9926  0.9918  0.9916  0.9915  0.9914  0.9905  0.9904  0.9901  0.9897  0.9892  0.9891  0.9891  0.9891  0.9890  0.9889  0.9885
[33 : 48]:	0.9884  0.9878  0.9878  0.9869  0.9859  0.9856  0.9845  0.9831  0.9812  0.9810  0.9807  0.9805  0.9800  0.9799  0.9798  0.9796
[49 : 64]:	0.9792  0.9789  0.9789  0.9786  0.9785  0.9785  0.9784  0.9781  0.9776  0.9775  0.9774  0.9756  0.9748  0.9747  0.9740  0.9734
2023-12-20 15:29:56 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-12-20 15:29:56 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #1: GFLOPs: 45.5493. Time: 4520.8707 us. Best GFLOPs: 45.5493
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #2: GFLOPs: 68.6416. Time: 2999.9636 us. Best GFLOPs: 68.6416
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #3: GFLOPs: 51.6909. Time: 3983.7251 us. Best GFLOPs: 68.6416
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #4: GFLOPs: 102.1671. Time: 2015.5437 us. Best GFLOPs: 102.1671
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #5: GFLOPs: 17.0656. Time: 12066.5044 us. Best GFLOPs: 102.1671
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #6: GFLOPs: 192.6443. Time: 1068.9248 us. Best GFLOPs: 192.6443
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #7: GFLOPs: 54.5220. Time: 3776.8649 us. Best GFLOPs: 192.6443
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #8: GFLOPs: 128.7171. Time: 1599.8058 us. Best GFLOPs: 192.6443
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #9: GFLOPs: 200.0068. Time: 1029.5763 us. Best GFLOPs: 200.0068
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #10: GFLOPs: 38.3269. Time: 5372.7903 us. Best GFLOPs: 200.0068
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #11: GFLOPs: 32.8167. Time: 6274.9214 us. Best GFLOPs: 200.0068
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #12: GFLOPs: 34.0537. Time: 6046.9890 us. Best GFLOPs: 200.0068
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #13: GFLOPs: 65.4362. Time: 3146.9178 us. Best GFLOPs: 200.0068
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #14: GFLOPs: 15.6557. Time: 13153.1711 us. Best GFLOPs: 200.0068
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #15: GFLOPs: 193.2199. Time: 1065.7406 us. Best GFLOPs: 200.0068
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #16: GFLOPs: 52.4016. Time: 3929.6926 us. Best GFLOPs: 200.0068
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #17: GFLOPs: 37.3997. Time: 5505.9875 us. Best GFLOPs: 200.0068
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #18: GFLOPs: 22.2467. Time: 9256.2881 us. Best GFLOPs: 200.0068
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #19: GFLOPs: 184.2291. Time: 1117.7510 us. Best GFLOPs: 200.0068
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #20: GFLOPs: 59.4205. Time: 3465.5094 us. Best GFLOPs: 200.0068
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #21: GFLOPs: 123.0562. Time: 1673.3998 us. Best GFLOPs: 200.0068
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #22: GFLOPs: 90.0702. Time: 2286.2433 us. Best GFLOPs: 200.0068
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #23: GFLOPs: 4.8986. Time: 42037.1127 us. Best GFLOPs: 200.0068
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #24: GFLOPs: 23.0845. Time: 8920.3629 us. Best GFLOPs: 200.0068
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #25: GFLOPs: 158.4520. Time: 1299.5880 us. Best GFLOPs: 200.0068
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #26: GFLOPs: 267.6241. Time: 769.4459 us. Best GFLOPs: 267.6241
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #27: GFLOPs: 191.0550. Time: 1077.8168 us. Best GFLOPs: 267.6241
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #28: GFLOPs: 30.9054. Time: 6662.9846 us. Best GFLOPs: 267.6241
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #29: GFLOPs: 159.2216. Time: 1293.3065 us. Best GFLOPs: 267.6241
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #30: GFLOPs: 45.6669. Time: 4509.2272 us. Best GFLOPs: 267.6241
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #31: GFLOPs: 62.7331. Time: 3282.5124 us. Best GFLOPs: 267.6241
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #32: GFLOPs: 87.6145. Time: 2350.3233 us. Best GFLOPs: 267.6241
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #33: GFLOPs: 206.6804. Time: 996.3322 us. Best GFLOPs: 267.6241
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #34: GFLOPs: 74.9172. Time: 2748.6645 us. Best GFLOPs: 267.6241
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #35: GFLOPs: 7.1154. Time: 28940.3438 us. Best GFLOPs: 267.6241
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #36: GFLOPs: 57.0008. Time: 3612.6213 us. Best GFLOPs: 267.6241
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #37: GFLOPs: 180.2179. Time: 1142.6295 us. Best GFLOPs: 267.6241
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #38: GFLOPs: 59.5234. Time: 3459.5181 us. Best GFLOPs: 267.6241
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #39: GFLOPs: 527.1690. Time: 390.6192 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #40: GFLOPs: 438.5421. Time: 469.5611 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #41: GFLOPs: 98.9928. Time: 2080.1748 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #42: GFLOPs: 95.7861. Time: 2149.8150 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #43: GFLOPs: 100.5761. Time: 2047.4279 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #44: GFLOPs: 197.3426. Time: 1043.4760 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #45: GFLOPs: 52.6818. Time: 3908.7959 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #46: GFLOPs: 176.4922. Time: 1166.7503 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #47: GFLOPs: 60.8018. Time: 3386.7781 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #48: GFLOPs: 1.8811. Time: 109470.7043 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #49: GFLOPs: 185.0865. Time: 1112.5732 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #50: GFLOPs: 232.1799. Time: 886.9083 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #51: GFLOPs: 313.7919. Time: 656.2384 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #52: GFLOPs: 42.6367. Time: 4829.7009 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #53: GFLOPs: 58.5130. Time: 3519.2597 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #54: GFLOPs: 40.2196. Time: 5119.9516 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #55: GFLOPs: 39.1784. Time: 5256.0158 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #56: GFLOPs: 264.5894. Time: 778.2712 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #57: GFLOPs: 60.0877. Time: 3427.0291 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #58: GFLOPs: 38.5640. Time: 5339.7503 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #59: GFLOPs: 217.3423. Time: 947.4561 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #60: GFLOPs: 89.3304. Time: 2305.1763 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #61: GFLOPs: 105.7139. Time: 1947.9203 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #62: GFLOPs: 80.7236. Time: 2550.9569 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #63: GFLOPs: 5.3245. Time: 38674.3973 us. Best GFLOPs: 527.1690
2023-12-20 15:31:44 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #64: GFLOPs: 55.6318. Time: 3701.5247 us. Best GFLOPs: 527.1690
